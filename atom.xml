<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Botasky的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/iBotasky/"/>
  <updated>2017-08-26T16:00:50.000Z</updated>
  <id>https://github.com/iBotasky/</id>
  
  <author>
    <name>Botasky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>更新于2017/08/27</title>
    <link href="https://github.com/iBotasky/2017/08/26/%E6%9B%B4%E6%96%B0%E4%BA%8E2017-08-27/"/>
    <id>https://github.com/iBotasky/2017/08/26/更新于2017-08-27/</id>
    <published>2017-08-26T15:56:36.000Z</published>
    <updated>2017-08-26T16:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天更新了博客主题</p>
<a id="more"></a>
<p>今天更新了Hexo博客的主题，是一个以Material设计为主的模板，看着很好，就用了这个主题。推荐给大家</p>
<p><a href="https://github.com/viosey/hexo-theme-material">Material</a></p>
<p><a href="https://material.viosey.com/" target="_blank" rel="external">Material配置及教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天更新了博客主题&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/iBotasky/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>iOS模态视图.md</title>
    <link href="https://github.com/iBotasky/2017/08/15/iOS%E6%A8%A1%E6%80%81%E8%A7%86%E5%9B%BE/"/>
    <id>https://github.com/iBotasky/2017/08/15/iOS模态视图/</id>
    <published>2017-08-15T06:17:54.000Z</published>
    <updated>2017-08-27T09:19:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS的模态视图<br><a id="more"></a></p>
<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>iOS开发中，在当前视图上弹出一个视图(模态视图)例如登录视图，分享视图，注册视图等等。</p>
<h2 id="2-说明"><a href="#2-说明" class="headerlink" title="2.说明"></a>2.说明</h2><p>实现一个简单的多视图应用，视图控制器都会有一个<code>presentViewController</code>方法，用来显示模态视图窗口，在一些特别的环境下，例如登录，注册，分享等我们尤其希望使用这种方式去展现视图。</p>
<h3 id="2-1-具体设置和使用"><a href="#2-1-具体设置和使用" class="headerlink" title="2.1 具体设置和使用"></a>2.1 具体设置和使用</h3><h4 id="1-弹出模态视图窗口-presentViewController-方法"><a href="#1-弹出模态视图窗口-presentViewController-方法" class="headerlink" title="1.弹出模态视图窗口(presentViewController)方法"></a>1.弹出模态视图窗口(presentViewController)方法</h4><p>代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RegisterViewContrller *registerVc = [RegisterViewController alloc]init];</div><div class="line">[self presentViewController:registerVc animated:YES];</div></pre></td></tr></table></figure>
<h4 id="2-弹出时动画风格"><a href="#2-弹出时动画风格" class="headerlink" title="2.弹出时动画风格"></a>2.弹出时动画风格</h4><p>弹出模态窗口时，如果我们选择了动画，那么我们可以通过modalTranslationStyle属性设置动画风格</p>
<p><strong>UIModalTransitionStyleCoverVertical</strong>  // 底部滑入。<br><strong>UIModalTransitionStyleFlipHorizontal</strong> // 水平翻转。<br><strong>UIModalTransitionStyleCrossDissolve</strong> // 交叉溶解。<br><strong>UIModalTransitionStylePartialCurl</strong> // 翻页。</p>
<h4 id="3-回收模态视图"><a href="#3-回收模态视图" class="headerlink" title="3.回收模态视图"></a>3.回收模态视图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[self dissmissViewControllerAnimated:YES completion:nil];</div></pre></td></tr></table></figure>
<h4 id="4-presentingViewController"><a href="#4-presentingViewController" class="headerlink" title="4.presentingViewController"></a>4.presentingViewController</h4><p>presentingViewController是UIViewController的属性，官方文档上这么解释</p>
<blockquote>
<p><a href="https://developer.apple.com/reference/uikit/uiviewcontroller/1621430-presentingviewcontroller?language=objc" target="_blank" rel="external">presentingViewController </a><br>The view controller that presented this view controller.</p>
</blockquote>
<p>A 视图present了B视图，B视图的presentingViewContrller就是A视图 </p>
<h2 id="3-视图控制容器（ViewController-Container"><a href="#3-视图控制容器（ViewController-Container" class="headerlink" title="3.视图控制容器（ViewController Container)"></a>3.视图控制容器（ViewController Container)</h2><p><code>UINavigationController</code>/ <code>UITabBarController</code>/<code>UISlipViewController</code>等都属于ViewController Container，这些类的共性是都有一个类型为<code>ViewController</code>的对象数组,属性叫<code>viewControllers</code>，用于保存一组ViewControlller, ViewController Container会有自己默认的外观。</p>
<p>任何的<code>ViewController Container</code>对象都可以通过属性<code>viewControllers</code>访问子对象，而子对象也可以通过<code>navigationController</code>/<code>tabbarController</code>/<code>slipViewController</code>/<code>presentViewController</code>找到相应的<code>viewController Container</code>。</p>
<p><strong>- (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^)(void))completion；</strong></p>
<p>A present B，那么A就有责任dismiss B，如果在B中调用<strong>[self  dismissViewControllerAnimated…]</strong>就会A中发送dismiss，最终会由有A进行dismiss,相当于在B中执行<strong>[self.presentingViewController dismissViewControllerAnimated…]</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS的模态视图&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/iBotasky/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/iBotasky/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS的.h跟.m文件</title>
    <link href="https://github.com/iBotasky/2017/07/20/iOS%E7%9A%84-h%E8%B7%9F-m%E6%96%87%E4%BB%B6/"/>
    <id>https://github.com/iBotasky/2017/07/20/iOS的-h跟-m文件/</id>
    <published>2017-07-20T01:31:02.000Z</published>
    <updated>2017-08-27T09:19:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS开发中OC的.h文件跟.m文件</p>
<a id="more"></a>
<h2 id="1-文件"><a href="#1-文件" class="headerlink" title="1.文件"></a>1.文件</h2><h3 id="1-1-h文件"><a href="#1-1-h文件" class="headerlink" title="1.1.h文件"></a>1.1.h文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@interface ClassName&#123;</div><div class="line">    NSString* _value1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@property(nonatomic,assign)NSString* value1;</div><div class="line"></div><div class="line">-(void)func1;</div></pre></td></tr></table></figure>
<h3 id="1-2-m文件"><a href="#1-2-m文件" class="headerlink" title="1.2 .m文件"></a>1.2 .m文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@interface ClassName()&#123;</div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">@synthesize value1;</div><div class="line"></div><div class="line">@implementation ClassName</div><div class="line"></div><div class="line">-(void)func1&#123;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2. 问题"></a>2. 问题</h2><h3 id="2-1-为什么-h文件和-m文件里各有1个-interface-它们分别有什么用？"><a href="#2-1-为什么-h文件和-m文件里各有1个-interface-它们分别有什么用？" class="headerlink" title="2.1 为什么.h文件和.m文件里各有1个@interface?它们分别有什么用？"></a>2.1 为什么.h文件和.m文件里各有1个<code>@interface</code>?它们分别有什么用？</h3><p>.h里面的<code>@interface</code>，不消说，是典型的头文件，它是供其它Class调用的。它的<code>@property</code>和functions，都能够被其它Class“看到”。</p>
<p><strong><em>用我的话理解就是，如果写在了.h的<code>@interface</code>的属性和方法就是<code>public</code>可以被外面调用的。写在了.m的<code>@interface</code>里面就是<code>private</code>。</em></strong></p>
<p>因此，我们将对外开放的方法、变量放到.h文件中，而将不想要对外开放的变量放到.m文件中（.m文件的方法可以不声明，直接用）。</p>
<h3 id="2-2-h中，value1为什么要定义2遍？"><a href="#2-2-h中，value1为什么要定义2遍？" class="headerlink" title="2.2.h中，value1为什么要定义2遍？"></a>2.2.h中，value1为什么要定义2遍？</h3><p>当然，现在<code>@interface{}</code>里的定义也可以省略掉了，不过原理还是要搞清楚。</p>
<p>严格来说<code>@interface{}</code>里定义的变量，叫作instance variable，它是这个Class内部真正的全局变量。然而这个instance variable是不对外公开的，因此我们还需要一个对外公开的东西来调用，就是@property<br>@property是对外的，它其实是告诉大家，我这个Class里，有一个变量的set/get方法。比如，<code>@property NSString* string;</code> 就是说，本Class里有一个getString/setString供你们调用。</p>
<p>因此需要2次声明。当然现在lldb也升级了，只要你声明了<code>@property</code>，它就可以自动创建对应的全局变量。</p>
<h3 id="2-3-synthesize有什么用？"><a href="#2-3-synthesize有什么用？" class="headerlink" title="2.3@synthesize有什么用？"></a>2.3@synthesize有什么用？</h3><p><code>@property</code> 一个变量后，在<code>@implementation</code>里再<code>@synthesize</code>一下，相信是很多人的习惯。但是为什么要有这个@synthesize方法呢？</p>
<p><code>@property</code>是对外声明了Class的get/set方法，然后我们就需要在.m文件里手写get/set方法。这可就麻烦了，1个变量对应2个方法，假如一个Class里有10个变量，那岂不是要写20个方法？烦也烦死唠。</p>
<p>@synthesize帮我们解决了这个问题。<code>@synthesize</code>在.m文件里自动生成了get/set方法。因此，我们只要在<code>@implementation</code>后面加上一行：<code>@synthesize</code> 就可以自动生成get/set方法了，省掉了很多麻烦。比如<code>@synthesize value1 = _value1;</code>的意思就是，将instance variable _value1用作getValue1和setValue1方法里。</p>
<p>get/set方法有时候是比较复杂的，因为它和变量的属性相关，就是<code>@property(nonatomic, assign/retain(strong/weak))</code>这就和内存有关了。然而@synthesize为我们做了这些事情，就不要再为这些事情烦恼了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS开发中OC的.h文件跟.m文件&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/iBotasky/categories/iOS/"/>
    
      <category term="iOS基础" scheme="https://github.com/iBotasky/categories/iOS/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="iOS" scheme="https://github.com/iBotasky/tags/iOS/"/>
    
      <category term="iOS基础" scheme="https://github.com/iBotasky/tags/iOS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Lambda在Android中的使用</title>
    <link href="https://github.com/iBotasky/2017/07/06/Lambda%E5%9C%A8Android%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://github.com/iBotasky/2017/07/06/Lambda在Android中的使用/</id>
    <published>2017-07-06T06:41:59.000Z</published>
    <updated>2017-08-27T09:20:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Lambda语法在Android中的应用</p>
<a id="more"></a>
<h2 id="0-作用"><a href="#0-作用" class="headerlink" title="0.作用"></a>0.作用</h2><p>lambda是匿名函数的别名，用来简化匿名内部类，使用lambda的前提是编译器可以准确的推断出你需要哪个匿名内部类被简化。</p>
<h3 id="0-1-例子"><a href="#0-1-例子" class="headerlink" title="0.1 例子"></a>0.1 例子</h3><p>我们最常接触到的例子是view设置onClickListener:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">	<span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">		doSomeWork();</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用lambda：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">button.setOnClickListener( </div><div class="line">	(View v) -&gt; &#123;</div><div class="line">		doSomeWork();</div><div class="line">	&#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>lambda不仅把对象名隐匿（<code>View.OnClickLisetener</code>），更完成了方法名的隐匿(<code>onClick(View v)</code>)，展示了一个接口抽象方法最有价值的亮点：<strong>参数</strong>、<strong>实现方法</strong></p>
<h2 id="1-lambda表达式的形式"><a href="#1-lambda表达式的形式" class="headerlink" title="1.lambda表达式的形式"></a>1.lambda表达式的形式</h2><h3 id="1-1-函数式接口"><a href="#1-1-函数式接口" class="headerlink" title="1.1 函数式接口"></a>1.1 函数式接口</h3><p><strong>函数式接口是最基本的lambda表达式，其余的形式都是由其扩展而来</strong></p>
<p>函数式接口是指有且只有一个抽象方法的接口， 比如各种Listener和Runnable接口。lambda表达式就是对这类接口的匿名接口内部类进行简化，基本形式如下：</p>
<p><code>(参数列表 ... ) -&gt; { 语句块...}</code></p>
<p>面以 Java 提供的 Comparator 接口来展示一个实例，该接口常用于排序比较：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;<span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T var1, T var2)</span></span>;&#125;</div><div class="line">Comparator&lt;String&gt; comparator = <span class="keyword">new</span> Comparator&lt;String&gt; ()&#123;</div><div class="line">	<span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">		doSomeWork();</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">Comparator&lt;String&gt; comparator = (String s1, String s2) -&gt; &#123;</div><div class="line">	doSomeWork();</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>当编译器可以推到出具体的参数类型，可以忽略参数类型，简化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;String&gt; comparator = ( s1 , s2 ) -&gt; &#123;</div><div class="line">	doSomeWork();</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>当参数只有一个时， 参数列表可以去掉括号<code>()</code>, 简化:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>; &#125;</div><div class="line">OnClickListener listener = v -&gt; &#123; 语句块... &#125; ;</div></pre></td></tr></table></figure>
<p>但是，当没有参数传入的时候，参数列表的括号就要保留：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>; &#125;</div><div class="line">Runnable runnable = () -&gt; &#123; 语句块... &#125; ;</div></pre></td></tr></table></figure>
<p>当具体实现的处理逻辑只有一句的时候，也可以省略语句块的<code>{}</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">button.setOnClickListener( v -&gt; activity.finish() );</div></pre></td></tr></table></figure>
<p>当<strong>具体实现只有一句，并且是个return返回值的时候</strong>，这个表达式不用在表达式前面加<code>retrun</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Function</span> &lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123; <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>; &#125;</div><div class="line">Function &lt;User, String&gt; function = <span class="keyword">new</span> Function &lt;User, String&gt;()&#123;</div><div class="line">	<span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user.getName();</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//不能加return，因为只有一句表达式，并且是return一个值</span></div><div class="line">Function &lt;User, String&gt; function = user -&gt; user.getName() ;</div></pre></td></tr></table></figure>
<h2 id="1-2-方法引用"><a href="#1-2-方法引用" class="headerlink" title="1.2 方法引用"></a>1.2 方法引用</h2><p>当我们使用函数接口的lambda的时候，进行逻辑实现的时候，我们既可以自己实现一系列处理，也可以调用已存在的方法，下面以 Java 的 Predicate 接口作为示例，此接口用来实现判断功能，我们来对字符串进行全面的判空操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>; &#125;</div><div class="line">Predicate&lt;String&gt; predicate=</div><div class="line">	s -&gt; &#123;</div><div class="line">		<span class="comment">//用基本代码组合进行判断</span></div><div class="line">		<span class="keyword">return</span> s==<span class="keyword">null</span> || s.length()==<span class="number">0</span> ;</div><div class="line">	&#125;;</div></pre></td></tr></table></figure>
<p>我们知道，TextUtils.isEmpty()实现了上述功能，所以我们可以调用已存在的方法来进行逻辑判断：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Predicate&lt;String&gt; predicate = s -&gt; TextUtils.isEmpty(s);</div></pre></td></tr></table></figure>
<p>当我们调用已存在的方法来进行逻辑判断，可以简化使用lambda的方法引用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Predicate&lt;String&gt; predicate = TextUtils::isEmpty;</div></pre></td></tr></table></figure>
<p>方法引用就是：<strong>当逻辑实现只有一句，且调用了已存在的方法进行处理（静态方法，this,super的方法也包括在内）时，对函数接口形式的lambda的进一步简化</strong>。传入方法的参数就是原接口的参数。</p>
<p>接下来总结三种方法引用的形式：</p>
<ol>
<li><p>object::instanceMethod</p>
<p>直接调用任意对象的实例方法，如<code>obj::equals</code>  代表调用了obj这个对象的equals方法与接口方法参数比较是否相等，效果等同于<code>obj.equals(t)</code>。当前类的方法可以直接调用<code>this::method</code>,父类方法同理。</p>
</li>
<li><p>ClassName::staticMethod</p>
<p>直接调用某类的静态方法，并将接口方法参数传入，如上述<code>TextUtils::isEmpty</code> 等同于<code>TextUtils.isEmpty(s)</code>。</p>
</li>
</ol>
<ol>
<li><p>ClassName::instanceMethod</p>
<p>较为特殊，将接口方法参数列表的第一个参数作为方法调用者，其余参数作为方法参数。由于此类接口较少，故选择Java提供的BiFunctin接口作为示例，该接口接受一个T1类，T2类对象，并返回R对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BiFunction</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>, <span class="title">R</span>&gt; </span>&#123;</div><div class="line">	<span class="function">R <span class="title">apply</span><span class="params">(T1 t1, T2 t2)</span></span>;</div><div class="line">&#125;</div><div class="line">BiFunction&lt;String,String,Boolean&gt; biFunction=</div><div class="line">	<span class="keyword">new</span> BiFunction&lt;String, String, Boolean&gt;() &#123;</div><div class="line">		<span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Boolean <span class="title">apply</span><span class="params">(String s1, String s2)</span></span>&#123;</div><div class="line">	        <span class="keyword">return</span> s1.equals(s2);</div><div class="line">	    &#125;</div><div class="line">    &#125;;</div><div class="line"><span class="comment">// ClassName 为接口方法的第一个参数的类名，同时利用接口方法的第一个参数作为方法调用者，其余参数作为方法参数，实现 s1.equals(s2);</span></div><div class="line">BiFunction&lt;String,String,Boolean&gt; biFunction= String::equals;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="1-3-构造器引用"><a href="#1-3-构造器引用" class="headerlink" title="1.3 构造器引用"></a>1.3 构造器引用</h3><p>Lambda 表达式的第三种形式，其实和方法引用十分相似，只不过方法名替换为 new 。其格式为 <code>ClassName :: new</code>。这时编译器会通过上下文判断传入的参数的类型、顺序、数量等，来调用适合的构造器，返回对象。</p>
<h2 id="2-一点玄学"><a href="#2-一点玄学" class="headerlink" title="2. 一点玄学"></a>2. 一点玄学</h2><h3 id="2-1-this关键字"><a href="#2-1-this关键字" class="headerlink" title="2.1 this关键字"></a>2.1 this关键字</h3><p>在匿名内部类中，this 关键字指向的是匿名类本身的对象，而在 lambda 中，this 指向的是 lambda 表达式的外部类。</p>
<h3 id="2-2-方法数差异"><a href="#2-2-方法数差异" class="headerlink" title="2.2 方法数差异"></a>2.2 方法数差异</h3><p>前 Android Studio 对 Java 8 新特性编译时采用脱糖（desugar）处理，lambda 表达式经过编译器编译后，每一个 lambda 表达式都会增加 1~2 个方法数。而 Android 应用的方法数不能超过 65536 个。虽然一般应用较难触发，但仍需注意。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lambda语法在Android中的应用&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/iBotasky/categories/Android/"/>
    
      <category term="Lambda" scheme="https://github.com/iBotasky/categories/Android/Lambda/"/>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
      <category term="Lambda" scheme="https://github.com/iBotasky/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Android 蓝牙</title>
    <link href="https://github.com/iBotasky/2017/04/17/Android-%E8%93%9D%E7%89%99/"/>
    <id>https://github.com/iBotasky/2017/04/17/Android-蓝牙/</id>
    <published>2017-04-17T06:34:53.000Z</published>
    <updated>2017-08-27T09:14:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于Android下BLE(Bluetooth Low Energy)开发的一些积累<br><a id="more"></a></p>
<h2 id="1-创建BLE基本步骤"><a href="#1-创建BLE基本步骤" class="headerlink" title="1.创建BLE基本步骤"></a>1.创建BLE基本步骤</h2><h2 id="1-1获取BluethoothAdapter"><a href="#1-1获取BluethoothAdapter" class="headerlink" title="1.1获取BluethoothAdapter"></a>1.1获取BluethoothAdapter</h2><p>所有的蓝牙活动都需要蓝牙适配器。BluetoothAdapter代表设备本身的蓝牙适配器(蓝牙无线）。整个系统只有一个蓝牙适配器，而且你的app使用它与系统交互。下面的代码片段显示了如何得到适配器。注意该方法使用getSystemService（）返回BluetoothManager，然后将其用于获取适配器的一个实例。<strong>Android 4.3（API 18）引入BluetoothManager。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> BluetoothAdapter mBluetoothAdapter;</div><div class="line">...</div><div class="line"><span class="comment">// Initializes Bluetooth adapter.</span></div><div class="line"><span class="keyword">final</span> BluetoothManager bluetoothManager =</div><div class="line">        (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);</div><div class="line">mBluetoothAdapter = bluetoothManager.getAdapter();</div></pre></td></tr></table></figure>
<h2 id="1-2-开启蓝牙"><a href="#1-2-开启蓝牙" class="headerlink" title="1.2 开启蓝牙"></a>1.2 开启蓝牙</h2><p>接下来，你需要确认蓝牙是否开启。调用isEnabled())去检测蓝牙当前是否开启。如果该方法返回false,蓝牙被禁用。下面的代码检查蓝牙是否开启，如果没有开启，将显示错误提示用户去设置开启蓝牙。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 确保蓝牙在设备上可以开启</span></div><div class="line"><span class="keyword">if</span> (mBluetoothAdapter == <span class="keyword">null</span> || !mBluetoothAdapter.isEnabled()) &#123;</div><div class="line">   Intent enableBtIntent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</div><div class="line">   startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-3-发现设备"><a href="#1-3-发现设备" class="headerlink" title="1.3 发现设备"></a>1.3 发现设备</h2><p>为了发现BLE设备，使用startLeScan()方法。这个方法需要一个参数BluetoothAdapter.LeScanCallback。你必须实现它的回调函数，那就是返回的扫描结果。因为扫描非常消耗电量，你应当遵守以下准则：</p>
<p>只要找到所需的设备，停止扫描。<br>不要在循环里扫描，并且对扫描设置时间限制。以前可用的设备可能已经移出范围，继续扫描消耗电池电量。<br>下面代码显示了如何开始和停止一个扫描：</p>
<blockquote>
<p>JellyBean —API18及以上：直接用BlueAdapter.startLeScan(), 这里有个坑，传入的阐述UUID… serviceUUIDs传入这个参数搜索的BLEDevice都要满足这些UUIDS才能被搜到，这些UUID不是或关系，而是与关系。</p>
<p>Lollipop —API21及以上：用BluetoothAdapter获取到:BluetoothAdapter.getBluetoothLeScanner(),获取到一个BluetoothLeScanner对象，在用这个调用<code>startScan(List&lt;ScanFilter&gt; filter , ScanSetting setting, ScanCallback scancallbacn)</code>来查找设备。这里的fileter就是或关系了。可以把UUID转成ScanFilter。</p>
</blockquote>
<h2 id="1-4-连接到GATT服务端"><a href="#1-4-连接到GATT服务端" class="headerlink" title="1.4 连接到GATT服务端"></a>1.4 连接到GATT服务端</h2><p>与一个BLE设备交互的第一步就是连接它——更具体的，连接到BLE设备上的GATT服务端。为了连接到BLE设备上的GATT服务端，需要使用connectGatt( )方法。这个方法需要三个参数：一个Context对象，自动连接（boolean值,表示只要BLE设备可用是否自动连接到它），和BluetoothGattCallback调用。</p>
<p><code>mBluetoothGatt = device.connectGatt(this, false, mGattCallback);</code><br>连接到GATT服务端时，由BLE设备做主机，并返回一个BluetoothGatt实例，然后你可以使用这个实例来进行GATT客户端操作。请求方（Android app)是GATT客户端。BluetoothGattCallback用于传递结果给用户，例如连接状态，以及任何进一步GATT客户端操作。</p>
<h2 id="1-5-读取BLE变量"><a href="#1-5-读取BLE变量" class="headerlink" title="1.5 读取BLE变量"></a>1.5 读取BLE变量</h2><p>你的android app完成与GATT服务端连接和发现services后，就可以读写支持的属性。例如，这段代码通过服务端的services和 characteristics迭代，并且将它们显示在UI上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceControlActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// Demonstrates how to iterate through the supported GATT</span></div><div class="line">    <span class="comment">// Services/Characteristics.</span></div><div class="line">    <span class="comment">// In this sample, we populate the data structure that is bound to the</span></div><div class="line">    <span class="comment">// ExpandableListView on the UI.</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">displayGattServices</span><span class="params">(List&lt;BluetoothGattService&gt; gattServices)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (gattServices == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        String uuid = <span class="keyword">null</span>;</div><div class="line">        String unknownServiceString = getResources().</div><div class="line">                getString(R.string.unknown_service);</div><div class="line">        String unknownCharaString = getResources().</div><div class="line">                getString(R.string.unknown_characteristic);</div><div class="line">        ArrayList&lt;HashMap&lt;String, String&gt;&gt; gattServiceData =</div><div class="line">                <span class="keyword">new</span> ArrayList&lt;HashMap&lt;String, String&gt;&gt;();</div><div class="line">        ArrayList&lt;ArrayList&lt;HashMap&lt;String, String&gt;&gt;&gt; gattCharacteristicData</div><div class="line">                = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;HashMap&lt;String, String&gt;&gt;&gt;();</div><div class="line">        mGattCharacteristics =</div><div class="line">                <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;BluetoothGattCharacteristic&gt;&gt;();</div><div class="line"></div><div class="line">        <span class="comment">// Loops through available GATT Services.</span></div><div class="line">        <span class="keyword">for</span> (BluetoothGattService gattService : gattServices) &#123;</div><div class="line">            HashMap&lt;String, String&gt; currentServiceData =</div><div class="line">                    <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">            uuid = gattService.getUuid().toString();</div><div class="line">            currentServiceData.put(</div><div class="line">                    LIST_NAME, SampleGattAttributes.</div><div class="line">                            lookup(uuid, unknownServiceString));</div><div class="line">            currentServiceData.put(LIST_UUID, uuid);</div><div class="line">            gattServiceData.add(currentServiceData);</div><div class="line"></div><div class="line">            ArrayList&lt;HashMap&lt;String, String&gt;&gt; gattCharacteristicGroupData =</div><div class="line">                    <span class="keyword">new</span> ArrayList&lt;HashMap&lt;String, String&gt;&gt;();</div><div class="line">            List&lt;BluetoothGattCharacteristic&gt; gattCharacteristics =</div><div class="line">                    gattService.getCharacteristics();</div><div class="line">            ArrayList&lt;BluetoothGattCharacteristic&gt; charas =</div><div class="line">                    <span class="keyword">new</span> ArrayList&lt;BluetoothGattCharacteristic&gt;();</div><div class="line">           <span class="comment">// Loops through available Characteristics.</span></div><div class="line">            <span class="keyword">for</span> (BluetoothGattCharacteristic gattCharacteristic :</div><div class="line">                    gattCharacteristics) &#123;</div><div class="line">                charas.add(gattCharacteristic);</div><div class="line">                HashMap&lt;String, String&gt; currentCharaData =</div><div class="line">                        <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">                uuid = gattCharacteristic.getUuid().toString();</div><div class="line">                currentCharaData.put(</div><div class="line">                        LIST_NAME, SampleGattAttributes.lookup(uuid,</div><div class="line">                                unknownCharaString));</div><div class="line">                currentCharaData.put(LIST_UUID, uuid);</div><div class="line">                gattCharacteristicGroupData.add(currentCharaData);</div><div class="line">            &#125;</div><div class="line">            mGattCharacteristics.add(charas);</div><div class="line">            gattCharacteristicData.add(gattCharacteristicGroupData);</div><div class="line">         &#125;</div><div class="line">    ...</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-6开启通知"><a href="#1-6开启通知" class="headerlink" title="1.6开启通知"></a>1.6开启通知</h2><p>当设备上的特性改变时会通知BLE应用程序。这段代码显示了如何使用setCharacteristicNotification( )给一个特性设置通知。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> BluetoothGatt mBluetoothGatt;</div><div class="line">BluetoothGattCharacteristic characteristic;</div><div class="line"><span class="keyword">boolean</span> enabled;</div><div class="line">...</div><div class="line">mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);</div><div class="line">...</div><div class="line">BluetoothGattDescriptor descriptor = characteristic.getDescriptor(</div><div class="line">        UUID.fromString(SampleGattAttributes.CLIENT_CHARACTERISTIC_CONFIG));</div><div class="line">descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);</div><div class="line">mBluetoothGatt.writeDescriptor(descriptor);</div></pre></td></tr></table></figure>
<h2 id="1-7关闭App客户端"><a href="#1-7关闭App客户端" class="headerlink" title="1.7关闭App客户端"></a>1.7关闭App客户端</h2><p>当你的app完成BLE设备的使用后，应该调用close( ))，系统可以合理释放占用资源。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mBluetoothGatt == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    mBluetoothGatt.close();</div><div class="line">    mBluetoothGatt = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Android下BLE(Bluetooth Low Energy)开发的一些积累&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/iBotasky/categories/Android/"/>
    
      <category term="BLE" scheme="https://github.com/iBotasky/categories/Android/BLE/"/>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
      <category term="BLE" scheme="https://github.com/iBotasky/tags/BLE/"/>
    
  </entry>
  
  <entry>
    <title>Android权限之shareUserId</title>
    <link href="https://github.com/iBotasky/2017/04/07/Android%E6%9D%83%E9%99%90%E4%B9%8BshareUserId/"/>
    <id>https://github.com/iBotasky/2017/04/07/Android权限之shareUserId/</id>
    <published>2017-04-07T02:27:33.000Z</published>
    <updated>2017-08-27T09:16:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中看到过shareUserId，了解了这个配置特性</p>
<a id="more"></a>
<h2 id="1-关于shareUserId"><a href="#1-关于shareUserId" class="headerlink" title="1.关于shareUserId"></a>1.关于shareUserId</h2><p>每一个APK在安装到设备上的时候，设备都会为其分配一个单独的空间，mainfest中的userid就是对应一个Linux用户都会被分配到一个属于自己的统一的Linux用户ID，并且为他创建一个沙箱，以防止影响其他程序。用户ID在应用程序安装到设备中时被分配。</p>
<p>通过在AndroidMainfest.xml设置<code>android:shareUserId</code>可以让拥有同一个Userid的多个应用运行在统一进程，或者不同进程。<strong>多个相同UserId的应用可以互相随意访问数据。</strong></p>
<h2 id="2-共享UID步骤"><a href="#2-共享UID步骤" class="headerlink" title="2.共享UID步骤"></a>2.共享UID步骤</h2><blockquote>
<p>1.在AndroidMainfest.xml设置相同的<code>android:shareUserId</code></p>
<p>2.在Android.mk中增加LOCAL_CERTIFICATE的定义。</p>
</blockquote>
<p>如果增加了上面的属性但没有定义与之对应的LOCAL_CERTIFICATE的话，APK是安装不上去的。提示错误是：Package com.test.MyTest has no signatures that match those in shared user android.uid.system; ignoring!也就是说，仅有相同签名和相同sharedUserID标签的两个应用程序签名都会被分配相同的用户ID。例如所有和media/download相关的APK都使用android.media作为sharedUserId的话，那么它们必须有相同的签名media。</p>
<blockquote>
<p>3.把apk的源码放到package/apps/目录下，用mm进行编译</p>
</blockquote>
<h2 id="3-使用shareUserId-”android-uid-system“的好处"><a href="#3-使用shareUserId-”android-uid-system“的好处" class="headerlink" title="3.使用shareUserId=”android.uid.system“的好处"></a>3.使用shareUserId=”android.uid.system“的好处</h2><p>提升app的优先级，内存不足少被杀</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中看到过shareUserId，了解了这个配置特性&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/iBotasky/categories/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android消息机制</title>
    <link href="https://github.com/iBotasky/2017/04/06/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    <id>https://github.com/iBotasky/2017/04/06/Android消息机制/</id>
    <published>2017-04-06T01:55:13.000Z</published>
    <updated>2017-08-27T09:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于Android消息机制的源码分析</p>
<a id="more"></a>
<h2 id="1-应用程序入口分析"><a href="#1-应用程序入口分析" class="headerlink" title="1.应用程序入口分析"></a>1.应用程序入口分析</h2><p>应用程序入口是在<code>ActivityThread</code>类里<code>main</code>方法，（当应用启动后，底层通过C/C++调用main方法）。</p>
<p>核心代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Environment.initForCurrentUser();</div><div class="line">        EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</div><div class="line">        Looper.prepareMainLooper();</div><div class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">        thread.attach(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">            sMainThreadHandler = thread.getHandler();</div><div class="line">        &#125;</div><div class="line">        Looper.loop();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>1.1 初始化了Environment对象，然后创建了Lopper，然后开始消息循环。如果程序没有死循环，执行完main函数就会立马退出。之所以App可以一直运行是因为<code>Looper.loop()</code>是一个死循环。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里用<code>for(;;)</code>而不是<code>while(true)</code>是为了防止一些人通过黑科技修改这个标志位（通过反射机制）（这里不是很懂）！</p>
<p><strong>在非主线程里面我们也可以创建一个Handler，但是需要我们主动去为当前的子线程绑定一个Looper，并且启动消息循环</strong></p>
<p>Looper有两个核心方法：prepare()与loop()。通过Looper、Handle、Message、MessageQueue等组成了Android的消息处理机制。</p>
<h2 id="2-为什么需要这样一个消息机制"><a href="#2-为什么需要这样一个消息机制" class="headerlink" title="2.为什么需要这样一个消息机制"></a>2.为什么需要这样一个消息机制</h2><h2 id="2-1-不阻塞主线程"><a href="#2-1-不阻塞主线程" class="headerlink" title="2.1 不阻塞主线程"></a>2.1 不阻塞主线程</h2><p>Android应用启动时，会创主线程， 负责与UI组件（widget，view）进行交互， 比如控制UI界面显示，更新等。这种单线程模型导致运行性大大降低，只能处理简单、短暂的操作。过重的任务比如下载访问数据库等都会导致ANR。<strong>Android大部分耗时操作都应该放到子线程，不要在主线程做操作</strong></p>
<h2 id="2-2-并发程序的有序性"><a href="#2-2-并发程序的有序性" class="headerlink" title="2.2 并发程序的有序性"></a>2.2 并发程序的有序性</h2><p>单线程模型的UI主线程也是不安全的，会造成不可确定的结果。</p>
<blockquote>
<p>线程不安全简单理解为：多线程访问资源时，有可能出现多个线程先后更改数据造成数据不一致。比如，A工作线程（也称为子线程）访问某个公共UI资源，B工作线程在某个时候也访问了该公共资源，当B线程正访问时，公共资源的属性已经被A改变了，这样B得到的结果不是所需要的的，造成了数据不一致的混乱情况。</p>
<p>线程安全简单理解为：当一个线程访问功能资源时，对该资源进程了保护，比如加了锁机制，当前线程在没有访问结束释放锁之前，其他线程只能等待直到释放锁才能访问，这样的线程就是安全的。</p>
</blockquote>
<p> <strong>Android只允许主线程更新UI界面，子线程处理后的结果无法和主线程交互，即无法直接访问主线程，这就要用到Handler机制来解决此问题。基于Handler机制，在子线程先获得Handler对象，该对象将数据发送到主线程消息队列，主线程通过Loop循环获取消息交给Handler处理。</strong></p>
<p>有了消息机制，我们可以发送消息，然后Looper把消息发给主线程，然后就可以执行了。</p>
<p>消息包括：</p>
<blockquote>
<p>我们自己的操作消息，即客户端的Handler</p>
<p>操作系统的操作消息，系统的Handler，例如来电话跳出界面，就需要。</p>
</blockquote>
<p>先分析系统的Handler，再去深入理解消息机制里面各个组件</p>
<h2 id="3-系统的Handler"><a href="#3-系统的Handler" class="headerlink" title="3.系统的Handler"></a>3.系统的Handler</h2><p>ActivityThread的成员变量有这样一个H（继承自Handler），这个就是系统的Handler。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> H mH = <span class="keyword">new</span> H();</div></pre></td></tr></table></figure>
<p>回顾一下ActivityThread的初始化，在main方法中<code>ActivityThread thread = new ActivityThread();</code>在new的时候就已经完成了初始化成员变量，单例饿加载。</p>
<p>在H中定义了大量的常量，然后用case做操作。</p>
<p>从系统的Handler中，在handlerMessage我们可以看到四大组件的生命周期操作，创建，销毁，切换等。跨进程通信及Application进程的销毁。</p>
<p>比如说我们有一个 应用程序A 通过 Binder 去跨进程启动另外一个 应用程序B 的 Service（或者同一个应用程序中不同进程的Service），如图：AMS是四大组件的生命周期的一个比较重要的类，IPC机制会涉及</p>
<p><img src="https://ooo.0o0.ooo/2017/04/06/58e5affdc7e6c.png" alt="58e5affdc7e6c.png"></p>
<p>最后AMS接收到消息后，发送消息到MessageQueue里面，最后由系统的Handler处理启动Service的操作：</p>
<p><img src="https://ooo.0o0.ooo/2017/04/06/58e5b282509cd.png" alt="58e5b282509cd.png"></p>
<p>在handlerCreateService()里通过反射的方式去newInstance(),并且毁掉了Service的Oncreate方法。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/06/58e5b2de61799.png" alt="58e5b2de61799.png"></p>
<p>又例如我们可以通过发SUICIDE消息可以自杀，这样来退出应用程序。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> SUICIDE:</div><div class="line">    Process.killProcess(Process.myPid());</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p><strong>应用程序退出</strong></p>
<p>实际上我们要退出应用程序的话，就是让主线程结束，换句话说就是要让 Looper 的循环结束。这里是直接结束 Looper 循环，因此我们四大组件的生命周期方法可能就不会执行了，因为四大组件的生命周期方法就是通过 Handler 去处理的，Looper 循环都没有了，四大组件还玩毛线！因此我们平常写程序的时候就要注意了，onDestroy 方法是不一定能够回调的。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/06/58e5b38e7a18e.png" alt="58e5b38e7a18e.png"></p>
<p>这里实际上是调用了 MessageQueue 的 quit，清空所有 Message。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</div><div class="line">    mQueue.quit(<span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-消息机制的分析"><a href="#4-消息机制的分析" class="headerlink" title="4.消息机制的分析"></a>4.消息机制的分析</h2><h3 id="4-1-消息对象Message的分析"><a href="#4-1-消息对象Message的分析" class="headerlink" title="4.1 消息对象Message的分析"></a>4.1 消息对象Message的分析</h3><p>提到消息机制，在MessageQueue里面存在的就是我们Message对象。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/06/58e5b4e08f7e6.png" alt="58e5b4e08f7e6.png"></p>
<p>Message 里面有一些我们常见的参数，arg1 arg2 obj callback when 等等。这里要提一下的就是这个 target 对象，这个对象就是发送这个消息的 Handler对象，最终这条消息也是通过这个 Handler 去处理掉的。</p>
<h3 id="4-2-消息的循环过程分析"><a href="#4-2-消息的循环过程分析" class="headerlink" title="4.2 消息的循环过程分析"></a>4.2 消息的循环过程分析</h3><p>1.拿到Looper()对象（me），如果当前线程没有Looper，那么就抛出异常。这就是为什么在子线程里面创建Handler如果不手动创建启动Looper会报错的原因。</p>
<p>2.拿到Looper的成员变量MessageQueue,在MessageQueue里面不断地去区消息，关于MessageQueue的next用法如下：</p>
<p>这里可以看到消息的取出用到了一些native方法，这样做是为了获得更高的效率，消息的去取出并不是直接就从队列的头部取出的，而是根据了消息的when时间参数有关的，因为我们可以发送延时消息、也可以发送一个指定时间点的消息。因此这个函数有点复杂，我们点到为止即可。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/06/58e5ba6c7b791.png" alt="58e5ba6c7b791.png"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/06/58e5baf15d1d6.png" alt="58e5baf15d1d6.png"></p>
<p><strong>3、</strong>继续分析 loop方法：如果已经没有消息了，那么就可以退出循环，那么整个应用程序就退出了。什么情况下会发生呢？还记得我们分析应用退出吗？</p>
<p>在 系统Handler 收到 EXIT_APPLICATION 消息的时候，就会调用 Looper 的 quit方法：</p>
<p><img src="https://ooo.0o0.ooo/2017/04/06/58e5bacc9d2ee.png" alt="58e5bacc9d2ee.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Android消息机制的源码分析&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://github.com/iBotasky/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android进阶" scheme="https://github.com/iBotasky/tags/Android%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>RxJava遇到的问题整理</title>
    <link href="https://github.com/iBotasky/2017/03/07/RxJava%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>https://github.com/iBotasky/2017/03/07/RxJava遇到的问题整理/</id>
    <published>2017-03-07T07:27:37.000Z</published>
    <updated>2017-08-27T09:21:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>编程中遇到的RxJava的错<br><a id="more"></a></p>
<h2 id="1-Subject与toList-操作符"><a href="#1-Subject与toList-操作符" class="headerlink" title="1.Subject与toList()操作符"></a>1.Subject与toList()操作符</h2><p>一个项目钟一个页面用<code>PublistEvent</code>发送消息（消息的内容是一个CalendarDay日期值），通知另一个页面，另一个页面在去数据库取数据，原来的代码是这样，但是打过log后，<code>toList()</code>后面的数据都没出来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">PublishEvent.SELECTION_DATE</div><div class="line">                .flatMap(calendarDay -&gt;  mPresenter.getHistoriesByDay(year, month, day)</div><div class="line">                .flatMap(histories -&gt; Observable.from(histories)</div><div class="line">                .map(history -&gt; <span class="keyword">new</span> MineTrainDayItem(history))</div><div class="line">                .toList()        </div><div class="line">                .compose(bindToLifecycle())</div><div class="line">                .compose(SchedulersCompat.applyComputationSchedulers())</div><div class="line">                .subscribe(mineTrainDayItems -&gt; &#123;</div><div class="line">                    removeRangeItem(<span class="number">0</span>, getItemCount());</div><div class="line">                    addItem(mineTrainDayItems);</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<p>Goole一下，找到这个<a href="https://github.com/ReactiveX/RxJava/issues/3716">PublishSubject</a>, 大意是，使用<code>PublishSubject</code>后调用<code>toList()操作符</code> 要用<code>onCompelete</code>才能走入其他输出。即<code>onList()</code>操作符是要在<code>Observable.onComplete</code> 之后才能走，不然会一直卡住。</p>
<p>修改成下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ublishEvent.SELECTION_DATE</div><div class="line">                .flatMap(calendarDay -&gt; mPresenter.getHistoriesByDay(year, month, day)</div><div class="line">                        .flatMap(histories -&gt; Observable.from(histories))</div><div class="line">                        .map(history -&gt; <span class="keyword">new</span> MineTrainDayItem(history))</div><div class="line">                        .toList())<span class="comment">//放在内层做聚合</span></div><div class="line">                .compose(bindToLifecycle())</div><div class="line">                .compose(SchedulersCompat.applyComputationSchedulers())</div><div class="line">                .subscribe(mineTrainDayItems -&gt; &#123;</div><div class="line">                    removeRangeItem(<span class="number">0</span>, getItemCount());</div><div class="line">                    addItem(mineTrainDayItems);</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<p>把<code>toList()</code>放在最内层的Observable里面去做数据聚合，最外层就不用等待<code>onComplete()</code>.这样就不会再外层的<code>PublishSubject</code>的Observable卡住。</p>
<hr>
<h2 id="2-Transform-与compose-操作符"><a href="#2-Transform-与compose-操作符" class="headerlink" title="2.Transform 与compose()操作符"></a>2.Transform 与<code>compose()</code>操作符</h2><p>看到Megear项目中很多代码都用到了<code>compose()</code>操作符，研究了一下<code>compose()</code>操作符的用法。</p>
<p>就目前来说compose主要是用来对一个Observable做整个变换，例如一个网络请求的过程，请求及数据处理都应该放在一个新线程中，而展示数据，要放到<code>MainThread</code>中，一般而言就平常做法就是<code>subscribeOn()</code>和<code>observeOn()</code>,但是如果考虑到这样的请求有很多个，就要考虑到复用问题，不能每次都对每一个<code>Observable</code>对象都做一次<code>subscribeOn()</code>和<code>observeOn()</code>操作，这样就不符合一个规范。</p>
<h3 id="2-1Transform"><a href="#2-1Transform" class="headerlink" title="2.1Transform"></a>2.1Transform</h3><p><code>Transformer</code>实际上就是一个<code>Func1&lt;Observable&lt;T&gt;, Observable&lt;R&gt;&gt;</code>，换言之就是：可以通过它将一种类型的<code>Observable</code>转换成另一种类型的<code>Observable</code>，和调用一系列的内联操作符是一模一样的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一般模式 </span></div><div class="line">&lt;T&gt; <span class="function">Transformer&lt;T, T&gt; <span class="title">applySchedulers</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> Transformer&lt;T, T&gt;() &#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Observable&lt;T&gt; observable)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> observable.subscribeOn(Schedulers.io())</div><div class="line">         .observeOn(AndroidSchedulers.mainThread());</div><div class="line">   &#125;</div><div class="line"> &#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">//lambda模式</span></div><div class="line">&lt;T&gt; <span class="function">Transformer&lt;T, T&gt; <span class="title">applySchedulers</span><span class="params">()</span> </span>&#123;  </div><div class="line"><span class="keyword">return</span> observable -&gt; observable.subscribeOn(Schedulers.io())</div><div class="line">    .observeOn(AndroidSchedulers.mainThread());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与<code>compose()</code>操作符一起用，就可以做到切换线程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable.from(someSource)</div><div class="line">    .map(<span class="keyword">new</span> Func1&lt;Data, Data&gt;() &#123;</div><div class="line">       <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Data <span class="title">call</span><span class="params">(Data data)</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> manipulate(data);</div><div class="line">       &#125;</div><div class="line">    &#125;)</div><div class="line">    .compose(<span class="keyword">this</span>.&lt;YourType&gt;applySchedulers())</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Data&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Data data)</span> </span>&#123;</div><div class="line">        doSomething(data);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="2-2重用Transform"><a href="#2-2重用Transform" class="headerlink" title="2.2重用Transform"></a>2.2重用Transform</h3><p>上面代码每次都会<code>new</code>一个Transform，依然做不到重用，你可以创建一个实例化版本，节省不必要的实例化对象。毕竟，Transformers关乎着代码重用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> Observable.Transformer schedulersTransformer = <span class="keyword">new</span>  Observable.Transformer() &#123;</div><div class="line"> <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">(Object observable)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> ((Observable)  observable).subscribeOn(Schedulers.newThread())</div><div class="line">       .observeOn(AndroidSchedulers.mainThread());</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"> &lt;T&gt; Observable.<span class="function">Transformer&lt;T, T&gt; <span class="title">applySchedulers</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="keyword">return</span> (Observable.Transformer&lt;T, T&gt;) schedulersTransformer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编程中遇到的RxJava的错&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/iBotasky/categories/Android/"/>
    
      <category term="RxJava" scheme="https://github.com/iBotasky/categories/Android/RxJava/"/>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
      <category term="RxJava" scheme="https://github.com/iBotasky/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>关于集成ShareSDK</title>
    <link href="https://github.com/iBotasky/2017/02/24/%E5%85%B3%E4%BA%8E%E9%9B%86%E6%88%90ShareSDK/"/>
    <id>https://github.com/iBotasky/2017/02/24/关于集成ShareSDK/</id>
    <published>2017-02-24T07:09:19.000Z</published>
    <updated>2017-08-27T09:21:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理项目中集成ShareSDK遇到的问题</p>
<a id="more"></a>
<h3 id="1-微信"><a href="#1-微信" class="headerlink" title="1.微信"></a>1.微信</h3><h3 id="1-1官方提供一个wxapi的包，要放在主项目包的下面"><a href="#1-1官方提供一个wxapi的包，要放在主项目包的下面" class="headerlink" title="1.1官方提供一个wxapi的包，要放在主项目包的下面"></a>1.1官方提供一个wxapi的包，要放在主项目包的下面</h3><p>起初为了分离ShareSDK，新建一个ShareSDK的Module，把ShareSDK的东西都放到里面去，包括官方提供的一个wxapi的包，但是这个包要放在主项目下面的包名底下。</p>
<p><img src="http://oktzkaa8p.bkt.clouddn.com/20170224148792056653655.png" alt="20170224148792056653655.png"></p>
<p>包括微信回调的Activity也要写在主项目的<code>AndroidManifest.xml</code>下面</p>
<h2 id="2-微博"><a href="#2-微博" class="headerlink" title="2.微博"></a>2.微博</h2><p>微博的调用客户端认证需要注意的是新浪微博客户端授权是需要用户在开发者平台（网址：<a href="http://open.weibo.com）**申请的应用用过了新浪的审核**。而且要**通过keystore进行签名打包测试**。注意打包所用的**keystore上的md5签名、项目的包名要与新浪开发者平台上填写的签名与包名一致**" target="_blank" rel="external">http://open.weibo.com）**申请的应用用过了新浪的审核**。而且要**通过keystore进行签名打包测试**。注意打包所用的**keystore上的md5签名、项目的包名要与新浪开发者平台上填写的签名与包名一致**</a></p>
<h2 id="3-关于API"><a href="#3-关于API" class="headerlink" title="3.关于API"></a>3.关于API</h2><p>ShareSDK的调用客户端认证有个坑的地方</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用SSO授权，通过客户单授权</span></div><div class="line">plat.SSOSetting(<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<p>false才是调用客户端认证</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理项目中集成ShareSDK遇到的问题&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/iBotasky/categories/Android/"/>
    
      <category term="Social" scheme="https://github.com/iBotasky/categories/Android/Social/"/>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Modeule</title>
    <link href="https://github.com/iBotasky/2017/02/23/Android-Modeule/"/>
    <id>https://github.com/iBotasky/2017/02/23/Android-Modeule/</id>
    <published>2017-02-23T02:05:40.000Z</published>
    <updated>2017-02-24T07:09:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>对Android开发的Module的整理</p>
<a id="more"></a>
<h2 id="1-关于Module-模块"><a href="#1-关于Module-模块" class="headerlink" title="1.关于Module 模块"></a>1.关于Module 模块</h2><p><em>模块</em>是源文件和构建设置的集合，允许您将项目分成不同的功能单元。您的项目可以包含一个或多个模块，并且一个模块可以将其他模块用作依赖项。每个模块都可以独立构建、测试和调试。</p>
<p>如果在自己的项目中创建代码库或者希望为不同的设备类型（例如电话和穿戴式设备）创建不同的代码和资源组，但保留相同项目内的所有文件并共享某些代码，那么增加模块数量将非常有用。</p>
<p>您可以点击 <strong>File &gt; New &gt; New Module</strong>，向您的项目中添加新模块。</p>
<p>Android Studio 提供了几种不同类型的模块：</p>
<h3 id="1-1-Android-应用模块"><a href="#1-1-Android-应用模块" class="headerlink" title="1.1 Android 应用模块"></a>1.1 Android 应用模块</h3><p>为应用的源代码、资源文件和应用级设置（例如模块级构建文件和 Android 清单文件）提供容器。在您创建新项目时，默认的模块名称将是<code>app</code>。在 <strong>Create New Module</strong> 窗口中，Android Studio 提供了以下应用模块：</p>
<blockquote>
<ul>
<li>Phone &amp; Table Module</li>
<li>Android Wear Module</li>
<li>Android TV Module </li>
<li>Glass Module</li>
</ul>
</blockquote>
<p>每种模块都提供了基础文件和代码模板，适合对应的应用或者设备。</p>
<h3 id="1-2-库模块"><a href="#1-2-库模块" class="headerlink" title="1.2 库模块"></a>1.2 库模块</h3><p><strong>接触过得SDK开发都是用这种模式然后打成jar/aar给别人调用</strong></p>
<p>为您的可重用代码提供容器，您可以将其用作其他应用模块的依赖项或者导入到其他项目中。库模块在结构上与应用模块相同，但在构建时，它将创建一个代码归档文件而不是 APK，因此无法安装到设备上。在 <strong>Create New Module</strong> 窗口中，Android Studio 提供了以下库模块：</p>
<blockquote>
<ul>
<li>Android库：这种类型的库可以包含Android项目中支持的所有文件类型，包括源代码、资源文件跟清单文件。构建结果是一个Android归档(AAR)文件，可以作为Android应用的依赖</li>
<li>Java 库：此类型的库只能包含 Java 源文件。构建结果是一个 Java 归档 (JAR) 文件，您可以将其作为 Andriod 应用模块或其他 Java 项目的依赖项添加。</li>
</ul>
</blockquote>
<h3 id="1-3-Google-Cloud-模块"><a href="#1-3-Google-Cloud-模块" class="headerlink" title="1.3 Google Cloud 模块"></a>1.3 <strong>Google Cloud 模块</strong></h3><p>为您的 Google Cloud 后端代码提供容器。此模块可以为使用简单 HTTP、Cloud Endpoints 和云消息传递连接到您的应用的 Java App 引擎后端添加所需的代码和依赖项。您可以开发您的后端，提供应用所需的云服务。利用 Android Studio 创建和开发您的 Google Cloud 模块，您可以在同一个项目中管理应用代码和后端代码。您也可以在本地运行和测试后端代码，并使用 Android Studio 部署 Google Cloud 模块。</p>
<h3 id="1-4-依赖模块"><a href="#1-4-依赖模块" class="headerlink" title="1.4 依赖模块"></a>1.4 依赖模块</h3><p>一些人也将模块称为子项目，完全没有问题，因为 Gradle 也将模块称为项目。例如，在创建库模块并且希望以依赖项的形式将其添加到您的 Android 应用模块时，您必须按如下所示进行声明：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  compile project(':my-library-module')</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-5-项目结构"><a href="#1-5-项目结构" class="headerlink" title="1.5 项目结构"></a>1.5 项目结构</h3><p>新做的项目在考虑到ShareSDK封装的太死，出了BUG不好改，并且ShareSDK内置的文件太多，导致文件过于臃肿，单单QQ/Weibo/Wechat/Facebook/Google/Twitter文件功能就已经有1MB，但是确实ShareSDK的国内外都有，所以在考虑后面能替换的原则，所以用了<code>Module</code>单独封装了SHARESDK的登录功能，后期分享功能也放在这边。新建Module的时候也会有坑，比如Module的包名有可能不会是项目的包名。</p>
<p><img src="http://oktzkaa8p.bkt.clouddn.com/20170223148783152840905.png" alt="某项目实例"> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对Android开发的Module的整理&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio插件</title>
    <link href="https://github.com/iBotasky/2017/02/13/Android-Studio%E6%8F%92%E4%BB%B6/"/>
    <id>https://github.com/iBotasky/2017/02/13/Android-Studio插件/</id>
    <published>2017-02-13T01:14:00.000Z</published>
    <updated>2017-08-27T09:14:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于Android Studio上比较好用的插件整理</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>插件</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.Android ButterKnife Zelezny</td>
<td>ButterKnife快速生成View对象</td>
</tr>
<tr>
<td>1.GsonFormat</td>
<td>Json字符串转成JAVA Bean</td>
</tr>
<tr>
<td>2.Android Parcelable code generator</td>
<td>JavaBean序列化，快速实现Parcelable接口。</td>
</tr>
<tr>
<td>3.Translation</td>
<td>翻译插件</td>
</tr>
<tr>
<td>4.Android Code Generator</td>
<td>根据布局文件快速生成对应的Activity，Fragment，Adapter，Menu</td>
</tr>
<tr>
<td>5.Lifecycle Sorter</td>
<td>Activity/Fragment生命周期排序快捷键Ctrl + alt + K</td>
</tr>
<tr>
<td>6.JsonOnlineViewer</td>
<td>在Android Studio中请求、调试接口</td>
</tr>
</tbody>
</table>
<p><a href="http://www.jianshu.com/p/c76b0d8a642d" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Android Studio上比较好用的插件整理&lt;/p&gt;
    
    </summary>
    
      <category term="Andrioid" scheme="https://github.com/iBotasky/categories/Andrioid/"/>
    
      <category term="Android Studio" scheme="https://github.com/iBotasky/categories/Andrioid/Android-Studio/"/>
    
    
      <category term="Andrioid" scheme="https://github.com/iBotasky/tags/Andrioid/"/>
    
      <category term="Android Studio" scheme="https://github.com/iBotasky/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>WebView遇到的用法</title>
    <link href="https://github.com/iBotasky/2017/02/12/WebView%E9%81%87%E5%88%B0%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://github.com/iBotasky/2017/02/12/WebView遇到的用法/</id>
    <published>2017-02-12T09:19:46.000Z</published>
    <updated>2017-08-27T09:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里总结一些项目中遇到的WebView的一些用法:)</p>
<a id="more"></a>
<hr>
<h2 id="1-CyberBlack项目中遇到的"><a href="#1-CyberBlack项目中遇到的" class="headerlink" title="1.CyberBlack项目中遇到的"></a>1.CyberBlack项目中遇到的</h2><h3 id="1-1描述：CyberBlack是自己利用空闲时间做的App，里面调用了知乎的API，关于知乎API请看这篇文章：知乎日报API分析-。"><a href="#1-1描述：CyberBlack是自己利用空闲时间做的App，里面调用了知乎的API，关于知乎API请看这篇文章：知乎日报API分析-。" class="headerlink" title="1.1描述：CyberBlack是自己利用空闲时间做的App，里面调用了知乎的API，关于知乎API请看这篇文章：知乎日报API分析 。"></a>1.1描述：CyberBlack是自己利用空闲时间做的App，里面调用了知乎的API，关于知乎API请看这篇文章：<a href="https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90">知乎日报API分析</a> 。</h3><p>项目里面用了<code>http://news-at.zhihu.com/api/4/news/3892357</code>这个接口，里面是拿到了html内容的<code>css</code>文件跟<code>body</code>，然后App端要用WebView做显示。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="http://oktzkaa8p.bkt.clouddn.com/20170212148689169013360.png" alt="20170212148689169013360.png"></h3><p>对如何显示内容有一点迷惑。</p>
<h3 id="1-2-解决：在网上查看资料找到这篇-知乎日报四-（http-krelve-com-android-127-html）看了一下，用了博主的方法，顺利显示内容："><a href="#1-2-解决：在网上查看资料找到这篇-知乎日报四-（http-krelve-com-android-127-html）看了一下，用了博主的方法，顺利显示内容：" class="headerlink" title="1.2 解决：在网上查看资料找到这篇[知乎日报四]（http://krelve.com/android/127.html）看了一下，用了博主的方法，顺利显示内容："></a>1.2 解决：在网上查看资料找到这篇[知乎日报四]（<a href="http://krelve.com/android/127.html）看了一下，用了博主的方法，顺利显示内容：" target="_blank" rel="external">http://krelve.com/android/127.html）看了一下，用了博主的方法，顺利显示内容：</a></h3><p>做法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</div><div class="line">        HttpHelper httpHelper = <span class="keyword">new</span> HttpHelper();</div><div class="line">        httpHelper.setEnd_points(Urls.ZHI_HU_HOST);</div><div class="line">        httpHelper.getService(ZhiHuDailyApi.class)</div><div class="line">                .getNewsDetail(id)</div><div class="line">                .subscribeOn(Schedulers.newThread())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(dailyDetailResponse -&gt; &#123;</div><div class="line">                    loadView(dailyDetailResponse);</div><div class="line">                &#125;, throwable -&gt; &#123;</div><div class="line"></div><div class="line">                &#125;, () -&gt; &#123;</div><div class="line"></div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line">	<span class="comment">//这边是拿到了css路径跟html的body，然后用拼接起来放到html中，最后用webview显示。很简单。</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadView</span><span class="params">(DailyDetailResponse dailyDetailResponse)</span> </span>&#123;</div><div class="line">        wvContent.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">        String css = <span class="string">"&lt;link rel=\"stylesheet\" href=\""</span> + dailyDetailResponse.getCss().get(<span class="number">0</span>) + <span class="string">"\" type=\"text/css\"&gt;"</span>;</div><div class="line">        String html = <span class="string">"&lt;html&gt;&lt;head&gt;"</span> + css + <span class="string">"&lt;/head&gt;&lt;body&gt;"</span> + dailyDetailResponse.getBody() + <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>;</div><div class="line">        html = html.replace(<span class="string">"&lt;div class=\"img-place-holder\"&gt;"</span>, <span class="string">""</span>);</div><div class="line">        wvContent.loadDataWithBaseURL(<span class="string">"x-data://base"</span>, html, <span class="string">"text/html"</span>, <span class="string">"UTF-8"</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最后用了这个方法调试几次后成功让webview显示出来正确的格式内容。</p>
<hr>
<h2 id="2-Podoon项目的WebView"><a href="#2-Podoon项目的WebView" class="headerlink" title="2.Podoon项目的WebView"></a>2.Podoon项目的WebView</h2><h3 id="2-1描述"><a href="#2-1描述" class="headerlink" title="2.1描述"></a>2.1描述</h3><p>选鞋详细界面需要展示鞋子的详细信息，这个界面是用WebView展示的。但是里面包含了一些<code>js</code>的方法。</p>
<h3 id="2-2用法"><a href="#2-2用法" class="headerlink" title="2.2用法"></a>2.2用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">mWebView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">        mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onPageStarted(view, url, favicon);</div><div class="line">                ShoeRecordActivity.<span class="keyword">this</span>.showDialog(<span class="keyword">null</span>, <span class="string">"载入中,请稍后..."</span>);</div><div class="line">                logger.info(<span class="string">"onPageStarted() called with: "</span> + <span class="string">"view = ["</span> + view + <span class="string">"], url = ["</span> + url + <span class="string">"], favicon = ["</span> + favicon + <span class="string">"]"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">              <span class="comment">//这里放javaScript代码，webview加载</span></div><div class="line">                String javaScript = <span class="string">"javascript:function annotationData()&#123;"</span> +</div><div class="line">                        <span class="string">"var x=document.getElementById(\"accomTotalDistance\"); x.innerHTML="</span> + <span class="string">"'"</span> + dis + <span class="string">"km"</span> + <span class="string">"'"</span> + <span class="string">";"</span> +</div><div class="line">                        <span class="string">"var y=document.getElementById(\"accomPace\"); y.innerHTML="</span> + <span class="string">"'"</span> + pace2 + <span class="string">"'"</span> + <span class="string">";"</span> +</div><div class="line">                        <span class="string">"var z=document.getElementById(\"accomRecordAccount\"); z.innerHTML="</span> + <span class="string">"'"</span> + record + <span class="string">"'"</span> + <span class="string">";"</span> +</div><div class="line">                        <span class="string">"var a=document.getElementById(\"processDiv\"); a.style.width="</span> + <span class="string">"'"</span> + progress + <span class="string">"%"</span> + <span class="string">"'"</span> + <span class="string">";"</span> +</div><div class="line">                        <span class="string">"&#125;"</span>;</div><div class="line">                logger.error(<span class="string">"onPageFinished() returned: "</span> + javaScript);</div><div class="line">                mWebView.loadUrl(javaScript);</div><div class="line">                mWebView.loadUrl(<span class="string">"javascript:annotationData()"</span>);</div><div class="line">                <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">                <span class="keyword">if</span> (dialog.isShowing() &amp;&amp; dialog != <span class="keyword">null</span>) &#123;</div><div class="line">                    dialog.cancel();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedHttpAuthRequest</span><span class="params">(WebView view, HttpAuthHandler handler, String host, String realm)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onReceivedHttpAuthRequest(view, handler, host, realm);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        mWebView.loadUrl(mURL);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里总结一些项目中遇到的WebView的一些用法:)&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/iBotasky/categories/Android/"/>
    
      <category term="AndroidView" scheme="https://github.com/iBotasky/categories/Android/AndroidView/"/>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
      <category term="AndroidView" scheme="https://github.com/iBotasky/tags/AndroidView/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS 显示/隐藏文件夹</title>
    <link href="https://github.com/iBotasky/2017/02/06/Mac-OS-%E6%98%BE%E7%A4%BA-%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>https://github.com/iBotasky/2017/02/06/Mac-OS-显示-隐藏文件夹/</id>
    <published>2017-02-06T03:56:19.000Z</published>
    <updated>2017-08-27T09:20:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac显示/隐藏文件夹<br><a id="more"></a></p>
<p>显示隐藏文件：<br><code>defaults write com.apple.finder AppleShowAllFiles -bool TRUE ; killall Finder</code><br>停止显示隐藏文件：<br><code>defaults write com.apple.finder AppleShowAllFiles -bool FALSE ; killall Finder</code></p>
<p>隐藏一个文件夹：<br><code>chflags hidden 文件绝对路径/ 相对路径</code><br>取消隐藏一个文件夹：<br><code>chflags nohidden 文件绝对路径/ 相对路径</code></p>
<p>注：重启Finder的方法：<br>按住option+command，dock上右键-&gt;“Relanch”/“重新开启”。</p>
<p><a href="http://www.howtogeek.com/211496/how-to-hide-files-and-view-hidden-files-on-mac-os-x/" target="_blank" rel="external">参考网址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac显示/隐藏文件夹&lt;br&gt;
    
    </summary>
    
      <category term="Mac" scheme="https://github.com/iBotasky/categories/Mac/"/>
    
    
      <category term="Mac" scheme="https://github.com/iBotasky/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Android进程优先级</title>
    <link href="https://github.com/iBotasky/2017/02/04/Android%E8%BF%9B%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://github.com/iBotasky/2017/02/04/Android进程优先级/</id>
    <published>2017-02-04T06:40:37.000Z</published>
    <updated>2017-08-27T09:17:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>进程优先级介绍<br><a id="more"></a><br>查看命令当前进程优先级：adb shell cat /proc/<strong><em>process_id</em></strong>/oom_adj</p>
<p><a href="http://blog.csdn.net/wangliang198901/article/details/12342845" target="_blank" rel="external">文章地址</a><br>一个进程可以做一个前台的ForegroundService做通知栏，或<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进程优先级介绍&lt;br&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://github.com/iBotasky/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android进阶" scheme="https://github.com/iBotasky/tags/Android%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android保活</title>
    <link href="https://github.com/iBotasky/2017/02/04/Android%E4%BF%9D%E6%B4%BB/"/>
    <id>https://github.com/iBotasky/2017/02/04/Android保活/</id>
    <published>2017-02-04T06:38:22.000Z</published>
    <updated>2017-08-27T09:15:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>平常接触到的保活<br><a id="more"></a><br>自启动保活 系统通知权限<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyNotificationService</span> <span class="keyword">extends</span> <span class="title">NotificationListenerService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String TAG = MyNotificationService.class.getName();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationPosted</span><span class="params">(StatusBarNotification sbn)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"onNotificationPosted: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationRemoved</span><span class="params">(StatusBarNotification sbn)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"onNotificationRemoved: "</span>);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, BackgroundService.class);</div><div class="line">        startService(intent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跳转<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goNLPermission</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           Intent intent = <span class="keyword">new</span> Intent(<span class="string">"android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS"</span>);</div><div class="line">           context.startActivity(intent);</div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   </div><div class="line">   <span class="comment">/**</span></div><div class="line">        * Notification keep live</div><div class="line">        */</div><div class="line">       goNLPermission(<span class="keyword">this</span>);</div><div class="line">       Intent notificationService = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyNotificationService.class);</div><div class="line">       startService(notificationService);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平常接触到的保活&lt;br&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://github.com/iBotasky/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android进阶" scheme="https://github.com/iBotasky/tags/Android%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android动画相关</title>
    <link href="https://github.com/iBotasky/2017/02/04/Android%E5%8A%A8%E7%94%BB%E7%9B%B8%E5%85%B3/"/>
    <id>https://github.com/iBotasky/2017/02/04/Android动画相关/</id>
    <published>2017-02-04T06:37:15.000Z</published>
    <updated>2017-08-27T09:16:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>平常用到的一些比较机智的动画</p>
<a id="more"></a>
<h2 id="1-ViewCompat"><a href="#1-ViewCompat" class="headerlink" title="1.ViewCompat"></a>1.ViewCompat</h2><p>ServiceApp里面看到一个二维码扫描/条形码输入的一个界面，两个界面放在一个Activity里面，切换二维码扫描跟条形码输入的时候会有一个过渡动画，</p>
<h3 id="1-1先设置要做过渡动画的View"><a href="#1-1先设置要做过渡动画的View" class="headerlink" title="1.1先设置要做过渡动画的View"></a>1.1先设置要做过渡动画的View</h3><p><code>ViewCompat.setAlpha(rlBlur, 0);</code></p>
<h3 id="1-2-在该显示的时候-设置VISIBLE，（默认应该是GONE）"><a href="#1-2-在该显示的时候-设置VISIBLE，（默认应该是GONE）" class="headerlink" title="1.2 在该显示的时候, 设置VISIBLE，（默认应该是GONE）"></a>1.2 在该显示的时候, 设置VISIBLE，（默认应该是GONE）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rlBlur.setVisibility(View.VISIBLE);</div><div class="line">rlBlur.setBackground(<span class="keyword">new</span> BitmapDrawable(<span class="keyword">null</span>, blurBg));</div><div class="line">ViewCompat.animate(rlBlur).alpha(<span class="number">1</span>).setDuration(<span class="number">400</span>).start();</div></pre></td></tr></table></figure>
<h3 id="1-3-在不显示的时候是指GONE和透明度"><a href="#1-3-在不显示的时候是指GONE和透明度" class="headerlink" title="1.3 在不显示的时候是指GONE和透明度"></a>1.3 在不显示的时候是指GONE和透明度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rlBlur.setVisibility(View.GONE);</div><div class="line">ViewCompat.setAlpha(rlBlur, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<h3 id="1-4-也可以设置一些监听操作"><a href="#1-4-也可以设置一些监听操作" class="headerlink" title="1.4 也可以设置一些监听操作"></a>1.4 也可以设置一些监听操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.tv_qr_scan:</div><div class="line">                <span class="keyword">if</span> (!tvQrScan.isSelected()) &#123;</div><div class="line">                    tvCodeInput.setSelected(<span class="keyword">false</span>);</div><div class="line">                    tvQrScan.setSelected(<span class="keyword">true</span>);</div><div class="line">                    ViewCompat.animate(llInput).alpha(<span class="number">0</span>).setDuration(<span class="number">400</span>).setListener(<span class="keyword">new</span> ViewPropertyAnimatorListener() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                            llInput.setVisibility(View.GONE);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">                        &#125;</div><div class="line">                    &#125;).start();</div><div class="line"></div><div class="line"></div><div class="line">                    mQRCodeView.startSpot();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.tv_code_input:</div><div class="line">                <span class="keyword">if</span> (!tvCodeInput.isSelected()) &#123;</div><div class="line">                    tvQrScan.setSelected(<span class="keyword">false</span>);</div><div class="line">                    tvCodeInput.setSelected(<span class="keyword">true</span>);</div><div class="line">                    ViewCompat.animate(llInput).alpha(<span class="number">1</span>).setDuration(<span class="number">400</span>).setListener(<span class="keyword">new</span> ViewPropertyAnimatorListener() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                            llInput.setVisibility(View.VISIBLE);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">                        &#125;</div><div class="line">                    &#125;).start();</div><div class="line"></div><div class="line">                    mQRCodeView.stopSpot();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>感觉用起来还不错，有需要可以用这个，在两个VIEW切换的时候用，显得切换不会那么生硬。</p>
<hr>
<h2 id="2-Activity启动退出动画"><a href="#2-Activity启动退出动画" class="headerlink" title="2.Activity启动退出动画"></a>2.Activity启动退出动画</h2><h3 id="2-1-首先在res-anim文件夹下创建进入和退出动画的set"><a href="#2-1-首先在res-anim文件夹下创建进入和退出动画的set" class="headerlink" title="2.1.首先在res/anim文件夹下创建进入和退出动画的set"></a>2.1.首先在<code>res/anim</code>文件夹下创建进入和退出动画的<code>set</code></h3><p>这里以底部上滑出现和从顶部下滑退出为例：<br><code>activity_open.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt; </div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">translate</span> </span></div><div class="line">    <span class="attr">android:fromYDelta</span>=<span class="string">"100%p"</span> </div><div class="line">    <span class="attr">android:toYDelta</span>=<span class="string">"0"</span> </div><div class="line">    <span class="attr">android:duration</span>=<span class="string">"1500"</span> </div><div class="line">  /&gt; </div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">```xml</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  </div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;  </div><div class="line">   &lt;translate  </div><div class="line">    android:fromYDelta=&quot;25&quot;  </div><div class="line">    android:toYDelta=&quot;100%p&quot;  </div><div class="line">    android:duration=&quot;1500&quot;  </div><div class="line">   /&gt;  </div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<h3 id="2-2-设置启动动画："><a href="#2-2-设置启动动画：" class="headerlink" title="2.2.设置启动动画："></a>2.2.设置启动动画：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(); </div><div class="line">intent.setClassName(cxt,<span class="string">"com.test.mrn.android.route.RouteDemoActivity"</span>);<span class="comment">//打开一个activity </span></div><div class="line">startActivity(intent); </div><div class="line">overridePendingTransition(R.anim.activity_open,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h3 id="2-3-设置关闭动画"><a href="#2-3-设置关闭动画" class="headerlink" title="2.3.设置关闭动画"></a>2.3.设置关闭动画</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">button.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        finish();</div><div class="line">        overridePendingTransition(<span class="number">0</span>, R.anim.activity_close);</div><div class="line">      &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<h2 id="3-使用style的方式定义Activity的切换动画"><a href="#3-使用style的方式定义Activity的切换动画" class="headerlink" title="3.使用style的方式定义Activity的切换动画"></a>3.使用style的方式定义Activity的切换动画</h2><h3 id="3-1-定义Application的style"><a href="#3-1-定义Application的style" class="headerlink" title="3.1 定义Application的style"></a>3.1 定义Application的style</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:allowbackup</span>=<span class="string">"true"</span> <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span> </span></div><div class="line"><span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> </div><div class="line"><span class="attr">android:supportsrtl</span>=<span class="string">"true"</span> </div><div class="line"><span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-2-定义具体的AppTheme样式"><a href="#3-2-定义具体的AppTheme样式" class="headerlink" title="3.2 定义具体的AppTheme样式"></a>3.2 定义具体的AppTheme样式</h3><p>其中这里的windowAnimationStyle就是我们定义的Actvity切换动画的style。而<code>@anim/slide_in_top</code>就是我们定义的动画文件。也就是说通过切换Application的style，然后为windowAnimationStyle设置动画文件就可以全局的为Activity跳转配置动画效果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> &lt;&lt;!-- Base application theme. --&gt;</div><div class="line">    &lt;style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar"&gt;</div><div class="line">        &lt;!-- Customize your theme here. --&gt;</div><div class="line">        &lt;item name="colorPrimary"&gt;@color/colorPrimary&lt;/item&gt;</div><div class="line">        &lt;item name="colorPrimaryDark"&gt;@color/colorPrimaryDark&lt;/item&gt;</div><div class="line">        &lt;item name="colorAccent"&gt;@color/colorAccent&lt;/item&gt;</div><div class="line">        &lt;item name="android:windowAnimationStyle"&gt;@style/activityAnim&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;!-- 使用style方式定义activity切换动画 --&gt;</div><div class="line">    &lt;style name="activityAnim"&gt;</div><div class="line">        &lt;item name="android:activityOpenEnterAnimation"&gt;@anim/slide_in_top&lt;/item&gt;</div><div class="line">        &lt;item name="android:activityOpenExitAnimation"&gt;@anim/slide_in_top&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>在windowAnimationStyle存在四中动画：</p>
<blockquote>
<ul>
<li>activityOpenEnterAnimation</li>
<li>activityOpenExitAnimation </li>
<li>activityCloseEnterAnimation</li>
<li>activityCloseExitAnimation   </li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平常用到的一些比较机智的动画&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/iBotasky/categories/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统架构</title>
    <link href="https://github.com/iBotasky/2017/02/04/Android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <id>https://github.com/iBotasky/2017/02/04/Android系统架构/</id>
    <published>2017-02-04T06:34:45.000Z</published>
    <updated>2017-08-27T09:17:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android系统架构</p>
<p><a id="more"></a>##Android框架分层自顶向下</p>
<blockquote>
<p><em>应用程序层                       (Applications)
</em>应用程序框架                     (Application Frameworks)<br><em>系统运行库与Android运行环境      (Library&amp;Runtime)
</em>Linux内核                        (Linux Kernel)</p>
</blockquote>
<hr>
<h2 id="Android结构示意图"><a href="#Android结构示意图" class="headerlink" title="Android结构示意图"></a>Android结构示意图</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://oktzkaa8p.bkt.clouddn.com/201702071873018203746-970e2cbe223e4c1c9ca129e7a2feb6c6.jpg" alt="Android结构示意图"></h2><h2 id="1-应用程序层-Applications"><a href="#1-应用程序层-Applications" class="headerlink" title="1.应用程序层(Applications)"></a>1.应用程序层(Applications)</h2><p>Android装配一个核心应用程序集合，包括电子邮件客户端、SMS程序、日历、地图、浏览器、联系人和其他设置。所有应用程序都是用Java编程语言写的。更加丰富的应用程序有待我们去开发！</p>
<h2 id="2-Application-Framework"><a href="#2-Application-Framework" class="headerlink" title="2.Application Framework"></a>2.Application Framework</h2><p>通过提供开放的开发平台，Android使开发者能够编制极其丰富和新颖的应用程序。开发者可以自由地利用设备硬件优势、访问位置信息、运行后台服务、设置闹钟、向状态栏添加通知等等，很多很多。</p>
<p>开发者可以完全使用核心应用程序所使用的框架APIs。应用程序的体系结构旨在简化组件的重用，任何应用程序都能发布他的功能且任何其他应用程序可以使用这些功能（需要服从框架执行的安全限制）。这一机制允许用户替换组件。</p>
<p>所有的应用程序其实是一组服务和系统，包括：</p>
<blockquote>
<p>*视图（View）——丰富的、可扩展的视图集合，可用于构建一个应用程序。包括包括列表、网格、文本框、按钮，甚至是内嵌的网页浏览器</p>
<ul>
<li>内容提供者（Content Providers）——使应用程序能访问其他应用程序（如通讯录）的数据，或共享自己的数据<br><em>资源管理器（Resource Manager）——提供访问非代码资源，如本地化字符串、图形和布局文件
</em>通知管理器（Notification Manager）——使所有的应用程序能够在状态栏显示自定义警告<br>*活动管理器（Activity Manager）——管理应用程序生命周期,提供通用的导航回退功能</li>
</ul>
</blockquote>
<h2 id="3-Library"><a href="#3-Library" class="headerlink" title="3.Library"></a>3.Library</h2><p>Android包含一个C/C++库的集合，供Android系统的各个组件使用。这些功能通过Android的应用程序框架（application framework）暴露给开发者。下面列出一些核心库：</p>
<blockquote>
<p><em>系统C库——标准C系统库（libc）的BSD衍生，调整为基于嵌入式Linux设备
</em>媒体库——基于PacketVideo的OpenCORE。这些库支持播放和录制许多流行的音频和视频格式，以及静态图像文件，包括MPEG4、 H.264、 MP3、 AAC、 AMR、JPG、 PNG<br><em>界面管理——管理访问显示子系统和无缝组合多个应用程序的二维和三维图形层
</em>LibWebCore——新式的Web浏览器引擎,驱动Android 浏览器和内嵌的web视图<br><em>SGL——基本的2D图形引擎
</em>3D库——基于OpenGL ES 1.0 APIs的实现。库使用硬件3D加速或包含高度优化的3D软件光栅<br><em>FreeType ——位图和矢量字体渲染
</em>SQLite ——所有应用程序都可以使用的强大而轻量级的关系数据库引擎</p>
</blockquote>
<h2 id="4-Runtime"><a href="#4-Runtime" class="headerlink" title="4.Runtime"></a>4.Runtime</h2><p>Android包含一个核心库的集合，提供大部分在Java编程语言核心类库中可用的功能。每一个Android应用程序是Dalvik虚拟机中的实例，运行在他们自己的进程中。Dalvik虚拟机设计成，在一个设备可以高效地运行多个虚拟机。Dalvik虚拟机可执行文件格式是.dex，dex格式是专为Dalvik设计的一种压缩格式，适合内存和处理器速度有限的系统。</p>
<p>大多数虚拟机包括JVM都是基于栈的，而Dalvik虚拟机则是基于寄存器的。两种架构各有优劣，一般而言，基于栈的机器需要更多指令，而基于寄存器的机器指令更大。dx 是一套工具，可以將 Java .class 转换成 .dex 格式。一个dex文件通常会有多个.class。由于dex有時必须进行最佳化，会使文件大小增加1-4倍，以ODEX结尾。</p>
<p>Dalvik虚拟机依赖于Linux 内核提供基本功能，如线程和底层内存管理。</p>
<h2 id="5-Linux-Kernel"><a href="#5-Linux-Kernel" class="headerlink" title="5.Linux Kernel"></a>5.Linux Kernel</h2><p>Android基于Linux 2.6提供核心系统服务，例如：安全、内存管理、进程管理、网络堆栈、驱动模型。Linux Kernel也作为硬件和软件之间的抽象层，它隐藏具体硬件细节而为上层提供统一的服务。</p>
<p>如果你学过计算机网络知道OSI/RM，就会知道分层的好处就是使用下层提供的服务而为上层提供统一的服务，屏蔽本层及以下层的差异，当本层及以下层发生了变化不会影响到上层。也就是说各层各司其职，各层提供固定的SAP（Service Access Point），专业点可以说是高内聚、低耦合。</p>
<p>如果你只是做应用开发，就不需要深入了解Linux Kernel层。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android系统架构&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Android面试" scheme="https://github.com/iBotasky/categories/Android%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Android" scheme="https://github.com/iBotasky/categories/Android%E9%9D%A2%E8%AF%95/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
      <category term="Android面试" scheme="https://github.com/iBotasky/tags/Android%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Activity/Service的生命周期</title>
    <link href="https://github.com/iBotasky/2017/02/04/Activity-Service%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://github.com/iBotasky/2017/02/04/Activity-Service的生命周期/</id>
    <published>2017-02-04T06:33:13.000Z</published>
    <updated>2017-08-27T09:12:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android Activity/Service 生命周期介绍<br><a id="more"></a></p>
<h2 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h2><h3 id="1-Activity生命周期图"><a href="#1-Activity生命周期图" class="headerlink" title="1.Activity生命周期图"></a>1.Activity生命周期图</h3><p><img src="http://stormzhang.com/image/activity_lifecycle.png" alt="生命周期"></p>
<h3 id="2-Activity生命周期相关方法"><a href="#2-Activity生命周期相关方法" class="headerlink" title="2.Activity生命周期相关方法"></a>2.Activity生命周期相关方法</h3><p>Activity继承了ApplicationContext，可以重写方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span> </span>&#123; </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>;  </div><div class="line">       </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>;     </div><div class="line">         </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span></span>;  </div><div class="line">         </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>;  </div><div class="line">         </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span></span>;  </div><div class="line">         </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span></span>;  </div><div class="line">         </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>;  </div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>通过重写，存为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.tutor.activitydemo;  </div><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityDemo</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">     </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ActivityDemo"</span>;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.main);  </div><div class="line">          </div><div class="line">        Log.e(TAG, <span class="string">"start onCreate~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onStart();  </div><div class="line">        Log.e(TAG, <span class="string">"start onStart~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onRestart();  </div><div class="line">        Log.e(TAG, <span class="string">"start onRestart~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onResume();  </div><div class="line">        Log.e(TAG, <span class="string">"start onResume~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onPause();  </div><div class="line">        Log.e(TAG, <span class="string">"start onPause~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onStop();  </div><div class="line">        Log.e(TAG, <span class="string">"start onStop~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        Log.e(TAG, <span class="string">"start onDestroy~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-相关操作的的生命周期流程"><a href="#3-相关操作的的生命周期流程" class="headerlink" title="3.相关操作的的生命周期流程"></a>3.相关操作的的生命周期流程</h3><h4 id="3-1-启动Activity"><a href="#3-1-启动Activity" class="headerlink" title="3.1 启动Activity"></a>3.1 启动Activity</h4><p><img src="http://hi.csdn.net/attachment/201007/28/0_1280324212Y5nt.gif" alt="启动"><br>onCreate()-&gt;onStart()-&gt;onResume</p>
<h4 id="3-2-按BACK键："><a href="#3-2-按BACK键：" class="headerlink" title="3.2 按BACK键："></a>3.2 按BACK键：</h4><p><img src="http://hi.csdn.net/attachment/201007/28/0_1280324618Bqxb.gif" alt="按返回键"><br>onPause()-&gt;onStop()-&gt;onDestory()</p>
<h4 id="3-3-按HOME键"><a href="#3-3-按HOME键" class="headerlink" title="3.3 按HOME键:"></a>3.3 按HOME键:</h4><p><img src="http://hi.csdn.net/attachment/201007/28/0_1280325044k0c7.gif" alt="按Home键"><br>onPause()-&gt;onStop()</p>
<h4 id="3-4-从3-3操作后，从桌面进入ActivityDemo"><a href="#3-4-从3-3操作后，从桌面进入ActivityDemo" class="headerlink" title="3.4 从3.3操作后，从桌面进入ActivityDemo:"></a>3.4 从3.3操作后，从桌面进入ActivityDemo:</h4><p>onRestart()-&gt;onStart()-&gt;onResume()</p>
<h3 id="4-关于其他"><a href="#4-关于其他" class="headerlink" title="4.关于其他"></a>4.关于其他</h3><p>如果用户将当前的App切换为其他App，就可能会导致当前App被杀掉。所以在某些比较重要的Activity中需要做好保存数据的操作。避免Activity被系统回收，再次进入时是非正确的状态。<strong><em>这里需要关注Activity另外两个比较重要的方法，onSaveInstanceState()与onRestoreInstanceState();</em></strong> <a href="http://www.cnblogs.com/hanyonglu/archive/2012/03/28/2420515.html" target="_blank" rel="external">相关链接</a></p>
<hr>
<h2 id="Service的生命周期"><a href="#Service的生命周期" class="headerlink" title="Service的生命周期"></a>Service的生命周期</h2><h3 id="1-Service的概念及用途"><a href="#1-Service的概念及用途" class="headerlink" title="1.Service的概念及用途"></a>1.Service的概念及用途</h3><p>Service与Activity不同，他是不能与用户交互的，不能自己启动的，运行在后台的程序，如果我们退出应用时，Service进程并没有结束，仍在后台运行。</p>
<h3 id="2-Service的生命周期"><a href="#2-Service的生命周期" class="headerlink" title="2.Service的生命周期"></a>2.Service的生命周期</h3><p>生命周期图：<br><img src="http://img.blog.csdn.net/20141021233945682?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHV1dHU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="Service生命周期"></p>
<h4 id="2-1使用context-startService-启动Service"><a href="#2-1使用context-startService-启动Service" class="headerlink" title="2.1使用context.startService() 启动Service"></a>2.1使用context.startService() 启动Service</h4><p>其生命周期为context.startService() -&gt;onCreate()- &gt;onStart()-&gt;onStartCommand()-&gt;Service running–&gt;(如果调用context.stopService() )-&gt;onDestroy() -&gt;Service shut down</p>
<blockquote>
<p><em>如果Service还没有运行，则android先调用onCreate()然后调用onStart()；
</em>如果Service已经运行，则只调用onStart()，所以一个Service的onStart方法可能会重复调用多次。 </p>
</blockquote>
<p><strong><em>onStartCommand()可以接收在前台startService传入的Intent参数。</em></strong></p>
<p>调用stopService的时候直接onDestroy，如果是调用者自己直接退出而没有调用stopService的话，Service会一直在后台运行。<br>该Service的调用者再启动起来后可以通过stopService关闭Service。</p>
<p><strong><em>所以调用startService的生命周期为：onCreate –&gt; onStart(可多次调用) –&gt; onDestroy</em></strong></p>
<h4 id="2-2对于bindService-启动Service会经历："><a href="#2-2对于bindService-启动Service会经历：" class="headerlink" title="2.2对于bindService()启动Service会经历："></a>2.2对于bindService()启动Service会经历：</h4><p>context.bindService()-&gt;onCreate()-&gt;onBind()-&gt;Service running–&gt;onUnbind() -&gt; onDestroy() -&gt;Service stop</p>
<p>onBind将返回给客户端一个IBind接口实例，IBind允许客户端回调服务的方法，比如得到Service运行的状态或其他操作。<br>这个时候把调用者（Context，例如Activity）会和Service绑定在一起，Context退出了，<br>Srevice就会调用onUnbind-&gt;onDestroy相应退出。 </p>
<p><strong><em>所以调用bindService的生命周期为：onCreate –&gt; onBind(只一次，不可多次绑定) –&gt; onUnbind –&gt; onDestory。<br>一但销毁activity它就结束，如果按home把它放到后台，那他就不退出。</em></strong></p>
<p>PS：<br>在Service每一次的开启关闭过程中，只有onStart可被多次调用(通过多次startService调用)，其他onCreate，onBind，onUnbind，onDestory在一个生命周期中只能被调用一次。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Activity/Service 生命周期介绍&lt;br&gt;
    
    </summary>
    
      <category term="Android面试" scheme="https://github.com/iBotasky/categories/Android%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Android" scheme="https://github.com/iBotasky/categories/Android%E9%9D%A2%E8%AF%95/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
      <category term="Android面试" scheme="https://github.com/iBotasky/tags/Android%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android常见的内存泄漏</title>
    <link href="https://github.com/iBotasky/2017/02/04/Android%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    <id>https://github.com/iBotasky/2017/02/04/Android常见的内存泄漏/</id>
    <published>2017-02-04T06:31:30.000Z</published>
    <updated>2017-08-27T09:16:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/xitu/gold-miner/blob/master/TODO/Eight-Ways-Your-Android-App-Can-Leak-Memory.md">原文地址</a></p>
<a id="more"></a>
<hr>
<h2 id="1-单例造成的内存泄漏"><a href="#1-单例造成的内存泄漏" class="headerlink" title="1.单例造成的内存泄漏"></a>1.单例造成的内存泄漏</h2><p>单例的静态特性使得单例的生命周期和应用的生命周期一样长，如果一个对象已经不需要使用了，而单例对该对象还持有对象的引用，那么这个对象不能被正常回收，导致内存泄露！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppManager instance;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AppManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> AppManager(context);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>这是一个普通的单例模式，当创建这个单例的时候需要传入一个Context，所以Context的生命周期的长短至关重要：<br>1.传入的是Application的Context：不会有问题！<br>2.传入的是Activity的Context：当Activity退出时，由于该Context和Activity的生命周期一样长，（Activity间接继承于Context），所以当Activity退出时，他的内存并不会被回收，因为单例对象持有改Activity的引用。</p>
<h3 id="正确做法："><a href="#正确做法：" class="headerlink" title="正确做法："></a>正确做法：</h3><p>所以单例正确引用Context应该改为下面的方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppManager instance;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AppManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="comment">//直接拿取Application的Context</span></div><div class="line">        <span class="keyword">this</span>.context = context.getApplicationContext();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> AppManager(context);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="2-非静态内部类创建实例造成的内存泄漏"><a href="#2-非静态内部类创建实例造成的内存泄漏" class="headerlink" title="2.非静态内部类创建实例造成的内存泄漏"></a>2.非静态内部类创建实例造成的内存泄漏</h2><p><strong><em>匿名内部类跟非静态内部类持会持有外部类的强引用</em></strong></p>
<p>有的时候我们可能会在启动频繁的Activity中，为了避免重复创建相同的数据资源，可能会出现下面的写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TestResource mResource = <span class="keyword">null</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="keyword">if</span>(mManager == <span class="keyword">null</span>)&#123;</div><div class="line">            mManager = <span class="keyword">new</span> TestResource();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestResource</span> </span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h3><p>上面的代码在Activity内部创建了一个非静态内部类（TestResource.class）的单例(mResource)，每次启动Activity时都会使用该单例的数据，这样虽然避免了资源的重复创建，不过这种写法却会造成内存泄漏，<strong><em>因为非静态内部类默认会持有外部类的引用</em></strong>，而又使用了该非静态内部类创建了一个静态实例，该实例的生命周期和应用的一样长，这就导致了该静态实例一直会持有该Activity的引用，导致Activity不能正常回收。</p>
<p>###正确的做法为：<br>将该内部类设为静态内部类或将该内部类抽取出来封装成一个单例，如果需要使用Context,请使用ApplicationContext。</p>
<hr>
<h2 id="3-Handler造成的内存泄漏"><a href="#3-Handler造成的内存泄漏" class="headerlink" title="3.Handler造成的内存泄漏"></a>3.Handler造成的内存泄漏</h2><p>Handler的使用造成的内存泄漏问题应该说是最为常见了，平时在处理网络任务等都应该会借助Handler来处理，对于Handler的使用代码编写不规范有可能造成泄漏：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        loadData();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//...request</span></div><div class="line">        Message message = Message.obtain();</div><div class="line">        mHandler.sendMessage(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="分析：-2"><a href="#分析：-2" class="headerlink" title="分析："></a>分析：</h3><p>这种创建Handler的方式会造成内存泄漏，<strong><em>由于mHandler是Handler的非静态匿名内部类的实例，所以他持有外部类Activity的引用</em></strong>，我们知道消息队列是在一个Looper线程中不断轮询处理消息，那么当这个Activity退出时消息队列中海油未处理或者正在处理的消息， 而消息队列中的Message持有mHandler实例的引用， mHandler又持有Activity的引用， 所以导致该Activity的内存无法及时回收， 引发内存泄漏，所以另外一种做法为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MyHandler mHandler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">private</span> TextView mTextView ;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> WeakReference&lt;Context&gt; reference;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            reference = <span class="keyword">new</span> WeakReference&lt;&gt;(context);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            MainActivity activity = (MainActivity) reference.get();</div><div class="line">            <span class="keyword">if</span>(activity != <span class="keyword">null</span>)&#123;</div><div class="line">                activity.mTextView.setText(<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mTextView = (TextView)findViewById(R.id.textview);</div><div class="line">        loadData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//...request</span></div><div class="line">        Message message = Message.obtain();</div><div class="line">        mHandler.sendMessage(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个静态的Handler内部类，然后对Handler持有的对象使用弱引用，这样在回收时也可以回收Handler持有的对象，这样虽然避免了Activity的泄漏，不过Looper线程的消息队列中还是可能会有待处理的消息，所以我们Activity的Destory时或者OnStop应该移除消息队列中的消息。</p>
<h3 id="正确的做法："><a href="#正确的做法：" class="headerlink" title="正确的做法："></a>正确的做法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MyHandler mHandler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">private</span> TextView mTextView ;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> WeakReference&lt;Context&gt; reference;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            reference = <span class="keyword">new</span> WeakReference&lt;&gt;(context);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            MainActivity activity = (MainActivity) reference.get();</div><div class="line">            <span class="keyword">if</span>(activity != <span class="keyword">null</span>)&#123;</div><div class="line">                activity.mTextView.setText(<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mTextView = (TextView)findViewById(R.id.textview);</div><div class="line">        loadData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//...request</span></div><div class="line">        Message message = Message.obtain();</div><div class="line">        mHandler.sendMessage(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        mHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用mHandler.removeCallbacksAndMessages(null);移除消息队列中所有消息和所有Runnable,当然也可以使用mHandler.removeCallbacks()或mHandler.removeMessages();来一出指定的Runnable和Message。</p>
<h3 id="在简书上看到的比较好理解的写法："><a href="#在简书上看到的比较好理解的写法：" class="headerlink" title="在简书上看到的比较好理解的写法："></a>在简书上看到的比较好理解的写法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Instances of static inner classes do not hold an implicit</div><div class="line">   * reference to their outer class.</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;SampleActivity&gt; mActivity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(SampleActivity activity)</span> </span>&#123;</div><div class="line">      mActivity = <span class="keyword">new</span> WeakReference&lt;SampleActivity&gt;(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">      SampleActivity activity = mActivity.get();</div><div class="line">      <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MyHandler mHandler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Instances of anonymous classes do not hold an implicit</div><div class="line">   * reference to their outer class when they are "static".</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Runnable sRunnable = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">    <span class="comment">// Post a message and delay its execution for 10 minutes.</span></div><div class="line">    mHandler.postDelayed(sRunnable, <span class="number">1000</span> * <span class="number">60</span> * <span class="number">10</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Go back to the previous Activity.</span></div><div class="line">    finish();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="4-线程造成的内存泄漏"><a href="#4-线程造成的内存泄漏" class="headerlink" title="4.线程造成的内存泄漏"></a>4.线程造成的内存泄漏</h2><p>对于线程造成的内存泄漏也比较常见，如下两个示例：<br>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//——————test1</span></div><div class="line">        <span class="keyword">new</span> AsyncTask&lt;Void, Void, Void&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">                SystemClock.sleep(<span class="number">10000</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;.execute();</div><div class="line"><span class="comment">//——————test2</span></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                SystemClock.sleep(<span class="number">10000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div></pre></td></tr></table></figure></p>
<h3 id="分析：-3"><a href="#分析：-3" class="headerlink" title="分析："></a>分析：</h3><p>上面的异步任务和Runnable都是一个匿名内部类， 因此他们对当前Activity都有一个隐式引用。<strong><em>如果Activity在销毁之前，任务还未完成，那么将导致Activity的内存无法回收，造成内存泄漏</em></strong>，正确的做法还是使用静态内部类的方式，</p>
<h3 id="正确做法：-1"><a href="#正确做法：-1" class="headerlink" title="正确做法："></a>正确做法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">private</span> WeakReference&lt;Context&gt; weakReference;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyAsyncTask</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(context);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">            SystemClock.sleep(<span class="number">10000</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onPostExecute(aVoid);</div><div class="line">            MainActivity activity = (MainActivity) weakReference.get();</div><div class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//...</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        SystemClock.sleep(<span class="number">10000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//——————</span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable()).start();</div><div class="line"><span class="keyword">new</span> MyAsyncTask(<span class="keyword">this</span>).execute();</div></pre></td></tr></table></figure>
<p>这就避免了Activity的内存资源泄漏，当然在Activity销毁的时候也应该取消相应的任务AsyncTask::cancel()，避免任务在后台执行浪费资源。</p>
<hr>
<h2 id="5-资源未关闭造成的内存泄漏"><a href="#5-资源未关闭造成的内存泄漏" class="headerlink" title="5.资源未关闭造成的内存泄漏"></a>5.资源未关闭造成的内存泄漏</h2><p>对于使用了BroadcastReceiver, ContentObserver, File, Cursor, Stream, Bitmap等资源的使用，应该在Activity被销毁时及时关闭或者注销，否则这些资源将不会被回收，造成内存泄露。</p>
<hr>
<h2 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a><strong><em>一些建议</em></strong></h2><p>1.对于生命周期比Activity长的对象如果需要应该使用ApplicationContext.<br>2.在涉及到Context时先考虑ApplicationContext，当然他不是万能的，对于有些地方则必须使用ActivityContext，对于Application，Service,Activity三者的Context的应用场景如下：<br><img src="http://img.blog.csdn.net/20151123144226349" alt="应用场景"></p>
<p><strong><em>其中</em></strong>：NO1表示Application和Service可以启动一个Activity，不过需要创建一个新的Task任务队列。而对于Dialog而言，只有Activity中才能创建</p>
<p>3.对于需要在静态内部类中使用非静态外部成员变量（如Context，View），可以在静态内部类中使用弱引用来引用外部类的变量来避免内存泄漏。<br>4.对于生命周期比Activity长的内部类对象，并且内部来使用了外部类的成员变量，可以这样避免内存泄漏：</p>
<blockquote>
<p><em>将内部类改为静态内部类
</em>静态内部类中使用弱引用来引用外部类的成员变量</p>
</blockquote>
<p>5.对于不在需要使用的对象，显示的将其赋值为NULL，比如使用完Bitmap后县调用recycle(),在赋值为NULL。<br>6.保持对对象生命周期的敏感，特别注意单例，静态对象，全局性集合等的生命周期。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/xitu/gold-miner/blob/master/TODO/Eight-Ways-Your-Android-App-Can-Leak-Memory.md&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android面试" scheme="https://github.com/iBotasky/categories/Android%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Android" scheme="https://github.com/iBotasky/categories/Android%E9%9D%A2%E8%AF%95/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
      <category term="Android面试" scheme="https://github.com/iBotasky/tags/Android%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Mac环境下面的配置流程</title>
    <link href="https://github.com/iBotasky/2017/02/04/AndroidStudio-Mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%9D%A2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/"/>
    <id>https://github.com/iBotasky/2017/02/04/AndroidStudio-Mac环境下面的配置流程/</id>
    <published>2017-02-04T06:29:58.000Z</published>
    <updated>2017-08-27T09:14:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio配置<br><a id="more"></a></p>
<h3 id="0-到Google中国开发者网站下载最新的AndroidStudio"><a href="#0-到Google中国开发者网站下载最新的AndroidStudio" class="headerlink" title="0.到Google中国开发者网站下载最新的AndroidStudio"></a>0.到<a href="https://developer.android.google.cn/index.html" target="_blank" rel="external">Google中国开发者网站</a>下载最新的AndroidStudio</h3><h3 id="1-下载jdk-是jdk不是jre"><a href="#1-下载jdk-是jdk不是jre" class="headerlink" title="1.下载jdk 是jdk不是jre"></a>1.下载jdk 是jdk不是jre</h3><h3 id="2-导入项目可能需要下载新的gradle，会很慢，需要杀死AndroidStudio，然后在命令行键入-gradlew-clean会重新下载gradle，然后在打开AndroidStudio，重新载入项目。"><a href="#2-导入项目可能需要下载新的gradle，会很慢，需要杀死AndroidStudio，然后在命令行键入-gradlew-clean会重新下载gradle，然后在打开AndroidStudio，重新载入项目。" class="headerlink" title="2.导入项目可能需要下载新的gradle，会很慢，需要杀死AndroidStudio，然后在命令行键入  ./gradlew clean会重新下载gradle，然后在打开AndroidStudio，重新载入项目。"></a>2.导入项目可能需要下载新的gradle，会很慢，需要杀死AndroidStudio，然后在命令行键入  <code>./gradlew clean</code>会重新下载gradle，然后在打开AndroidStudio，重新载入项目。</h3><h3 id="3-点击SDK的按钮，需要下载ndk就在SDK-Tools上面选择，查找然后装NDK。"><a href="#3-点击SDK的按钮，需要下载ndk就在SDK-Tools上面选择，查找然后装NDK。" class="headerlink" title="3.点击SDK的按钮，需要下载ndk就在SDK Tools上面选择，查找然后装NDK。"></a>3.点击SDK的按钮，需要下载ndk就在SDK Tools上面选择，查找然后装NDK。</h3><h3 id="3-关于Android安装谷歌"><a href="#3-关于Android安装谷歌" class="headerlink" title="3.关于Android安装谷歌"></a>3.关于Android安装谷歌</h3><p>0.去应用市场查找<code>谷歌服务框架</code>的应用然后安装。<br>1.翻墙</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Studio配置&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/iBotasky/categories/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
  </entry>
  
</feed>
