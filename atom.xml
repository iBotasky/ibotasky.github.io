<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Botasky的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/iBotasky/"/>
  <updated>2017-02-23T06:33:34.000Z</updated>
  <id>https://github.com/iBotasky/</id>
  
  <author>
    <name>Botasky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Modeule</title>
    <link href="https://github.com/iBotasky/2017/02/23/Android-Modeule/"/>
    <id>https://github.com/iBotasky/2017/02/23/Android-Modeule/</id>
    <published>2017-02-23T02:05:40.000Z</published>
    <updated>2017-02-23T06:33:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-关于Module-模块"><a href="#1-关于Module-模块" class="headerlink" title="1.关于Module 模块"></a>1.关于Module 模块</h2><p><em>模块</em>是源文件和构建设置的集合，允许您将项目分成不同的功能单元。您的项目可以包含一个或多个模块，并且一个模块可以将其他模块用作依赖项。每个模块都可以独立构建、测试和调试。</p>
<p>如果在自己的项目中创建代码库或者希望为不同的设备类型（例如电话和穿戴式设备）创建不同的代码和资源组，但保留相同项目内的所有文件并共享某些代码，那么增加模块数量将非常有用。</p>
<p>您可以点击 <strong>File &gt; New &gt; New Module</strong>，向您的项目中添加新模块。</p>
<p>Android Studio 提供了几种不同类型的模块：</p>
<h3 id="1-1-Android-应用模块"><a href="#1-1-Android-应用模块" class="headerlink" title="1.1 Android 应用模块"></a>1.1 Android 应用模块</h3><p>为应用的源代码、资源文件和应用级设置（例如模块级构建文件和 Android 清单文件）提供容器。在您创建新项目时，默认的模块名称将是<code>“app</code>。在 <strong>Create New Module</strong> 窗口中，Android Studio 提供了以下应用模块：</p>
<blockquote>
<ul>
<li>Phone &amp; Table Module</li>
<li>Android Wear Module</li>
<li>Android TV Module </li>
<li>Glass Module</li>
</ul>
</blockquote>
<p>每种模块都提供了基础文件和代码模板，适合对应的应用或者设备。</p>
<h3 id="1-2-库模块"><a href="#1-2-库模块" class="headerlink" title="1.2 库模块"></a>1.2 库模块</h3><p><strong>接触过得SDK开发都是用这种模式然后打成jar/aar给别人调用</strong></p>
<p>为您的可重用代码提供容器，您可以将其用作其他应用模块的依赖项或者导入到其他项目中。库模块在结构上与应用模块相同，但在构建时，它将创建一个代码归档文件而不是 APK，因此无法安装到设备上。在 <strong>Create New Module</strong> 窗口中，Android Studio 提供了以下库模块：</p>
<blockquote>
<ul>
<li>Android库：这种类型的库可以包含Android项目中支持的所有文件类型，包括源代码、资源文件跟清单文件。构建结果是一个Android归档(AAR)文件，可以作为Android应用的依赖</li>
<li>Java 库：此类型的库只能包含 Java 源文件。构建结果是一个 Java 归档 (JAR) 文件，您可以将其作为 Andriod 应用模块或其他 Java 项目的依赖项添加。</li>
</ul>
</blockquote>
<h3 id="1-3-Google-Cloud-模块"><a href="#1-3-Google-Cloud-模块" class="headerlink" title="1.3 Google Cloud 模块"></a>1.3 <strong>Google Cloud 模块</strong></h3><p>为您的 Google Cloud 后端代码提供容器。此模块可以为使用简单 HTTP、Cloud Endpoints 和云消息传递连接到您的应用的 Java App 引擎后端添加所需的代码和依赖项。您可以开发您的后端，提供应用所需的云服务。利用 Android Studio 创建和开发您的 Google Cloud 模块，您可以在同一个项目中管理应用代码和后端代码。您也可以在本地运行和测试后端代码，并使用 Android Studio 部署 Google Cloud 模块。</p>
<h3 id="1-4-依赖模块"><a href="#1-4-依赖模块" class="headerlink" title="1.4 依赖模块"></a>1.4 依赖模块</h3><p>一些人也将模块称为子项目，完全没有问题，因为 Gradle 也将模块称为项目。例如，在创建库模块并且希望以依赖项的形式将其添加到您的 Android 应用模块时，您必须按如下所示进行声明：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  compile project(':my-library-module')</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-5-项目结构"><a href="#1-5-项目结构" class="headerlink" title="1.5 项目结构"></a>1.5 项目结构</h3><p><img src="http://oktzkaa8p.bkt.clouddn.com/20170223148783152840905.png" alt="某项目实例"> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-关于Module-模块&quot;&gt;&lt;a href=&quot;#1-关于Module-模块&quot; class=&quot;headerlink&quot; title=&quot;1.关于Module 模块&quot;&gt;&lt;/a&gt;1.关于Module 模块&lt;/h2&gt;&lt;p&gt;&lt;em&gt;模块&lt;/em&gt;是源文件和构建设置的集合，允许
    
    </summary>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio插件</title>
    <link href="https://github.com/iBotasky/2017/02/13/Android-Studio%E6%8F%92%E4%BB%B6/"/>
    <id>https://github.com/iBotasky/2017/02/13/Android-Studio插件/</id>
    <published>2017-02-13T01:14:00.000Z</published>
    <updated>2017-02-13T01:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于Android Studio上比较好用的插件整理</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>插件</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.Android ButterKnife Zelezny</td>
<td>ButterKnife快速生成View对象</td>
</tr>
<tr>
<td>1.GsonFormat</td>
<td>Json字符串转成JAVA Bean</td>
</tr>
<tr>
<td>2.Android Parcelable code generator</td>
<td>JavaBean序列化，快速实现Parcelable接口。</td>
</tr>
<tr>
<td>3.Translation</td>
<td>翻译插件</td>
</tr>
<tr>
<td>4.Android Code Generator</td>
<td>根据布局文件快速生成对应的Activity，Fragment，Adapter，Menu</td>
</tr>
<tr>
<td>5.Lifecycle Sorter</td>
<td>Activity/Fragment生命周期排序快捷键Ctrl + alt + K</td>
</tr>
<tr>
<td>6.JsonOnlineViewer</td>
<td>在Android Studio中请求、调试接口</td>
</tr>
</tbody>
</table>
<p><a href="http://www.jianshu.com/p/c76b0d8a642d" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Android Studio上比较好用的插件整理&lt;/p&gt;
    
    </summary>
    
    
      <category term="Andrioid" scheme="https://github.com/iBotasky/tags/Andrioid/"/>
    
      <category term="Android Studio" scheme="https://github.com/iBotasky/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>WebView遇到的用法</title>
    <link href="https://github.com/iBotasky/2017/02/12/WebView%E9%81%87%E5%88%B0%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://github.com/iBotasky/2017/02/12/WebView遇到的用法/</id>
    <published>2017-02-12T09:19:46.000Z</published>
    <updated>2017-02-13T02:36:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里总结一些项目中遇到的WebView的一些用法:)</p>
<a id="more"></a>
<hr>
<h2 id="1-CyberBlack项目中遇到的"><a href="#1-CyberBlack项目中遇到的" class="headerlink" title="1.CyberBlack项目中遇到的"></a>1.CyberBlack项目中遇到的</h2><h3 id="1-1描述：CyberBlack是自己利用空闲时间做的App，里面调用了知乎的API，关于知乎API请看这篇文章：知乎日报API分析-。"><a href="#1-1描述：CyberBlack是自己利用空闲时间做的App，里面调用了知乎的API，关于知乎API请看这篇文章：知乎日报API分析-。" class="headerlink" title="1.1描述：CyberBlack是自己利用空闲时间做的App，里面调用了知乎的API，关于知乎API请看这篇文章：知乎日报API分析 。"></a>1.1描述：CyberBlack是自己利用空闲时间做的App，里面调用了知乎的API，关于知乎API请看这篇文章：<a href="https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90">知乎日报API分析</a> 。</h3><p>项目里面用了<code>http://news-at.zhihu.com/api/4/news/3892357</code>这个接口，里面是拿到了html内容的<code>css</code>文件跟<code>body</code>，然后App端要用WebView做显示。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="http://oktzkaa8p.bkt.clouddn.com/20170212148689169013360.png" alt="20170212148689169013360.png"></h3><p>对如何显示内容有一点迷惑。</p>
<h3 id="1-2-解决：在网上查看资料找到这篇-知乎日报四-（http-krelve-com-android-127-html）看了一下，用了博主的方法，顺利显示内容："><a href="#1-2-解决：在网上查看资料找到这篇-知乎日报四-（http-krelve-com-android-127-html）看了一下，用了博主的方法，顺利显示内容：" class="headerlink" title="1.2 解决：在网上查看资料找到这篇[知乎日报四]（http://krelve.com/android/127.html）看了一下，用了博主的方法，顺利显示内容："></a>1.2 解决：在网上查看资料找到这篇[知乎日报四]（<a href="http://krelve.com/android/127.html）看了一下，用了博主的方法，顺利显示内容：" target="_blank" rel="external">http://krelve.com/android/127.html）看了一下，用了博主的方法，顺利显示内容：</a></h3><p>做法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</div><div class="line">        HttpHelper httpHelper = <span class="keyword">new</span> HttpHelper();</div><div class="line">        httpHelper.setEnd_points(Urls.ZHI_HU_HOST);</div><div class="line">        httpHelper.getService(ZhiHuDailyApi.class)</div><div class="line">                .getNewsDetail(id)</div><div class="line">                .subscribeOn(Schedulers.newThread())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(dailyDetailResponse -&gt; &#123;</div><div class="line">                    loadView(dailyDetailResponse);</div><div class="line">                &#125;, throwable -&gt; &#123;</div><div class="line"></div><div class="line">                &#125;, () -&gt; &#123;</div><div class="line"></div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line">	<span class="comment">//这边是拿到了css路径跟html的body，然后用拼接起来放到html中，最后用webview显示。很简单。</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadView</span><span class="params">(DailyDetailResponse dailyDetailResponse)</span> </span>&#123;</div><div class="line">        wvContent.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">        String css = <span class="string">"&lt;link rel=\"stylesheet\" href=\""</span> + dailyDetailResponse.getCss().get(<span class="number">0</span>) + <span class="string">"\" type=\"text/css\"&gt;"</span>;</div><div class="line">        String html = <span class="string">"&lt;html&gt;&lt;head&gt;"</span> + css + <span class="string">"&lt;/head&gt;&lt;body&gt;"</span> + dailyDetailResponse.getBody() + <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>;</div><div class="line">        html = html.replace(<span class="string">"&lt;div class=\"img-place-holder\"&gt;"</span>, <span class="string">""</span>);</div><div class="line">        wvContent.loadDataWithBaseURL(<span class="string">"x-data://base"</span>, html, <span class="string">"text/html"</span>, <span class="string">"UTF-8"</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最后用了这个方法调试几次后成功让webview显示出来正确的格式内容。</p>
<hr>
<h2 id="2-Podoon项目的WebView"><a href="#2-Podoon项目的WebView" class="headerlink" title="2.Podoon项目的WebView"></a>2.Podoon项目的WebView</h2><h3 id="2-1描述"><a href="#2-1描述" class="headerlink" title="2.1描述"></a>2.1描述</h3><p>选鞋详细界面需要展示鞋子的详细信息，这个界面是用WebView展示的。但是里面包含了一些<code>js</code>的方法。</p>
<h3 id="2-2用法"><a href="#2-2用法" class="headerlink" title="2.2用法"></a>2.2用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">mWebView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">        mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onPageStarted(view, url, favicon);</div><div class="line">                ShoeRecordActivity.<span class="keyword">this</span>.showDialog(<span class="keyword">null</span>, <span class="string">"载入中,请稍后..."</span>);</div><div class="line">                logger.info(<span class="string">"onPageStarted() called with: "</span> + <span class="string">"view = ["</span> + view + <span class="string">"], url = ["</span> + url + <span class="string">"], favicon = ["</span> + favicon + <span class="string">"]"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">              <span class="comment">//这里放javaScript代码，webview加载</span></div><div class="line">                String javaScript = <span class="string">"javascript:function annotationData()&#123;"</span> +</div><div class="line">                        <span class="string">"var x=document.getElementById(\"accomTotalDistance\"); x.innerHTML="</span> + <span class="string">"'"</span> + dis + <span class="string">"km"</span> + <span class="string">"'"</span> + <span class="string">";"</span> +</div><div class="line">                        <span class="string">"var y=document.getElementById(\"accomPace\"); y.innerHTML="</span> + <span class="string">"'"</span> + pace2 + <span class="string">"'"</span> + <span class="string">";"</span> +</div><div class="line">                        <span class="string">"var z=document.getElementById(\"accomRecordAccount\"); z.innerHTML="</span> + <span class="string">"'"</span> + record + <span class="string">"'"</span> + <span class="string">";"</span> +</div><div class="line">                        <span class="string">"var a=document.getElementById(\"processDiv\"); a.style.width="</span> + <span class="string">"'"</span> + progress + <span class="string">"%"</span> + <span class="string">"'"</span> + <span class="string">";"</span> +</div><div class="line">                        <span class="string">"&#125;"</span>;</div><div class="line">                logger.error(<span class="string">"onPageFinished() returned: "</span> + javaScript);</div><div class="line">                mWebView.loadUrl(javaScript);</div><div class="line">                mWebView.loadUrl(<span class="string">"javascript:annotationData()"</span>);</div><div class="line">                <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">                <span class="keyword">if</span> (dialog.isShowing() &amp;&amp; dialog != <span class="keyword">null</span>) &#123;</div><div class="line">                    dialog.cancel();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedHttpAuthRequest</span><span class="params">(WebView view, HttpAuthHandler handler, String host, String realm)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onReceivedHttpAuthRequest(view, handler, host, realm);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        mWebView.loadUrl(mURL);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里总结一些项目中遇到的WebView的一些用法:)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
      <category term="AndroidView" scheme="https://github.com/iBotasky/tags/AndroidView/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS 显示/隐藏文件夹</title>
    <link href="https://github.com/iBotasky/2017/02/06/Mac-OS-%E6%98%BE%E7%A4%BA-%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>https://github.com/iBotasky/2017/02/06/Mac-OS-显示-隐藏文件夹/</id>
    <published>2017-02-06T03:56:19.000Z</published>
    <updated>2017-02-12T09:52:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac显示/隐藏文件夹<br><a id="more"></a></p>
<p>显示隐藏文件：<br><code>defaults write com.apple.finder AppleShowAllFiles -bool TRUE ; killall Finder</code><br>停止显示隐藏文件：<br><code>defaults write com.apple.finder AppleShowAllFiles -bool FALSE ; killall Finder</code></p>
<p>隐藏一个文件夹：<br><code>chflags hidden 文件绝对路径/ 相对路径</code><br>取消隐藏一个文件夹：<br><code>chflags nohidden 文件绝对路径/ 相对路径</code></p>
<p>注：重启Finder的方法：<br>按住option+command，dock上右键-&gt;“Relanch”/“重新开启”。</p>
<p><a href="http://www.howtogeek.com/211496/how-to-hide-files-and-view-hidden-files-on-mac-os-x/" target="_blank" rel="external">参考网址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac显示/隐藏文件夹&lt;br&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://github.com/iBotasky/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Android进程优先级</title>
    <link href="https://github.com/iBotasky/2017/02/04/Android%E8%BF%9B%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://github.com/iBotasky/2017/02/04/Android进程优先级/</id>
    <published>2017-02-04T06:40:37.000Z</published>
    <updated>2017-02-04T06:41:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>进程优先级介绍<br><a id="more"></a><br>查看命令当前进程优先级：adb shell cat /proc/<strong><em>process_id</em></strong>/oom_adj</p>
<p><a href="http://blog.csdn.net/wangliang198901/article/details/12342845" target="_blank" rel="external">文章地址</a><br>一个进程可以做一个前台的ForegroundService做通知栏，或<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进程优先级介绍&lt;br&gt;
    
    </summary>
    
    
      <category term="Android进阶" scheme="https://github.com/iBotasky/tags/Android%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android保活</title>
    <link href="https://github.com/iBotasky/2017/02/04/Android%E4%BF%9D%E6%B4%BB/"/>
    <id>https://github.com/iBotasky/2017/02/04/Android保活/</id>
    <published>2017-02-04T06:38:22.000Z</published>
    <updated>2017-02-04T06:39:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>平常接触到的保活<br><a id="more"></a><br>自启动保活 系统通知权限<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyNotificationService</span> <span class="keyword">extends</span> <span class="title">NotificationListenerService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String TAG = MyNotificationService.class.getName();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationPosted</span><span class="params">(StatusBarNotification sbn)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"onNotificationPosted: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationRemoved</span><span class="params">(StatusBarNotification sbn)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"onNotificationRemoved: "</span>);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, BackgroundService.class);</div><div class="line">        startService(intent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跳转<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goNLPermission</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           Intent intent = <span class="keyword">new</span> Intent(<span class="string">"android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS"</span>);</div><div class="line">           context.startActivity(intent);</div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   </div><div class="line">   <span class="comment">/**</span></div><div class="line">        * Notification keep live</div><div class="line">        */</div><div class="line">       goNLPermission(<span class="keyword">this</span>);</div><div class="line">       Intent notificationService = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyNotificationService.class);</div><div class="line">       startService(notificationService);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平常接触到的保活&lt;br&gt;
    
    </summary>
    
    
      <category term="Android进阶" scheme="https://github.com/iBotasky/tags/Android%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android动画相关</title>
    <link href="https://github.com/iBotasky/2017/02/04/Android%E5%8A%A8%E7%94%BB%E7%9B%B8%E5%85%B3/"/>
    <id>https://github.com/iBotasky/2017/02/04/Android动画相关/</id>
    <published>2017-02-04T06:37:15.000Z</published>
    <updated>2017-02-09T02:48:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>平常用到的一些比较机智的动画</p>
<a id="more"></a>
<h2 id="1-ViewCompat"><a href="#1-ViewCompat" class="headerlink" title="1.ViewCompat"></a>1.ViewCompat</h2><p>ServiceApp里面看到一个二维码扫描/条形码输入的一个界面，两个界面放在一个Activity里面，切换二维码扫描跟条形码输入的时候会有一个过渡动画，</p>
<h3 id="1-1先设置要做过渡动画的View"><a href="#1-1先设置要做过渡动画的View" class="headerlink" title="1.1先设置要做过渡动画的View"></a>1.1先设置要做过渡动画的View</h3><p><code>ViewCompat.setAlpha(rlBlur, 0);</code></p>
<h3 id="1-2-在该显示的时候-设置VISIBLE，（默认应该是GONE）"><a href="#1-2-在该显示的时候-设置VISIBLE，（默认应该是GONE）" class="headerlink" title="1.2 在该显示的时候, 设置VISIBLE，（默认应该是GONE）"></a>1.2 在该显示的时候, 设置VISIBLE，（默认应该是GONE）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rlBlur.setVisibility(View.VISIBLE);</div><div class="line">rlBlur.setBackground(<span class="keyword">new</span> BitmapDrawable(<span class="keyword">null</span>, blurBg));</div><div class="line">ViewCompat.animate(rlBlur).alpha(<span class="number">1</span>).setDuration(<span class="number">400</span>).start();</div></pre></td></tr></table></figure>
<h3 id="1-3-在不显示的时候是指GONE和透明度"><a href="#1-3-在不显示的时候是指GONE和透明度" class="headerlink" title="1.3 在不显示的时候是指GONE和透明度"></a>1.3 在不显示的时候是指GONE和透明度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rlBlur.setVisibility(View.GONE);</div><div class="line">ViewCompat.setAlpha(rlBlur, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<h3 id="1-4-也可以设置一些监听操作"><a href="#1-4-也可以设置一些监听操作" class="headerlink" title="1.4 也可以设置一些监听操作"></a>1.4 也可以设置一些监听操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.tv_qr_scan:</div><div class="line">                <span class="keyword">if</span> (!tvQrScan.isSelected()) &#123;</div><div class="line">                    tvCodeInput.setSelected(<span class="keyword">false</span>);</div><div class="line">                    tvQrScan.setSelected(<span class="keyword">true</span>);</div><div class="line">                    ViewCompat.animate(llInput).alpha(<span class="number">0</span>).setDuration(<span class="number">400</span>).setListener(<span class="keyword">new</span> ViewPropertyAnimatorListener() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                            llInput.setVisibility(View.GONE);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">                        &#125;</div><div class="line">                    &#125;).start();</div><div class="line"></div><div class="line"></div><div class="line">                    mQRCodeView.startSpot();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.tv_code_input:</div><div class="line">                <span class="keyword">if</span> (!tvCodeInput.isSelected()) &#123;</div><div class="line">                    tvQrScan.setSelected(<span class="keyword">false</span>);</div><div class="line">                    tvCodeInput.setSelected(<span class="keyword">true</span>);</div><div class="line">                    ViewCompat.animate(llInput).alpha(<span class="number">1</span>).setDuration(<span class="number">400</span>).setListener(<span class="keyword">new</span> ViewPropertyAnimatorListener() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                            llInput.setVisibility(View.VISIBLE);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">                        &#125;</div><div class="line">                    &#125;).start();</div><div class="line"></div><div class="line">                    mQRCodeView.stopSpot();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>感觉用起来还不错，有需要可以用这个，在两个VIEW切换的时候用，显得切换不会那么生硬。</p>
<hr>
<h2 id="2-Activity启动退出动画"><a href="#2-Activity启动退出动画" class="headerlink" title="2.Activity启动退出动画"></a>2.Activity启动退出动画</h2><h3 id="2-1-首先在res-anim文件夹下创建进入和退出动画的set"><a href="#2-1-首先在res-anim文件夹下创建进入和退出动画的set" class="headerlink" title="2.1.首先在res/anim文件夹下创建进入和退出动画的set"></a>2.1.首先在<code>res/anim</code>文件夹下创建进入和退出动画的<code>set</code></h3><p>这里以底部上滑出现和从顶部下滑退出为例：<br><code>activity_open.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt; </div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">translate</span> </span></div><div class="line">    <span class="attr">android:fromYDelta</span>=<span class="string">"100%p"</span> </div><div class="line">    <span class="attr">android:toYDelta</span>=<span class="string">"0"</span> </div><div class="line">    <span class="attr">android:duration</span>=<span class="string">"1500"</span> </div><div class="line">  /&gt; </div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">```xml</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  </div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;  </div><div class="line">   &lt;translate  </div><div class="line">    android:fromYDelta=&quot;25&quot;  </div><div class="line">    android:toYDelta=&quot;100%p&quot;  </div><div class="line">    android:duration=&quot;1500&quot;  </div><div class="line">   /&gt;  </div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<h3 id="2-2-设置启动动画："><a href="#2-2-设置启动动画：" class="headerlink" title="2.2.设置启动动画："></a>2.2.设置启动动画：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(); </div><div class="line">intent.setClassName(cxt,<span class="string">"com.test.mrn.android.route.RouteDemoActivity"</span>);<span class="comment">//打开一个activity </span></div><div class="line">startActivity(intent); </div><div class="line">overridePendingTransition(R.anim.activity_open,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h3 id="2-3-设置关闭动画"><a href="#2-3-设置关闭动画" class="headerlink" title="2.3.设置关闭动画"></a>2.3.设置关闭动画</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">button.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        finish();</div><div class="line">        overridePendingTransition(<span class="number">0</span>, R.anim.activity_close);</div><div class="line">      &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<h2 id="3-使用style的方式定义Activity的切换动画"><a href="#3-使用style的方式定义Activity的切换动画" class="headerlink" title="3.使用style的方式定义Activity的切换动画"></a>3.使用style的方式定义Activity的切换动画</h2><h3 id="3-1-定义Application的style"><a href="#3-1-定义Application的style" class="headerlink" title="3.1 定义Application的style"></a>3.1 定义Application的style</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:allowbackup</span>=<span class="string">"true"</span> <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span> </span></div><div class="line"><span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> </div><div class="line"><span class="attr">android:supportsrtl</span>=<span class="string">"true"</span> </div><div class="line"><span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-2-定义具体的AppTheme样式"><a href="#3-2-定义具体的AppTheme样式" class="headerlink" title="3.2 定义具体的AppTheme样式"></a>3.2 定义具体的AppTheme样式</h3><p>其中这里的windowAnimationStyle就是我们定义的Actvity切换动画的style。而<code>@anim/slide_in_top</code>就是我们定义的动画文件。也就是说通过切换Application的style，然后为windowAnimationStyle设置动画文件就可以全局的为Activity跳转配置动画效果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> &lt;&lt;!-- Base application theme. --&gt;</div><div class="line">    &lt;style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar"&gt;</div><div class="line">        &lt;!-- Customize your theme here. --&gt;</div><div class="line">        &lt;item name="colorPrimary"&gt;@color/colorPrimary&lt;/item&gt;</div><div class="line">        &lt;item name="colorPrimaryDark"&gt;@color/colorPrimaryDark&lt;/item&gt;</div><div class="line">        &lt;item name="colorAccent"&gt;@color/colorAccent&lt;/item&gt;</div><div class="line">        &lt;item name="android:windowAnimationStyle"&gt;@style/activityAnim&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;!-- 使用style方式定义activity切换动画 --&gt;</div><div class="line">    &lt;style name="activityAnim"&gt;</div><div class="line">        &lt;item name="android:activityOpenEnterAnimation"&gt;@anim/slide_in_top&lt;/item&gt;</div><div class="line">        &lt;item name="android:activityOpenExitAnimation"&gt;@anim/slide_in_top&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>在windowAnimationStyle存在四中动画：</p>
<blockquote>
<ul>
<li>activityOpenEnterAnimation</li>
<li>activityOpenExitAnimation </li>
<li>activityCloseEnterAnimation</li>
<li>activityCloseExitAnimation   </li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平常用到的一些比较机智的动画&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统架构</title>
    <link href="https://github.com/iBotasky/2017/02/04/Android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <id>https://github.com/iBotasky/2017/02/04/Android系统架构/</id>
    <published>2017-02-04T06:34:45.000Z</published>
    <updated>2017-02-07T05:52:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android系统架构</p>
<p><a id="more"></a>##Android框架分层自顶向下</p>
<blockquote>
<p><em>应用程序层                       (Applications)
</em>应用程序框架                     (Application Frameworks)<br><em>系统运行库与Android运行环境      (Library&amp;Runtime)
</em>Linux内核                        (Linux Kernel)</p>
</blockquote>
<hr>
<h2 id="Android结构示意图"><a href="#Android结构示意图" class="headerlink" title="Android结构示意图"></a>Android结构示意图</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://oktzkaa8p.bkt.clouddn.com/201702071873018203746-970e2cbe223e4c1c9ca129e7a2feb6c6.jpg" alt="Android结构示意图"></h2><h2 id="1-应用程序层-Applications"><a href="#1-应用程序层-Applications" class="headerlink" title="1.应用程序层(Applications)"></a>1.应用程序层(Applications)</h2><p>Android装配一个核心应用程序集合，包括电子邮件客户端、SMS程序、日历、地图、浏览器、联系人和其他设置。所有应用程序都是用Java编程语言写的。更加丰富的应用程序有待我们去开发！</p>
<h2 id="2-Application-Framework"><a href="#2-Application-Framework" class="headerlink" title="2.Application Framework"></a>2.Application Framework</h2><p>通过提供开放的开发平台，Android使开发者能够编制极其丰富和新颖的应用程序。开发者可以自由地利用设备硬件优势、访问位置信息、运行后台服务、设置闹钟、向状态栏添加通知等等，很多很多。</p>
<p>开发者可以完全使用核心应用程序所使用的框架APIs。应用程序的体系结构旨在简化组件的重用，任何应用程序都能发布他的功能且任何其他应用程序可以使用这些功能（需要服从框架执行的安全限制）。这一机制允许用户替换组件。</p>
<p>所有的应用程序其实是一组服务和系统，包括：</p>
<blockquote>
<p>*视图（View）——丰富的、可扩展的视图集合，可用于构建一个应用程序。包括包括列表、网格、文本框、按钮，甚至是内嵌的网页浏览器</p>
<ul>
<li>内容提供者（Content Providers）——使应用程序能访问其他应用程序（如通讯录）的数据，或共享自己的数据<br><em>资源管理器（Resource Manager）——提供访问非代码资源，如本地化字符串、图形和布局文件
</em>通知管理器（Notification Manager）——使所有的应用程序能够在状态栏显示自定义警告<br>*活动管理器（Activity Manager）——管理应用程序生命周期,提供通用的导航回退功能</li>
</ul>
</blockquote>
<h2 id="3-Library"><a href="#3-Library" class="headerlink" title="3.Library"></a>3.Library</h2><p>Android包含一个C/C++库的集合，供Android系统的各个组件使用。这些功能通过Android的应用程序框架（application framework）暴露给开发者。下面列出一些核心库：</p>
<blockquote>
<p><em>系统C库——标准C系统库（libc）的BSD衍生，调整为基于嵌入式Linux设备
</em>媒体库——基于PacketVideo的OpenCORE。这些库支持播放和录制许多流行的音频和视频格式，以及静态图像文件，包括MPEG4、 H.264、 MP3、 AAC、 AMR、JPG、 PNG<br><em>界面管理——管理访问显示子系统和无缝组合多个应用程序的二维和三维图形层
</em>LibWebCore——新式的Web浏览器引擎,驱动Android 浏览器和内嵌的web视图<br><em>SGL——基本的2D图形引擎
</em>3D库——基于OpenGL ES 1.0 APIs的实现。库使用硬件3D加速或包含高度优化的3D软件光栅<br><em>FreeType ——位图和矢量字体渲染
</em>SQLite ——所有应用程序都可以使用的强大而轻量级的关系数据库引擎</p>
</blockquote>
<h2 id="4-Runtime"><a href="#4-Runtime" class="headerlink" title="4.Runtime"></a>4.Runtime</h2><p>Android包含一个核心库的集合，提供大部分在Java编程语言核心类库中可用的功能。每一个Android应用程序是Dalvik虚拟机中的实例，运行在他们自己的进程中。Dalvik虚拟机设计成，在一个设备可以高效地运行多个虚拟机。Dalvik虚拟机可执行文件格式是.dex，dex格式是专为Dalvik设计的一种压缩格式，适合内存和处理器速度有限的系统。</p>
<p>大多数虚拟机包括JVM都是基于栈的，而Dalvik虚拟机则是基于寄存器的。两种架构各有优劣，一般而言，基于栈的机器需要更多指令，而基于寄存器的机器指令更大。dx 是一套工具，可以將 Java .class 转换成 .dex 格式。一个dex文件通常会有多个.class。由于dex有時必须进行最佳化，会使文件大小增加1-4倍，以ODEX结尾。</p>
<p>Dalvik虚拟机依赖于Linux 内核提供基本功能，如线程和底层内存管理。</p>
<h2 id="5-Linux-Kernel"><a href="#5-Linux-Kernel" class="headerlink" title="5.Linux Kernel"></a>5.Linux Kernel</h2><p>Android基于Linux 2.6提供核心系统服务，例如：安全、内存管理、进程管理、网络堆栈、驱动模型。Linux Kernel也作为硬件和软件之间的抽象层，它隐藏具体硬件细节而为上层提供统一的服务。</p>
<p>如果你学过计算机网络知道OSI/RM，就会知道分层的好处就是使用下层提供的服务而为上层提供统一的服务，屏蔽本层及以下层的差异，当本层及以下层发生了变化不会影响到上层。也就是说各层各司其职，各层提供固定的SAP（Service Access Point），专业点可以说是高内聚、低耦合。</p>
<p>如果你只是做应用开发，就不需要深入了解Linux Kernel层。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android系统架构&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="Android面试" scheme="https://github.com/iBotasky/tags/Android%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Activity/Service的生命周期</title>
    <link href="https://github.com/iBotasky/2017/02/04/Activity-Service%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://github.com/iBotasky/2017/02/04/Activity-Service的生命周期/</id>
    <published>2017-02-04T06:33:13.000Z</published>
    <updated>2017-02-12T09:09:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android Activity/Service 生命周期介绍<br><a id="more"></a></p>
<h2 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h2><h3 id="1-Activity生命周期图"><a href="#1-Activity生命周期图" class="headerlink" title="1.Activity生命周期图"></a>1.Activity生命周期图</h3><p><img src="http://stormzhang.com/image/activity_lifecycle.png" alt="生命周期"></p>
<h3 id="2-Activity生命周期相关方法"><a href="#2-Activity生命周期相关方法" class="headerlink" title="2.Activity生命周期相关方法"></a>2.Activity生命周期相关方法</h3><p>Activity继承了ApplicationContext，可以重写方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span> </span>&#123; </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>;  </div><div class="line">       </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>;     </div><div class="line">         </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span></span>;  </div><div class="line">         </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>;  </div><div class="line">         </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span></span>;  </div><div class="line">         </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span></span>;  </div><div class="line">         </div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>;  </div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>通过重写，存为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.tutor.activitydemo;  </div><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.util.Log;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityDemo</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">     </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ActivityDemo"</span>;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.main);  </div><div class="line">          </div><div class="line">        Log.e(TAG, <span class="string">"start onCreate~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onStart();  </div><div class="line">        Log.e(TAG, <span class="string">"start onStart~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onRestart();  </div><div class="line">        Log.e(TAG, <span class="string">"start onRestart~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onResume();  </div><div class="line">        Log.e(TAG, <span class="string">"start onResume~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onPause();  </div><div class="line">        Log.e(TAG, <span class="string">"start onPause~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onStop();  </div><div class="line">        Log.e(TAG, <span class="string">"start onStop~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        Log.e(TAG, <span class="string">"start onDestroy~~~"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-相关操作的的生命周期流程"><a href="#3-相关操作的的生命周期流程" class="headerlink" title="3.相关操作的的生命周期流程"></a>3.相关操作的的生命周期流程</h3><h4 id="3-1-启动Activity"><a href="#3-1-启动Activity" class="headerlink" title="3.1 启动Activity"></a>3.1 启动Activity</h4><p><img src="http://hi.csdn.net/attachment/201007/28/0_1280324212Y5nt.gif" alt="启动"><br>onCreate()-&gt;onStart()-&gt;onResume</p>
<h4 id="3-2-按BACK键："><a href="#3-2-按BACK键：" class="headerlink" title="3.2 按BACK键："></a>3.2 按BACK键：</h4><p><img src="http://hi.csdn.net/attachment/201007/28/0_1280324618Bqxb.gif" alt="按返回键"><br>onPause()-&gt;onStop()-&gt;onDestory()</p>
<h4 id="3-3-按HOME键"><a href="#3-3-按HOME键" class="headerlink" title="3.3 按HOME键:"></a>3.3 按HOME键:</h4><p><img src="http://hi.csdn.net/attachment/201007/28/0_1280325044k0c7.gif" alt="按Home键"><br>onPause()-&gt;onStop()</p>
<h4 id="3-4-从3-3操作后，从桌面进入ActivityDemo"><a href="#3-4-从3-3操作后，从桌面进入ActivityDemo" class="headerlink" title="3.4 从3.3操作后，从桌面进入ActivityDemo:"></a>3.4 从3.3操作后，从桌面进入ActivityDemo:</h4><p>onRestart()-&gt;onStart()-&gt;onResume()</p>
<h3 id="4-关于其他"><a href="#4-关于其他" class="headerlink" title="4.关于其他"></a>4.关于其他</h3><p>如果用户将当前的App切换为其他App，就可能会导致当前App被杀掉。所以在某些比较重要的Activity中需要做好保存数据的操作。避免Activity被系统回收，再次进入时是非正确的状态。<strong><em>这里需要关注Activity另外两个比较重要的方法，onSaveInstanceState()与onRestoreInstanceState();</em></strong> <a href="http://www.cnblogs.com/hanyonglu/archive/2012/03/28/2420515.html" target="_blank" rel="external">相关链接</a></p>
<hr>
<h2 id="Service的生命周期"><a href="#Service的生命周期" class="headerlink" title="Service的生命周期"></a>Service的生命周期</h2><h3 id="1-Service的概念及用途"><a href="#1-Service的概念及用途" class="headerlink" title="1.Service的概念及用途"></a>1.Service的概念及用途</h3><p>Service与Activity不同，他是不能与用户交互的，不能自己启动的，运行在后台的程序，如果我们退出应用时，Service进程并没有结束，仍在后台运行。</p>
<h3 id="2-Service的生命周期"><a href="#2-Service的生命周期" class="headerlink" title="2.Service的生命周期"></a>2.Service的生命周期</h3><p>生命周期图：<br><img src="http://img.blog.csdn.net/20141021233945682?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHV1dHU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="Service生命周期"></p>
<h4 id="2-1使用context-startService-启动Service"><a href="#2-1使用context-startService-启动Service" class="headerlink" title="2.1使用context.startService() 启动Service"></a>2.1使用context.startService() 启动Service</h4><p>其生命周期为context.startService() -&gt;onCreate()- &gt;onStart()-&gt;onStartCommand()-&gt;Service running–&gt;(如果调用context.stopService() )-&gt;onDestroy() -&gt;Service shut down</p>
<blockquote>
<p><em>如果Service还没有运行，则android先调用onCreate()然后调用onStart()；
</em>如果Service已经运行，则只调用onStart()，所以一个Service的onStart方法可能会重复调用多次。 </p>
</blockquote>
<p><strong><em>onStartCommand()可以接收在前台startService传入的Intent参数。</em></strong></p>
<p>调用stopService的时候直接onDestroy，如果是调用者自己直接退出而没有调用stopService的话，Service会一直在后台运行。<br>该Service的调用者再启动起来后可以通过stopService关闭Service。</p>
<p><strong><em>所以调用startService的生命周期为：onCreate –&gt; onStart(可多次调用) –&gt; onDestroy</em></strong></p>
<h4 id="2-2对于bindService-启动Service会经历："><a href="#2-2对于bindService-启动Service会经历：" class="headerlink" title="2.2对于bindService()启动Service会经历："></a>2.2对于bindService()启动Service会经历：</h4><p>context.bindService()-&gt;onCreate()-&gt;onBind()-&gt;Service running–&gt;onUnbind() -&gt; onDestroy() -&gt;Service stop</p>
<p>onBind将返回给客户端一个IBind接口实例，IBind允许客户端回调服务的方法，比如得到Service运行的状态或其他操作。<br>这个时候把调用者（Context，例如Activity）会和Service绑定在一起，Context退出了，<br>Srevice就会调用onUnbind-&gt;onDestroy相应退出。 </p>
<p><strong><em>所以调用bindService的生命周期为：onCreate –&gt; onBind(只一次，不可多次绑定) –&gt; onUnbind –&gt; onDestory。<br>一但销毁activity它就结束，如果按home把它放到后台，那他就不退出。</em></strong></p>
<p>PS：<br>在Service每一次的开启关闭过程中，只有onStart可被多次调用(通过多次startService调用)，其他onCreate，onBind，onUnbind，onDestory在一个生命周期中只能被调用一次。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Activity/Service 生命周期介绍&lt;br&gt;
    
    </summary>
    
    
      <category term="Android面试" scheme="https://github.com/iBotasky/tags/Android%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android常见的内存泄漏</title>
    <link href="https://github.com/iBotasky/2017/02/04/Android%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    <id>https://github.com/iBotasky/2017/02/04/Android常见的内存泄漏/</id>
    <published>2017-02-04T06:31:30.000Z</published>
    <updated>2017-02-04T07:00:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/xitu/gold-miner/blob/master/TODO/Eight-Ways-Your-Android-App-Can-Leak-Memory.md">原文地址</a></p>
<a id="more"></a>
<hr>
<h2 id="1-单例造成的内存泄漏"><a href="#1-单例造成的内存泄漏" class="headerlink" title="1.单例造成的内存泄漏"></a>1.单例造成的内存泄漏</h2><p>单例的静态特性使得单例的生命周期和应用的生命周期一样长，如果一个对象已经不需要使用了，而单例对该对象还持有对象的引用，那么这个对象不能被正常回收，导致内存泄露！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppManager instance;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AppManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> AppManager(context);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>这是一个普通的单例模式，当创建这个单例的时候需要传入一个Context，所以Context的生命周期的长短至关重要：<br>1.传入的是Application的Context：不会有问题！<br>2.传入的是Activity的Context：当Activity退出时，由于该Context和Activity的生命周期一样长，（Activity间接继承于Context），所以当Activity退出时，他的内存并不会被回收，因为单例对象持有改Activity的引用。</p>
<h3 id="正确做法："><a href="#正确做法：" class="headerlink" title="正确做法："></a>正确做法：</h3><p>所以单例正确引用Context应该改为下面的方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppManager instance;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AppManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="comment">//直接拿取Application的Context</span></div><div class="line">        <span class="keyword">this</span>.context = context.getApplicationContext();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> AppManager(context);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="2-非静态内部类创建实例造成的内存泄漏"><a href="#2-非静态内部类创建实例造成的内存泄漏" class="headerlink" title="2.非静态内部类创建实例造成的内存泄漏"></a>2.非静态内部类创建实例造成的内存泄漏</h2><p><strong><em>匿名内部类跟非静态内部类持会持有外部类的强引用</em></strong></p>
<p>有的时候我们可能会在启动频繁的Activity中，为了避免重复创建相同的数据资源，可能会出现下面的写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TestResource mResource = <span class="keyword">null</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="keyword">if</span>(mManager == <span class="keyword">null</span>)&#123;</div><div class="line">            mManager = <span class="keyword">new</span> TestResource();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestResource</span> </span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h3><p>上面的代码在Activity内部创建了一个非静态内部类（TestResource.class）的单例(mResource)，每次启动Activity时都会使用该单例的数据，这样虽然避免了资源的重复创建，不过这种写法却会造成内存泄漏，<strong><em>因为非静态内部类默认会持有外部类的引用</em></strong>，而又使用了该非静态内部类创建了一个静态实例，该实例的生命周期和应用的一样长，这就导致了该静态实例一直会持有该Activity的引用，导致Activity不能正常回收。</p>
<p>###正确的做法为：<br>将该内部类设为静态内部类或将该内部类抽取出来封装成一个单例，如果需要使用Context,请使用ApplicationContext。</p>
<hr>
<h2 id="3-Handler造成的内存泄漏"><a href="#3-Handler造成的内存泄漏" class="headerlink" title="3.Handler造成的内存泄漏"></a>3.Handler造成的内存泄漏</h2><p>Handler的使用造成的内存泄漏问题应该说是最为常见了，平时在处理网络任务等都应该会借助Handler来处理，对于Handler的使用代码编写不规范有可能造成泄漏：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        loadData();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//...request</span></div><div class="line">        Message message = Message.obtain();</div><div class="line">        mHandler.sendMessage(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="分析：-2"><a href="#分析：-2" class="headerlink" title="分析："></a>分析：</h3><p>这种创建Handler的方式会造成内存泄漏，<strong><em>由于mHandler是Handler的非静态匿名内部类的实例，所以他持有外部类Activity的引用</em></strong>，我们知道消息队列是在一个Looper线程中不断轮询处理消息，那么当这个Activity退出时消息队列中海油未处理或者正在处理的消息， 而消息队列中的Message持有mHandler实例的引用， mHandler又持有Activity的引用， 所以导致该Activity的内存无法及时回收， 引发内存泄漏，所以另外一种做法为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MyHandler mHandler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">private</span> TextView mTextView ;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> WeakReference&lt;Context&gt; reference;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            reference = <span class="keyword">new</span> WeakReference&lt;&gt;(context);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            MainActivity activity = (MainActivity) reference.get();</div><div class="line">            <span class="keyword">if</span>(activity != <span class="keyword">null</span>)&#123;</div><div class="line">                activity.mTextView.setText(<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mTextView = (TextView)findViewById(R.id.textview);</div><div class="line">        loadData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//...request</span></div><div class="line">        Message message = Message.obtain();</div><div class="line">        mHandler.sendMessage(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个静态的Handler内部类，然后对Handler持有的对象使用弱引用，这样在回收时也可以回收Handler持有的对象，这样虽然避免了Activity的泄漏，不过Looper线程的消息队列中还是可能会有待处理的消息，所以我们Activity的Destory时或者OnStop应该移除消息队列中的消息。</p>
<h3 id="正确的做法："><a href="#正确的做法：" class="headerlink" title="正确的做法："></a>正确的做法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MyHandler mHandler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">private</span> TextView mTextView ;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> WeakReference&lt;Context&gt; reference;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            reference = <span class="keyword">new</span> WeakReference&lt;&gt;(context);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            MainActivity activity = (MainActivity) reference.get();</div><div class="line">            <span class="keyword">if</span>(activity != <span class="keyword">null</span>)&#123;</div><div class="line">                activity.mTextView.setText(<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mTextView = (TextView)findViewById(R.id.textview);</div><div class="line">        loadData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//...request</span></div><div class="line">        Message message = Message.obtain();</div><div class="line">        mHandler.sendMessage(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        mHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用mHandler.removeCallbacksAndMessages(null);移除消息队列中所有消息和所有Runnable,当然也可以使用mHandler.removeCallbacks()或mHandler.removeMessages();来一出指定的Runnable和Message。</p>
<h3 id="在简书上看到的比较好理解的写法："><a href="#在简书上看到的比较好理解的写法：" class="headerlink" title="在简书上看到的比较好理解的写法："></a>在简书上看到的比较好理解的写法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Instances of static inner classes do not hold an implicit</div><div class="line">   * reference to their outer class.</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;SampleActivity&gt; mActivity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(SampleActivity activity)</span> </span>&#123;</div><div class="line">      mActivity = <span class="keyword">new</span> WeakReference&lt;SampleActivity&gt;(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">      SampleActivity activity = mActivity.get();</div><div class="line">      <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MyHandler mHandler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Instances of anonymous classes do not hold an implicit</div><div class="line">   * reference to their outer class when they are "static".</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Runnable sRunnable = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">    <span class="comment">// Post a message and delay its execution for 10 minutes.</span></div><div class="line">    mHandler.postDelayed(sRunnable, <span class="number">1000</span> * <span class="number">60</span> * <span class="number">10</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Go back to the previous Activity.</span></div><div class="line">    finish();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="4-线程造成的内存泄漏"><a href="#4-线程造成的内存泄漏" class="headerlink" title="4.线程造成的内存泄漏"></a>4.线程造成的内存泄漏</h2><p>对于线程造成的内存泄漏也比较常见，如下两个示例：<br>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//——————test1</span></div><div class="line">        <span class="keyword">new</span> AsyncTask&lt;Void, Void, Void&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">                SystemClock.sleep(<span class="number">10000</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;.execute();</div><div class="line"><span class="comment">//——————test2</span></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                SystemClock.sleep(<span class="number">10000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div></pre></td></tr></table></figure></p>
<h3 id="分析：-3"><a href="#分析：-3" class="headerlink" title="分析："></a>分析：</h3><p>上面的异步任务和Runnable都是一个匿名内部类， 因此他们对当前Activity都有一个隐式引用。<strong><em>如果Activity在销毁之前，任务还未完成，那么将导致Activity的内存无法回收，造成内存泄漏</em></strong>，正确的做法还是使用静态内部类的方式，</p>
<h3 id="正确做法：-1"><a href="#正确做法：-1" class="headerlink" title="正确做法："></a>正确做法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">private</span> WeakReference&lt;Context&gt; weakReference;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyAsyncTask</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(context);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">            SystemClock.sleep(<span class="number">10000</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onPostExecute(aVoid);</div><div class="line">            MainActivity activity = (MainActivity) weakReference.get();</div><div class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//...</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        SystemClock.sleep(<span class="number">10000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//——————</span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable()).start();</div><div class="line"><span class="keyword">new</span> MyAsyncTask(<span class="keyword">this</span>).execute();</div></pre></td></tr></table></figure>
<p>这就避免了Activity的内存资源泄漏，当然在Activity销毁的时候也应该取消相应的任务AsyncTask::cancel()，避免任务在后台执行浪费资源。</p>
<hr>
<h2 id="5-资源未关闭造成的内存泄漏"><a href="#5-资源未关闭造成的内存泄漏" class="headerlink" title="5.资源未关闭造成的内存泄漏"></a>5.资源未关闭造成的内存泄漏</h2><p>对于使用了BroadcastReceiver, ContentObserver, File, Cursor, Stream, Bitmap等资源的使用，应该在Activity被销毁时及时关闭或者注销，否则这些资源将不会被回收，造成内存泄露。</p>
<hr>
<h2 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a><strong><em>一些建议</em></strong></h2><p>1.对于生命周期比Activity长的对象如果需要应该使用ApplicationContext.<br>2.在涉及到Context时先考虑ApplicationContext，当然他不是万能的，对于有些地方则必须使用ActivityContext，对于Application，Service,Activity三者的Context的应用场景如下：<br><img src="http://img.blog.csdn.net/20151123144226349" alt="应用场景"></p>
<p><strong><em>其中</em></strong>：NO1表示Application和Service可以启动一个Activity，不过需要创建一个新的Task任务队列。而对于Dialog而言，只有Activity中才能创建</p>
<p>3.对于需要在静态内部类中使用非静态外部成员变量（如Context，View），可以在静态内部类中使用弱引用来引用外部类的变量来避免内存泄漏。<br>4.对于生命周期比Activity长的内部类对象，并且内部来使用了外部类的成员变量，可以这样避免内存泄漏：</p>
<blockquote>
<p><em>将内部类改为静态内部类
</em>静态内部类中使用弱引用来引用外部类的成员变量</p>
</blockquote>
<p>5.对于不在需要使用的对象，显示的将其赋值为NULL，比如使用完Bitmap后县调用recycle(),在赋值为NULL。<br>6.保持对对象生命周期的敏感，特别注意单例，静态对象，全局性集合等的生命周期。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/xitu/gold-miner/blob/master/TODO/Eight-Ways-Your-Android-App-Can-Leak-Memory.md&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android面试" scheme="https://github.com/iBotasky/tags/Android%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Mac环境下面的配置流程</title>
    <link href="https://github.com/iBotasky/2017/02/04/AndroidStudio-Mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%9D%A2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/"/>
    <id>https://github.com/iBotasky/2017/02/04/AndroidStudio-Mac环境下面的配置流程/</id>
    <published>2017-02-04T06:29:58.000Z</published>
    <updated>2017-02-04T06:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio配置<br><a id="more"></a></p>
<h3 id="0-到Google中国开发者网站下载最新的AndroidStudio"><a href="#0-到Google中国开发者网站下载最新的AndroidStudio" class="headerlink" title="0.到Google中国开发者网站下载最新的AndroidStudio"></a>0.到<a href="https://developer.android.google.cn/index.html" target="_blank" rel="external">Google中国开发者网站</a>下载最新的AndroidStudio</h3><h3 id="1-下载jdk-是jdk不是jre"><a href="#1-下载jdk-是jdk不是jre" class="headerlink" title="1.下载jdk 是jdk不是jre"></a>1.下载jdk 是jdk不是jre</h3><h3 id="2-导入项目可能需要下载新的gradle，会很慢，需要杀死AndroidStudio，然后在命令行键入-gradlew-clean会重新下载gradle，然后在打开AndroidStudio，重新载入项目。"><a href="#2-导入项目可能需要下载新的gradle，会很慢，需要杀死AndroidStudio，然后在命令行键入-gradlew-clean会重新下载gradle，然后在打开AndroidStudio，重新载入项目。" class="headerlink" title="2.导入项目可能需要下载新的gradle，会很慢，需要杀死AndroidStudio，然后在命令行键入  ./gradlew clean会重新下载gradle，然后在打开AndroidStudio，重新载入项目。"></a>2.导入项目可能需要下载新的gradle，会很慢，需要杀死AndroidStudio，然后在命令行键入  <code>./gradlew clean</code>会重新下载gradle，然后在打开AndroidStudio，重新载入项目。</h3><h3 id="3-点击SDK的按钮，需要下载ndk就在SDK-Tools上面选择，查找然后装NDK。"><a href="#3-点击SDK的按钮，需要下载ndk就在SDK-Tools上面选择，查找然后装NDK。" class="headerlink" title="3.点击SDK的按钮，需要下载ndk就在SDK Tools上面选择，查找然后装NDK。"></a>3.点击SDK的按钮，需要下载ndk就在SDK Tools上面选择，查找然后装NDK。</h3><h3 id="3-关于Android安装谷歌"><a href="#3-关于Android安装谷歌" class="headerlink" title="3.关于Android安装谷歌"></a>3.关于Android安装谷歌</h3><p>0.去应用市场查找<code>谷歌服务框架</code>的应用然后安装。<br>1.翻墙</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Studio配置&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://github.com/iBotasky/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java内存区域与Java垃圾回收</title>
    <link href="https://github.com/iBotasky/2017/02/04/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8EJava%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>https://github.com/iBotasky/2017/02/04/Java内存区域与Java垃圾回收/</id>
    <published>2017-02-04T06:25:49.000Z</published>
    <updated>2017-02-04T07:04:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>阐述Java内存区域与Java回收机制的关联</p>
<a id="more"></a>
<p><a href="http://www.cnblogs.com/kkcheng/archive/2011/02/25/1964521.html" target="_blank" rel="external">原文地址</a><br><a href="http://www.cnblogs.com/zhguang/p/3257367.html" target="_blank" rel="external">JavaGC与内存区域</a></p>
<hr>
<h2 id="Java内存区域"><a href="#Java内存区域" class="headerlink" title="Java内存区域"></a>Java内存区域</h2><h3 id="1-JVM管理的内存区域"><a href="#1-JVM管理的内存区域" class="headerlink" title="1.JVM管理的内存区域"></a>1.JVM管理的内存区域</h3><p><img src="http://www.2cto.com/uploadfile/Collfiles/20161118/20161118081416891.jpg" alt=""></p>
<h4 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1.程序计数器"></a>1.程序计数器</h4><p>程序计数器是一个比较小的内存区域，用于指示当前线程所执行的字节码执行到了第几行。（线程私有）不存在内存溢出的情况，是JVM中唯一一个没有定义OOM的区域。<br>线程私有</p>
<h4 id="2-JVM-Stack-虚拟机栈"><a href="#2-JVM-Stack-虚拟机栈" class="headerlink" title="2.JVM Stack 虚拟机栈"></a>2.JVM Stack 虚拟机栈</h4><p>一个线程每个方法执行的同时，都会创建一个栈帧（Stack Frame），栈帧中存储局部变量表，操作站，动态链接，方法出口等，当方法被调用时，栈帧在JVM中入栈，当方法执行完成，栈帧出栈。<br>局部变量表中存储着方法相关局部变量，包括基本数据类型，对象的引用，返回地址等。Java虚拟机允许动态扩展栈的大小，所以线程一直申请栈，知道内存不足，抛出OOM。<br>每个线程对应一个JVM Stack，所以也是线程私有。</p>
<h4 id="3-Native-Method-Stack-本地方法栈"><a href="#3-Native-Method-Stack-本地方法栈" class="headerlink" title="3.Native Method Stack 本地方法栈"></a>3.Native Method Stack 本地方法栈</h4><p>本地方法栈在作用，运行机制，异常类型等方面都与虚拟机栈相同，唯一的区别是：虚拟机栈是执行Java方法的，而本地方法栈是用来执行native方法的，在很多虚拟机中（如Sun的JDK默认的HotSpot虚拟机），会将本地方法栈与虚拟机栈放在一起使用。<br>本地方法栈也是线程私有的。</p>
<h4 id="4-Heap-堆区"><a href="#4-Heap-堆区" class="headerlink" title="4.Heap 堆区"></a>4.Heap 堆区</h4><p>Heap 是Java GC机制最重要的区域，没有之一。在JVM管理的内存中，堆区是最大的一块，堆区也是Java GC机制所管理的主要区域。<strong><em>堆区所有线程共享</em></strong>，在虚拟机启动时创建。<strong><em>堆区的纯在是为了存储对象实例</em></strong>。<br>堆内存需要在逻辑上是连续的，物理上不需要，并且可扩展，如果在执行垃圾回收之后仍没有足够内存分配就会OOM。</p>
<h4 id="5-Method-Area-方法区"><a href="#5-Method-Area-方法区" class="headerlink" title="5.Method Area 方法区"></a>5.Method Area 方法区</h4><p><strong><em>方法区并不是堆区。</em></strong><br><strong><em>方法区是各个线程共享的，用于存储已经被虚拟机加载的类信息（加载类的信息，方法、接口、field等），final常量，静态变量等</em></strong>。<br>方法区可以选择性做GC，一般方法区上执行GC很少，因此常被称为永久代。也会抛出OOM。</p>
<hr>
<h2 id="Java的对象访问方式"><a href="#Java的对象访问方式" class="headerlink" title="Java的对象访问方式"></a>Java的对象访问方式</h2><p>一般来说，一个Java对象的引用访问涉及到3个区域内存区域：JVM栈， 堆区，方法区</p>
<pre><code>Object object = new Object()
</code></pre><blockquote>
<p><em>Object object表示一个本地引用，存储在JVM栈的本地变量表中，表示一个reference类型数据
</em>new Object()表示作为实例存储在堆中<br>*堆中的实例还记录了Object类型信息的地址，指向方法区中存储的类的信息</p>
</blockquote>
<p>目前有两种主流访问方式<br>1.通过句柄访问<br><img src="http://images.cnitblog.com/blog/406312/201309/21174354-8e55a4e6b6284153b8ac40cfeab3062d.png" alt=""></p>
<p>通过句柄访问的实现方式中，JVM堆中会专门有一块区域用来作为句柄池，存储相关句柄所执行的实例数据地址（包括在堆中地址和在方法区中的地址）。这种实现方法由于用句柄表示地址，因此十分稳定。</p>
<p>2.通过直接指针访问<br><img src="http://images.cnitblog.com/blog/406312/201309/21174413-e7b4a7cdec984c2881a56ad776d54354.png" alt=""></p>
<p>通过直接指针访问的方式中，reference中存储的就是对象在堆中的实际地址，在堆中存储的对象信息中包含了在方法区中的相应类型数据。这种方法最大的优势是速度快，在HotSpot虚拟机中用的就是这种方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阐述Java内存区域与Java回收机制的关联&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://github.com/iBotasky/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java垃圾回收机制</title>
    <link href="https://github.com/iBotasky/2017/02/04/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://github.com/iBotasky/2017/02/04/Java垃圾回收机制/</id>
    <published>2017-02-04T06:23:49.000Z</published>
    <updated>2017-02-04T07:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>详细阐述Java垃圾回收机制</p>
<a id="more"></a>
<p><strong><em>开投注：JAVA的GC主要区域是堆区。JVM有堆、栈、方法区，详情参考基础另一篇文章</em></strong></p>
<p>##垃圾回收的意义</p>
<p>垃圾回收可以有效的防止内存泄露，有效的使用空闲的内存。<br>内存泄露：内存使用完后没有进行回收，Java的内存泄漏表现为一个内存对象的生命周期超出了程序需要他的时间长度，也叫“对象游离”。</p>
<p>PS: <a href="https://github.com/xitu/gold-miner/blob/master/TODO/Eight-Ways-Your-Android-App-Can-Leak-Memory.md">关于Android常见的内存泄漏</a></p>
<hr>
<h2 id="垃圾回收机制的算法"><a href="#垃圾回收机制的算法" class="headerlink" title="垃圾回收机制的算法"></a>垃圾回收机制的算法</h2><h3 id="1-引用计数器"><a href="#1-引用计数器" class="headerlink" title="1.引用计数器"></a><strong>1.引用计数器</strong></h3><p>1.1算法分析<br>    垃圾收集器早起的策略，堆中每个对象实例都有一个引用计数，当一个对象被创建时，并且该对象实例被赋值给另一个变量，该变量计数设置为1， 当任何其他变量被赋值为这个对象的引用时，计数加1，例如（<code>a = b; //b的引用计数+1</code>）；但是当一个对象的某个引用超过了生命周期或者被设置为一个新值时，对象实例的引用计数器-1。任何引用计数器为0的对象实例可以被当做垃圾收集，例如（a引用b，a=c,b的引用计数器-1）；当一个对象实例被垃圾收集时，他引用的任何对象实例的引用计数器-1，例如（a引用b,a被回收，b的计数器-1）。<br>1.2优缺点<br>优点：</p>
<blockquote>
<ul>
<li>引用计数收集器可以很快执行，交织在程序运行中，对程序不需要长时间被打断的实现环境比较有利。</li>
</ul>
</blockquote>
<p>缺点:</p>
<blockquote>
<ul>
<li><strong><em>无法检测出循环引用</em></strong>。 如父对象有一个子对象的引用，子对象反过来引用父对象。这样，他们的引用计数永远不肯能为0。</li>
</ul>
</blockquote>
<p>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buidDog</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    Dog newDog = <span class="keyword">new</span> Dog();</div><div class="line">    Tail newTail = <span class="keyword">new</span> Tail();</div><div class="line">    newDog.tail = newTail;</div><div class="line">    newTail.dog = newDog;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>在上面，newTail中拿着对newDog的引用，newDog反过来拿着newTail的引用，如果newDog要被回收，前提是newTail要先被回收，这样才能释放newDog对象。反过来，newTail要被回收前提是释放newDog对象。当bulidDog()方法执行完后，引用计数器无法回收这两个对象。</em></strong></p>
<hr>
<h3 id="2-标记-清除算法"><a href="#2-标记-清除算法" class="headerlink" title="2.标记-清除算法"></a><strong>2.标记-清除算法</strong></h3><p>2.1 根搜索算法<br><img src="http://images0.cnblogs.com/blog2015/694841/201506/141050566294022.jpg" alt="根搜索算法"><br>根搜索算法是从离散数学中的图论引入的， 程序把所有的引用看做一张图， 从一个节点GC ROOT开始，寻找对应的引用节点，找到这个节点后，继续寻找这个节点的引用节点，当所有的引用节点寻找完毕后，剩余的节点则被认为是没有被引用到的节点，即无用的节点。</p>
<p>Java中可被作为GC ROOT的对象有：</p>
<blockquote>
<ul>
<li>虚拟机栈中引用的对象（本地变量表）</li>
<li>方法区中静态属性引用的对象</li>
<li>方法区中常量的引用对象 </li>
<li>本地方法栈中引用的对象（Naive对象）</li>
</ul>
</blockquote>
<p>2.2 标记-清除算法的示意图<br><img src="http://images0.cnblogs.com/blog2015/694841/201506/141048430359736.jpg" alt="标记清除算法"></p>
<p>2.3 标记清除算法分析<br>    标记-清除算法采用从根集合进行扫描，对存活的对象进行标记，标记完毕后再扫描整个空间中未被标记的对象，进行回收， 如上图所示， 标记清除算法不需要进行对象的移动，并且仅对不存活的对象进行处理， 在存活对象比较多的情况下极为高效，但由于标记清除算法直接回收不存活的对象，会造成内存碎片。</p>
<hr>
<h3 id="3-标记-整理算法"><a href="#3-标记-整理算法" class="headerlink" title="3.标记-整理算法"></a><strong>3.标记-整理算法</strong></h3><p>3.1 标记整理算法示意图<br><img src="http://images0.cnblogs.com/blog2015/694841/201506/141120037076681.jpg" alt="标记整理算法"></p>
<p>3.2 标记整理算法分析<br>    标记整理算法采用标记清除算法的方式进行对象的标记，但在清除时不同，再回收不存活的对象占用的空间后，会将所有的存活对象往左端空间移动， 并更新对应的指针。标记整理算法是在标记清除的基础上，又进行了对象的移动，因此成本更高，但是解决了内存碎片的问题。在实现上，一般增加句柄和句柄表。</p>
<hr>
<h3 id="4-Copying算法"><a href="#4-Copying算法" class="headerlink" title="4.Copying算法"></a><strong>4.Copying算法</strong></h3><p>4.1 Copying算法示意图<br><img src="http://images0.cnblogs.com/blog2015/694841/201506/141112115351233.jpg" alt="Copying算法"></p>
<p>4.2 Copying算法分析<br>    Copying算法是为了克服句柄的开销和解决堆碎片的垃圾回收。它开始时把堆分为一个对象面和多个空闲面，程序从对象面为对象分配空间，当对象面满了，基于copying算法的垃圾收集就从根集扫描活动对象，并将每个活动对象复制到空闲面，这样空闲变成了对象面，原来的对象面变成了空闲面，程序会在新的对象面中分配内存。一种典型的基于copying算法的垃圾回收是stop-and-copy算法，他将堆分成对象面和空闲区域面，在对象面与空闲区域面的切换过程中，程序暂停执行。</p>
<hr>
<h3 id="5-分代收集器"><a href="#5-分代收集器" class="headerlink" title="5.分代收集器"></a><strong>5.分代收集器</strong></h3><p>5.1 分代收集器示意图<br><img src="http://images0.cnblogs.com/blog2015/694841/201506/141332429573819.jpg" alt="分代收集器"></p>
<p>5.2 分代收集器分析<br>分代的垃圾回收策略，是基于这样一个事实：<strong><em>不同的对象的生命周期是不一样的。</em></strong>因此，不同生命周期的对象可以采取不同的回收算法，以便提高回收效率。</p>
<p>5.2.1 年轻代（Young Generation）<br>1.<strong><em>所有的新生成的对象首先都是放在新生代。</em></strong>年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。<br>2.新生代的内存按照<strong><em>8:1:1</em></strong>的比例分为一个Eden区和两个Survivor(survivor0,survivor1)区。大部分对象在Eden区生成。回收时先将Eden区存活的对象复制到一个survivor0区，然后清空eden，当这个survivor0区也存满了，则将eden与survivor0存活的对象复制到另一个survivor1，然后清空eden与survivor0，此时survivor0是空的，然后将survivor0与survivor1交换，即保持survivor1为空，如此往复。<br>3.当survivor1区域不足以存放eden和survivor0的存活对象时，就将存活的对象放到老年代。若是老年代也满了就会触发一次Full GC, 也就是新生代，旧生代都进行回收。<br>4.新生代的GC也叫作Minor GC，Minor GC发生的频率比较高（不一定等Eden满了才触发）。</p>
<p>5.2.2 老年代（Old Generation）<br>1.在年轻代经历了N次回收还存活的对象会被放到老年代。因此，可以认为老年代中存放的都是一些生命周期较长的对象。<br>2.<strong><em>内存也比新生代大很多（大概是1：2）</em></strong>，当老年代内存满了会触发Full GC， Full Gc发生频率比较低，老年代存活时间比较长，存活率标记高。</p>
<p>5.2.3 持久代（Permanent Generation）<br><strong><em>用于存放静态文件，如Java类、方法等。</em></strong></p>
<hr>
<h2 id="GC（垃圾收集器）"><a href="#GC（垃圾收集器）" class="headerlink" title="GC（垃圾收集器）"></a>GC（垃圾收集器）</h2><h3 id="新生代收集器："><a href="#新生代收集器：" class="headerlink" title="新生代收集器："></a>新生代收集器：</h3><blockquote>
<p><em>Serial收集器（复制算法):单线程收集器，标记和清理都是单线程，优点是简单高效。
</em>ParNew收集器(停止-复制算法):Serial收集器的多线程版本,在多核CPU环境下有着比Serial更好的表现。<br>*Parallel Scavenge收集器(停止-复制算法):并行收集器，追求高吞吐量，高效利用CPU。吞吐量一般为99%， 吞吐量= 用户线程时间/(用户线程时间+GC线程时间)。适合后台应用等对交互相应要求不高的场景。</p>
</blockquote>
<h3 id="老年代收集器："><a href="#老年代收集器：" class="headerlink" title="老年代收集器："></a>老年代收集器：</h3><blockquote>
<p><em>Serial Old收集器(标记-整理算法):老年代单线程收集器，Serial收集器的老年代版本。
</em>Parallel Old收集器(停止-复制算法):Parallel Scavenge收集器的老年代版本，并行收集器，吞吐量优先<br>*CMS(Concurrent Mark Sweep)收集器（标记-清理算法）:高并发、低停顿，追求最短GC回收停顿时间，cpu占用比较高，响应时间快，停顿时间短，多核cpu 追求高响应时间的选择</p>
</blockquote>
<hr>
<h2 id="GC的执行"><a href="#GC的执行" class="headerlink" title="GC的执行"></a>GC的执行</h2><p>系统空闲的时候会进行GC<br>由于对象进行了分代处理，因此垃圾回收区域、时间也不一样。GC有两种类型：Scavenge GC和Full GC。</p>
<h3 id="Scavenge-GC"><a href="#Scavenge-GC" class="headerlink" title="Scavenge GC"></a>Scavenge GC</h3><p>一般情况下，当新对象生成，并且在Eden区申请空间失败时，就会触发Scavenge Gc,对Eden区进行GC，然后整理Survivor区。因为Eden区不会分配很大，所以Eden的GC会频繁进行。因而，一般在这里需要使用速度快，效率高的算法，使Eden尽快空闲。</p>
<h3 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h3><p>对整个堆进行整理，包括Young，Old，Perm。因为工作量大，所以更加耗时，要尽可能减少FUll Gc次数。触发Full GC的有下面的原因：<br>1.老年代被写满<br>2.持久代被写满<br>3.System.gc()被显示调用<br>4.上一次GC后Heap的各域分配策略动态变化</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;详细阐述Java垃圾回收机制&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="https://github.com/iBotasky/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2</title>
    <link href="https://github.com/iBotasky/2017/02/04/Dagger2/"/>
    <id>https://github.com/iBotasky/2017/02/04/Dagger2/</id>
    <published>2017-02-04T06:19:09.000Z</published>
    <updated>2017-02-04T07:03:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍Dagger2</p>
<a id="more"></a>
<h2 id="1-基础知识点"><a href="#1-基础知识点" class="headerlink" title="1.基础知识点"></a>1.基础知识点</h2><blockquote>
<ul>
<li>依赖注入(Dependency Injection)</li>
<li>Java的注解 (Annotation)</li>
</ul>
</blockquote>
<h3 id="1-1-依赖注入-DI"><a href="#1-1-依赖注入-DI" class="headerlink" title="1.1 依赖注入 DI"></a>1.1 依赖注入 DI</h3><p>目标类（需要进行依赖初始化的类）中所依赖的<strong><em>其他类</em></strong>的初始化过程，不是通过手动编码方式创建的类，通过技术手段，把<strong><em>其他类已经初始化好的实例</em></strong>自动注入到目标类中。<br><img src="http://upload-images.jianshu.io/upload_images/1504173-d5f60535cc77f17d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="依赖注入图解"></p>
<h3 id="1-2-注解-Annotation"><a href="#1-2-注解-Annotation" class="headerlink" title="1.2 注解 Annotation"></a>1.2 注解 Annotation</h3><p>它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。<br>Annotation其实是一种接口。通过Java的反射机制相关的API来访问annotation信息。相关类（框架或工具中的类）根据这些信息来决定如何使用该程序元素或改变它们的行为。<br>Annotation是不会影响程序代码的执行，无论annotation怎么变化，代码都始终如一地执行。</p>
<hr>
<h2 id="2-Dagger2注解"><a href="#2-Dagger2注解" class="headerlink" title="2.Dagger2注解"></a>2.Dagger2注解</h2><h3 id="2-1-Inject"><a href="#2-1-Inject" class="headerlink" title="2.1 @Inject"></a>2.1 @Inject</h3><p>Inject主要有两个作用，一个是使用在构造函数上，通过标记构造函数让Dagger2来使用（Dagger2通过Inject标记可以在需要这个类实例的时候来找到这个构造函数并把相关实例new出来）从而提供依赖，另一个作用就是标记在需要依赖的变量让Dagger2为其提供依赖。</p>
<h3 id="2-2-Provider"><a href="#2-2-Provider" class="headerlink" title="2.2 @Provider"></a>2.2 @Provider</h3><p>用Provide来标注一个方法，该方法可以在需要提供依赖时被调用，从而把预先提供好的对象当做依赖给标注了@Inject的变量赋值。provide主要用于标注Module里的方法</p>
<h3 id="2-3-Module"><a href="#2-3-Module" class="headerlink" title="2.3 @Module"></a>2.3 @Module</h3><p>用Module标注的类是专门用来提供依赖的。有的人可能有些疑惑，看了上面的@Inject，需要在构造函数上标记才能提供依赖，那么如果我们需要提供的类构造函数无法修改怎么办，比如一些jar包里的类，我们无法修改源码。这时候就需要使用Module了。Module可以给不能修改源码的类提供依赖，当然，能用Inject标注的通过Module也可以提供依赖。</p>
<h3 id="2-4-Component"><a href="#2-4-Component" class="headerlink" title="2.4 @Component"></a>2.4 @Component</h3><p>Component一般用来标注接口,Component也叫组件，方法中有dependenies，跟modules两个参数，被标注了Component的接口在编译时会产生相应的类的实例来作为提供依赖方和需要依赖方之间的桥梁，把相关依赖注入到其中。</p>
<p><img src="https://user-gold-cdn.xitu.io/2016/11/29/f0cfbf0aaa8a48fd5c889a7d0aee21e8.jpg" alt="示例图"></p>
<h3 id="2-5-提供依赖的流程"><a href="#2-5-提供依赖的流程" class="headerlink" title="2.5 提供依赖的流程"></a>2.5 提供依赖的流程</h3><p>提供依赖有两种方式：</p>
<blockquote>
<ul>
<li>1.注解了@Inject的构造函数</li>
<li>2.注解了@Module 类中的@Provider 的方法</li>
</ul>
</blockquote>
<p>所以在依赖的选择上就有一个流程。</p>
<p>Dagger2选择依赖的流程：</p>
<blockquote>
<ul>
<li>步骤1：查找Module中是否存在创建该类的方法。</li>
<li>步骤2：若存在创建类方法，查看该方法是否存在参数</li>
<li>步骤2.1：若存在参数，则按从步骤1开始依次初始化每个参数</li>
<li>步骤2.2：若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</li>
<li>步骤3：若不存在创建类方法，则查找Inject注解的构造函数，看构造函数是否存在参数</li>
<li>步骤3.1：若存在参数，则从步骤1开始依次初始化每个参数</li>
<li>步骤3.2：若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</li>
</ul>
</blockquote>
<hr>
<h2 id="3-两个比较难理解的注解：-Scope-Qulifiter"><a href="#3-两个比较难理解的注解：-Scope-Qulifiter" class="headerlink" title="3. 两个比较难理解的注解：@Scope @Qulifiter"></a>3. 两个比较难理解的注解：@Scope @Qulifiter</h2><h3 id="3-1-Qulifiter"><a href="#3-1-Qulifiter" class="headerlink" title="3.1 @Qulifiter"></a>3.1 @Qulifiter</h3><p><strong><em>依赖迷失</em></strong>：如果有Module中有两个一样的返回类型，该用谁呢。我们把这种场景叫做依赖迷失。<br>@Qulifiter:通过自定义Qulifier，可以告诉Dagger2去需找具体的依赖提供者。</p>
<h3 id="3-2-Qulifiter使用"><a href="#3-2-Qulifiter使用" class="headerlink" title="3.2 @Qulifiter使用"></a>3.2 @Qulifiter使用</h3><h4 id="1-创建自定义注解"><a href="#1-创建自定义注解" class="headerlink" title="1.创建自定义注解:"></a>1.创建自定义注解:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Qulifiter</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> A &#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@Qualifier</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> B &#123;&#125;</div></pre></td></tr></table></figure>
<p>通过@Qulifiter创建了两个自定义注解，@A 与 @B</p>
<h4 id="2-在Module中使用-A-与-B"><a href="#2-在Module中使用-A-与-B" class="headerlink" title="2.在Module中使用@A 与 @B:"></a>2.在Module中使用@A 与 @B:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleModule</span> </span>&#123;</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@A</span></div><div class="line">    <span class="function">Cooker <span class="title">provideCookerA</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cooker(<span class="string">"James"</span>,<span class="string">"Espresso"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@B</span></div><div class="line">    <span class="function">Cooker <span class="title">provideCookerB</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cooker(<span class="string">"Karry"</span>,<span class="string">"Machiato"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-具体使用："><a href="#3-具体使用：" class="headerlink" title="3.具体使用："></a>3.具体使用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComplexMaker</span> <span class="keyword">implements</span> <span class="title">CoffeeMaker</span> </span>&#123;</div><div class="line">    Cooker cookerA;</div><div class="line">    Cooker cookerB;</div><div class="line">    <span class="comment">//通过自定义的Qulifiter注解标记对应的Provider提供的依赖</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComplexMaker</span><span class="params">(@A Cooker cookerA,@B Cooker cookerB)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.cookerA = cookerA;</div><div class="line">        <span class="keyword">this</span>.cookerB = cookerB;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeCoffee</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cooker.make();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-调用CookerA与CookerB"><a href="#4-调用CookerA与CookerB" class="headerlink" title="4.调用CookerA与CookerB"></a>4.调用CookerA与CookerB</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookerA.make();<span class="comment">//James make Espresso</span></div><div class="line">cookerB.make();<span class="comment">//Karry make Machiato</span></div></pre></td></tr></table></figure>
<h3 id="3-3-Scope"><a href="#3-3-Scope" class="headerlink" title="3.3 @Scope"></a>3.3 @Scope</h3><p>Scope难理解，通过例子来解释：</p>
<p>####1.定义一个Scope<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PerActivity &#123;&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-把定义的PerActivity放到Module"><a href="#2-把定义的PerActivity放到Module" class="headerlink" title="2.把定义的PerActivity放到Module"></a>2.把定义的PerActivity放到Module</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">CoffeeShop <span class="title">provideCoffeeShop</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> CoffeeShop.getInstance();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@PerActivity</span></div><div class="line">    <span class="function">CookerFactory <span class="title">provideCookerFactory</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CookerFactory();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">CookerFactoryMulty <span class="title">provideCookerFactoryMulty</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CookerFactoryMulty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-这个Module提供了CoffeeShop，CookerFactory和CookerFacotryMulty的依赖"><a href="#3-这个Module提供了CoffeeShop，CookerFactory和CookerFacotryMulty的依赖" class="headerlink" title="3.这个Module提供了CoffeeShop，CookerFactory和CookerFacotryMulty的依赖"></a>3.这个Module提供了CoffeeShop，CookerFactory和CookerFacotryMulty的依赖</h4><p><code>CoffShop.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeShop</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CoffeeShop INSTANCE;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CoffeeShop</span><span class="params">()</span></span>&#123;</div><div class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"CoffeeShop New Instance"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CoffeeShop <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)&#123;</div><div class="line">            INSTANCE = <span class="keyword">new</span> CoffeeShop();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>CookerFactory.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookerFactory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CookerFactory</span><span class="params">()</span></span>&#123;</div><div class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"CookerFactory New Instance"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>CookerFactoryMulty.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookerFactoryMulty</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CookerFactoryMulty</span><span class="params">()</span></span>&#123;</div><div class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"CookerFactoryMulty New Instance"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们在这三个对象的构造方法里都加了Log，当他们的实例产生时能看到相关的Log，再看我们用到的地方，在MainActivity里给每个类都写两个变量.</p>
<h4 id="4-MainActivity中："><a href="#4-MainActivity中：" class="headerlink" title="4.MainActivity中："></a>4.MainActivity中：</h4><p><code>MainActivity.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    ActivityComponent activityComponent;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    CoffeeShop coffeeShop1;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    CoffeeShop coffeeShop2;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    CookerFactory cookerFactory1;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    CookerFactory cookerFactory2;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    CookerFactoryMulty cookerFactoryMulty1;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    CookerFactoryMulty cookerFactoryMulty2;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        activityComponent = DaggerActivityComponent.builder()</div><div class="line">                .activityModule(provideModule())</div><div class="line">                .applicationComponent(MyApplication.getComponent()).build();</div><div class="line">        activityComponent.inject(<span class="keyword">this</span>);</div><div class="line">        coffeeFactory.run();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> ActivityModule <span class="title">provideModule</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActivityModule();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="5-运行结果"><a href="#5-运行结果" class="headerlink" title="5.运行结果"></a>5.运行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">07-11 16:53:27.978    1927-1927/? D/TAG﹕ CoffeeShop New Instance</div><div class="line">07-11 16:53:27.978    1927-1927/? D/TAG﹕ CookerFactory New Instance</div><div class="line">07-11 16:53:27.978    1927-1927/? D/TAG﹕ CookerFactoryMulty New Instance</div><div class="line">07-11 16:53:27.978    1927-1927/? D/TAG﹕ CookerFactoryMulty New Instance</div></pre></td></tr></table></figure>
<p><strong><em>从Log中可以看到，CoffeeShop和CookerFactory的类都只new过一次，而CookerFactoryMulty被new了两次 再回头看我们的Module，其中CoffeeShop的依赖是通过单例模式提供的，只打一条Log很容易理解，而CookerFactory相对于CookerFactoryMulty来说内容几乎是一模一样，只多加一个@PerActivity的注解，但却比它少打了一次Log，这是为什么呢。哈哈，客官们，这就是@Scope神秘的地方，他通过自定义@Scope注解提供了单例，正如上面的CookerFactory，虽然并未用单例来提供依赖，但却和用单例提供依赖的CoffeeShop一样，两个对象的实例都是同一个，这就是Scope的作用，提供局部单例的功能，局部范围是啥，那就是它生命周期范围内。</em></strong></p>
<hr>
<h2 id="4-学习过程中遇到的一些坑"><a href="#4-学习过程中遇到的一些坑" class="headerlink" title="4.学习过程中遇到的一些坑"></a>4.学习过程中遇到的一些坑</h2><h3 id="4-1-代码："><a href="#4-1-代码：" class="headerlink" title="4.1 代码："></a>4.1 代码：</h3><h4 id="1-AppModule-java"><a href="#1-AppModule-java" class="headerlink" title="1.AppModule.java"></a>1.<code>AppModule.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span>  <span class="keyword">final</span> MyApplication application;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(MyApplication application)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.application = application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@ForApplication</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Application <span class="title">provideApplication</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@ForApplication</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyApplication <span class="title">provideApp</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@ForApplication</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">provideContext</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.application.getApplicationContext();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">provideUser</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"RootUser"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-UserModule-java"><a href="#2-UserModule-java" class="headerlink" title="2.UserModule.java"></a>2.<code>UserModule.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> </span>&#123;</div><div class="line"><span class="comment">//    @Provides</span></div><div class="line"><span class="comment">//    public User provideUser()&#123;</span></div><div class="line"><span class="comment">//        return new User("RootUser");</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"></div><div class="line"><span class="comment">//    @Provides</span></div><div class="line"><span class="comment">//    public User providername(User user)&#123;</span></div><div class="line"><span class="comment">//        return user.getName();</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"></div><div class="line"><span class="comment">//    @Provides</span></div><div class="line"><span class="comment">//    public String provideString(User user)&#123;</span></div><div class="line"><span class="comment">//        return user.getName();</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//    @Provides</span></div><div class="line"><span class="comment">//    public String provideName(MyApplication application)&#123;</span></div><div class="line"><span class="comment">//        Log.e("Name" , " " + application.getPackageName());</span></div><div class="line"><span class="comment">//        return application.getPackageName();</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-RepositoryComponent-java"><a href="#3-RepositoryComponent-java" class="headerlink" title="3.RepositoryComponent.java"></a>3.<code>RepositoryComponent.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules = &#123;AppModule.class, UserModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RepositoryComponent</span> </span>&#123;</div><div class="line">    <span class="comment">//下层的依赖需要用到就要返回 dependenciuce</span></div><div class="line">    <span class="function">User <span class="title">getUser</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@ForApplication</span></div><div class="line">    <span class="function">MyApplication <span class="title">getApplication</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-ActivityComponent-java"><a href="#4-ActivityComponent-java" class="headerlink" title="4.ActivityComponent.java"></a>4.<code>ActivityComponent.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ActivityScope</span></div><div class="line"><span class="meta">@Component</span>(dependencies = RepositoryComponent.class, modules = ActivityModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActivityComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity mainActivity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-2-上面代码解释："><a href="#4-2-上面代码解释：" class="headerlink" title="4.2 上面代码解释："></a>4.2 上面代码解释：</h3><h4 id="1-AppModule与UserModule（UserModule-java是一个例子类，无实际作用）组成一个RepositoryComponent的组件，组件内的Provider可以互相提供依赖，注入实例到同一个组件需要的依赖里面。"><a href="#1-AppModule与UserModule（UserModule-java是一个例子类，无实际作用）组成一个RepositoryComponent的组件，组件内的Provider可以互相提供依赖，注入实例到同一个组件需要的依赖里面。" class="headerlink" title="1.AppModule与UserModule（UserModule.java是一个例子类，无实际作用）组成一个RepositoryComponent的组件，组件内的Provider可以互相提供依赖，注入实例到同一个组件需要的依赖里面。"></a>1.<code>AppModule</code>与<code>UserModule</code>（UserModule.java是一个例子类，无实际作用）组成一个<code>RepositoryComponent</code>的组件，组件内的Provider可以互相提供依赖，注入实例到<em>同一个组件</em>需要的依赖里面。</h4><h4 id="2-ActivityComponent是提供给Activity类的组件，这个组件dependencies-依赖了RepositoryComponent组件，然后加入了ActivityModule。"><a href="#2-ActivityComponent是提供给Activity类的组件，这个组件dependencies-依赖了RepositoryComponent组件，然后加入了ActivityModule。" class="headerlink" title="2.ActivityComponent是提供给Activity类的组件，这个组件dependencies 依赖了RepositoryComponent组件，然后加入了ActivityModule。"></a>2.<code>ActivityComponent</code>是提供给Activity类的组件，这个组件dependencies 依赖了<code>RepositoryComponent</code>组件，然后加入了<code>ActivityModule</code>。</h4><h4 id="3-重点：RepositoryComponent放出了两个方法User-getUser-与-ForApplication-MyApplication-getApplication-，在我看来，这两个方法相当于开放出两个接口，给依赖这个RepositoryComponent组件的下层组件（这里是ActivityComponent）来提供依赖。-例如，-ActivityComponent组件里面需要依赖一个RepositoryComponent中的User，那么RepositoryComponent中就需要定义这个User-getUser-方法。"><a href="#3-重点：RepositoryComponent放出了两个方法User-getUser-与-ForApplication-MyApplication-getApplication-，在我看来，这两个方法相当于开放出两个接口，给依赖这个RepositoryComponent组件的下层组件（这里是ActivityComponent）来提供依赖。-例如，-ActivityComponent组件里面需要依赖一个RepositoryComponent中的User，那么RepositoryComponent中就需要定义这个User-getUser-方法。" class="headerlink" title="3.重点：RepositoryComponent放出了两个方法User getUser();与@ForApplication MyApplication getApplication()，在我看来，这两个方法相当于开放出两个接口，给依赖这个RepositoryComponent组件的下层组件（这里是ActivityComponent）来提供依赖。 例如， ActivityComponent组件里面需要依赖一个RepositoryComponent中的User，那么RepositoryComponent中就需要定义这个User getUser()方法。"></a>3.<em>重点</em>：<code>RepositoryComponent</code>放出了两个方法<code>User getUser();</code>与<code>@ForApplication MyApplication getApplication()</code>，在我看来，这两个方法相当于开放出两个接口，给依赖这个<code>RepositoryComponent</code>组件的下层组件（这里是<code>ActivityComponent</code>）来提供依赖。 例如， <code>ActivityComponent</code>组件里面需要依赖一个<code>RepositoryComponent</code>中的User，那么<code>RepositoryComponent</code>中就需要定义这个<code>User getUser()</code>方法。</h4><p>如果需要开放的依赖有自定义的<code>@Qulifiter</code>注解，那么在开放这个依赖的时候，也要对应加上这个注解，例如<code>@ForApplication MyApplication getAplication()</code>, 对应的在下层依赖需要注入的时候也要带上这个<code>@ForApplication</code>注解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍Dagger2&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android框架" scheme="https://github.com/iBotasky/tags/Android%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Dagger2" scheme="https://github.com/iBotasky/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2-依赖注入</title>
    <link href="https://github.com/iBotasky/2017/02/04/Dagger2-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>https://github.com/iBotasky/2017/02/04/Dagger2-依赖注入/</id>
    <published>2017-02-04T06:16:16.000Z</published>
    <updated>2017-02-04T07:02:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍依赖注入的相关知识<br><a id="more"></a></p>
<h2 id="依赖注入-Dependency-injection"><a href="#依赖注入-Dependency-injection" class="headerlink" title="依赖注入 Dependency injection"></a>依赖注入 Dependency injection</h2><p>依赖注入，就是构建对象并在我们需要时把他们传入。<br>想象有一个简单的类，<code>UserManager</code>, 他依赖<code>UserStore</code>与<code>ApiService</code>。如果没有依赖注入，这个类看起来会是这个样子：<br><code>UserStore</code>和<code>ApiServie</code>两者都是在<code>UserManager</code>中创建和提供的：<br><img src="http://frogermcs.github.io/images/13/user_manager_no_di.png" alt="示意图"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ApiService apiService;</div><div class="line">    <span class="keyword">private</span> UserStore userStore;</div><div class="line"></div><div class="line">    <span class="comment">//No-args constructor. Dependencies are created inside.</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.apiService = <span class="keyword">new</span> ApiSerivce();</div><div class="line">        <span class="keyword">this</span>.userStore = <span class="keyword">new</span> UserStore();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerUser</span><span class="params">()</span> </span>&#123;<span class="comment">/*  */</span>&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> UserManager userManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle b)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(b);</div><div class="line">        <span class="keyword">this</span>.userManager = <span class="keyword">new</span> UserManager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRegisterClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        userManager.registerUser();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码会出现一些问题，想象一下，我们需要改变<code>UserStore</code>的实现，用<code>SharedPreferences</code>来作为他的存储机制，他需要至少一个<code>Context</code>对象来创建实例，所以我们需要通过<code>UserStore</code>的构造函数传入。他意味着，<code>UserManager</code>类中也需要被修改来使用新的<code>UserStore</code>构造器。如果有很多类使用了<code>UserStore</code>，他们需要全部被修改。</p>
<p>但是如果用了依赖注入：<br>他的依赖类是在外面创建和提供的：<br><img src="http://frogermcs.github.io/images/13/user_manager_di.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ApiService apiService;</div><div class="line">    <span class="keyword">private</span> UserStore userStore;</div><div class="line"></div><div class="line">    <span class="comment">//Dependencies are passed as arguments</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserManager</span><span class="params">(ApiService apiService, UserStore userStore)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.apiService = apiService;</div><div class="line">        <span class="keyword">this</span>.userStore = userStore;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerUser</span><span class="params">()</span> </span>&#123;<span class="comment">/*  */</span>&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> UserManager userManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle b)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(b);</div><div class="line">        ApiService api = ApiService.getInstance();</div><div class="line">        UserStore store = UserStore.getInstance();</div><div class="line">        </div><div class="line">        <span class="keyword">this</span>.userManager = <span class="keyword">new</span> UserManager(api, store);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRegisterClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        userManager.registerUser();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在相似的情况下，我们改变<code>UserStore</code>或者<code>ApiService</code>两个依赖的实现方式，我们不需要修改<code>UserManager</code>的代码。两个依赖的对象都是通过外面提供的。</p>
<p>所以使用依赖注入的优势是什么？？？</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><h3 id="构造-使用-的分离"><a href="#构造-使用-的分离" class="headerlink" title="构造/使用 的分离"></a><strong>构造/使用 的分离</strong></h3><p>当我们构造类实例，通常这些对象会在其他地方使用到，多亏这个方法让我们的代码更加模块化，所有依赖都可以很简单的被替换掉，并且不会与我们应用的逻辑产生冲突，想要改变<code>DataBaseUserStore</code>为<code>SharedPrefesUserStore</code>？好的，我们只需要关心公开的API（与<code>DataBaseUserStore</code>相同的）或者实现相同的接口。</p>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>真正的单元测试假设一个类完全可以被隔离进行测试的，不需要了解他的相关依赖。在实践中，基于我们的<code>UserManager</code>类编写一个单元测试类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManagerTests</span> </span>&#123;</div><div class="line"></div><div class="line">    UserManager userManager;</div><div class="line"></div><div class="line">    <span class="meta">@Mock</span></div><div class="line">    ApiService apiServiceMock;</div><div class="line">    <span class="meta">@Mock</span></div><div class="line">    UserStore userStoreMock;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</div><div class="line">        userManager = <span class="keyword">new</span> UserManager(apiServiceMock, userStoreMock);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@After</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//Test our userManager here - all its dependencies are satisfied</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它只能使用DI，多亏<code>UserManger</code>是完全独立于<code>UserStore</code>与<code>ApiService</code>实现的。我们可以提供这些类的Mock，（简单的说Mock是一些拥有相同API的类，它在方法中不做任何事情，并且返回我们期望的值），然后在真实的依赖的实现对<code>UserManager</code>测试隔离。</p>
<h3 id="独立-并行开发"><a href="#独立-并行开发" class="headerlink" title="独立/并行开发"></a>独立/并行开发</h3><p>因为模块化的代码设计（<code>UserStore</code> 的实现可以完全独立与<code>UserManager</code>之外）。这样让程序间的代码更容易分离，（其实就是解耦）。只有<code>UserStore</code>的接口能被其他类调用，（尤其是被<code>UserManager</code>调用的<code>UserStore</code>的public方法）。其余的实现和逻辑可以用单元测试来做测试。</p>
<h2 id="依赖注入的框架"><a href="#依赖注入的框架" class="headerlink" title="依赖注入的框架"></a>依赖注入的框架</h2><p>除了上面的优势之外，依赖注入模式也有一些弊端。一个就是会产生更多的模块代码。想象一个简单的<code>LoginActivity</code>类，他在MVP模式中被实现。这个类看起来就像这样。<br>唯一有问题的部分代码就是<code>LoginPresenter</code>的初始化：<br><img src="http://frogermcs.github.io/images/13/login_activity_diagram.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    LoginActivityPresenter presenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//这边需要把需要依赖的类全部手动先初始化一遍</span></div><div class="line">        OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line">        RestAdapter.Builder builder = <span class="keyword">new</span> RestAdapter.Builder();</div><div class="line">        builder.setClient(<span class="keyword">new</span> OkClient(okHttpClient));</div><div class="line">        RestAdapter restAdapter = builder.build();</div><div class="line">        ApiService apiService = restAdapter.create(ApiService.class);</div><div class="line">        UserManager userManager = UserManager.getInstance(apiService);</div><div class="line">        </div><div class="line">        UserDataStore userDataStore = UserDataStore.getInstance(</div><div class="line">                getSharedPreferences(<span class="string">"prefs"</span>, MODE_PRIVATE)</div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="comment">//Presenter is initialized here</span></div><div class="line">        presenter = <span class="keyword">new</span> LoginActivityPresenter(<span class="keyword">this</span>, userManager, userDataStore);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>他看起来不太友好不是吗？<br>这就是DI框架需要解决的问题，相同功能的代码看起来像这样:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="comment">//通过@Inject标注来获取初始化这个类需要注入的依赖</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    LoginActivityPresenter presenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        </div><div class="line">        <span class="comment">//Satisfy all dependencies requested by @Inject annotation</span></div><div class="line">        getDependenciesGraph().inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单多了对吧！当然，DI框架也不是说不用去创建依赖类的对象实例，这些实例需要我们在一些恰当的地方去初始化和配置。但是这些对象的构建会从使用中分离出来（这个就是DI的准则）。DI框架关心的是怎么把他们联系起来（如何传递对象，并把他们放入到需要的位置）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍依赖注入的相关知识&lt;br&gt;
    
    </summary>
    
    
      <category term="Android框架" scheme="https://github.com/iBotasky/tags/Android%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Dagger2" scheme="https://github.com/iBotasky/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2-Dagger API</title>
    <link href="https://github.com/iBotasky/2017/02/04/Dagger2-Dagger-API/"/>
    <id>https://github.com/iBotasky/2017/02/04/Dagger2-Dagger-API/</id>
    <published>2017-02-04T06:13:41.000Z</published>
    <updated>2017-02-04T07:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍Dagger2的一些基础API</p>
<a id="more"></a>
<h2 id="Dagger2基础"><a href="#Dagger2基础" class="headerlink" title="Dagger2基础"></a>Dagger2基础</h2><p>下面是Dagger2的API：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</div><div class="line">    Class&lt;?&gt;[] modules() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">    Class&lt;?&gt;[] dependencies() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Subcomponent &#123;</div><div class="line">    Class&lt;?&gt;[] modules() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Module &#123;</div><div class="line">    Class&lt;?&gt;[] includes() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Provides &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MapKey &#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">unwrapValue</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lazy</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Dagger2中还有一些其他元素通过Java注解规范来定义:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inject &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scope &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Qualifier &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Inject-annotation"><a href="#Inject-annotation" class="headerlink" title="@Inject annotation"></a>@Inject annotation</h3><p>Dagger中最重要也是第一个注解<code>@Inject</code>，标记那些需要被DI框架所提供的依赖对象。在Dagger2中有3中不同的方式去提供依赖：</p>
<h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivityPresenter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> LoginActivity loginActivity;</div><div class="line">    <span class="keyword">private</span> UserDataStore userDataStore;</div><div class="line">    <span class="keyword">private</span> UserManager userManager;</div><div class="line">    </div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginActivityPresenter</span><span class="params">(LoginActivity loginActivity,</span></span></div><div class="line">                                  UserDataStore userDataStore,</div><div class="line">                                  UserManager userManager) &#123;</div><div class="line">        <span class="keyword">this</span>.loginActivity = loginActivity;</div><div class="line">        <span class="keyword">this</span>.userDataStore = userDataStore;</div><div class="line">        <span class="keyword">this</span>.userManager = userManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有的参数都是通过依赖图来获取。<code>@Inject</code>注解被使用在这个类的构造器使得这个构造器也被列入到依赖图的一部分。也就是当他需要的时候会被注入需要的依赖。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    LoginActivityPresenter presenter;</div><div class="line">    </div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种情况下的限制是，同一个类只能在一个构造函数中使用<code>@Inject</code></p>
<h4 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h4><p>另外一个选项是通过注解<code>@Inject</code>在定义的属性中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    LoginActivityPresenter presenter;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    AnalyticsManager analyticsManager;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(bundle);</div><div class="line">        getAppComponent().inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这种情况下，注入过程需要我们在某个位置手动调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//...</span></div><div class="line">    </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(bundle);</div><div class="line">        getAppComponent().inject(<span class="keyword">this</span>);    <span class="comment">//Requested depenencies are injected in this moment</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在未被调用前，他们的依赖是null值。</p>
<p>属性注入的缺陷是，我们不能用<code>private</code>来标注他们。简单说，生成的代码会直接地调用它们来设置属性，就像这里：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//This class is generated automatically by Dagger 2</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity_MembersInjector</span> <span class="keyword">implements</span> <span class="title">MembersInjector</span>&lt;<span class="title">SplashActivity</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(SplashActivity splashActivity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (splashActivity == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot inject members into a null reference"</span>);</div><div class="line">        &#125;</div><div class="line">        supertypeInjector.injectMembers(splashActivity);</div><div class="line">        splashActivity.presenter = presenterProvider.get();</div><div class="line">        splashActivity.analyticsManager = analyticsManagerProvider.get();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h4><p>最后一种提供依赖的方法是注解<code>@Inject</code>在这个类的public方法上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivityPresenter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> LoginActivity loginActivity;</div><div class="line">    </div><div class="line">    <span class="meta">@Inject</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginActivityPresenter</span><span class="params">(LoginActivity loginActivity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loginActivity = loginActivity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enableWatches</span><span class="params">(Watches watches)</span> </span>&#123;</div><div class="line">        watches.register(<span class="keyword">this</span>);    <span class="comment">//Watches instance required fully constructed LoginActivityPresenter</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法中的参数都是通过依赖图提供。为什么我们需要方法注入？在某些情况下，我们希望传入类的当前实例（this引用）到注入的依赖中。方法注入会在构造器调用后马上被调用，所以我们传入的this是完全已经被构造完成的。</p>
<h3 id="Module-annotation"><a href="#Module-annotation" class="headerlink" title="@Module annotation"></a>@Module annotation</h3><p>这个注解用来标识这个类是用来提供依赖的。Dagger通过它来知道那些地方需要被构建。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubApiModule</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">OkHttpClient <span class="title">provideOkHttpClient</span><span class="params">()</span> </span>&#123;</div><div class="line">        OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line">        okHttpClient.setConnectTimeout(<span class="number">60</span> * <span class="number">1000</span>, TimeUnit.MILLISECONDS);</div><div class="line">        okHttpClient.setReadTimeout(<span class="number">60</span> * <span class="number">1000</span>, TimeUnit.MILLISECONDS);</div><div class="line">        <span class="keyword">return</span> okHttpClient;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">RestAdapter <span class="title">provideRestAdapter</span><span class="params">(Application application, OkHttpClient okHttpClient)</span> </span>&#123;</div><div class="line">        RestAdapter.Builder builder = <span class="keyword">new</span> RestAdapter.Builder();</div><div class="line">        builder.setClient(<span class="keyword">new</span> OkClient(okHttpClient))</div><div class="line">               .setEndpoint(application.getString(R.string.endpoint));</div><div class="line">        <span class="keyword">return</span> builder.build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Provider-annotation"><a href="#Provider-annotation" class="headerlink" title="@Provider annotation"></a>@Provider annotation</h3><p>这个注解用在<code>@Module</code>类中。标注那些在Module中返回的依赖。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubApiModule</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//...</span></div><div class="line">    </div><div class="line">    <span class="meta">@Provides</span>   <span class="comment">//This annotation means that method below provides dependency</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">RestAdapter <span class="title">provideRestAdapter</span><span class="params">(Application application, OkHttpClient okHttpClient)</span> </span>&#123;</div><div class="line">        RestAdapter.Builder builder = <span class="keyword">new</span> RestAdapter.Builder();</div><div class="line">        builder.setClient(<span class="keyword">new</span> OkClient(okHttpClient))</div><div class="line">               .setEndpoint(application.getString(R.string.endpoint));</div><div class="line">        <span class="keyword">return</span> builder.build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Component-annotation"><a href="#Component-annotation" class="headerlink" title="@Component annotation"></a>@Component annotation</h3><p>这个注解用来构建接口把所有联系在一起。在这个地方我们定义我们依赖了那些Module或者其他Component。我们也在这里定义了那些依赖图应该公开可见（可以被注入的），和哪里的Component可以注入对象。<code>@Component</code>是<code>@Module</code>和<code>@Inject</code>的桥梁。</p>
<p>例子中的<code>@Component</code>使用了两个Modules,可以注入依赖给<code>GithubClientApplication</code>并且对外暴露了3个可见的依赖：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(</div><div class="line">    modules = &#123;</div><div class="line">        AppModule.class,</div><div class="line">        GithubApiModule.class</div><div class="line">    &#125;</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line">    <span class="comment">//提供给GithubClientApplication</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(GithubClientApplication githubClientApplication)</span></span>;</div><div class="line">    <span class="comment">//暴露三个可见的依赖</span></div><div class="line">    <span class="function">Application <span class="title">getApplication</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">AnalyticsManager <span class="title">getAnalyticsManager</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">UserManager <span class="title">getUserManager</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>并且<code>@Component</code>可以依赖于其他的Component，而且定义了生命周期。（下面的文章会提到）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ActivityScope</span></div><div class="line"><span class="meta">@Component</span>(      </div><div class="line">    modules = SplashActivityModule.class,</div><div class="line">    dependencies = AppComponent.class</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SplashActivityComponent</span> </span>&#123;</div><div class="line">    <span class="function">SplashActivity <span class="title">inject</span><span class="params">(SplashActivity splashActivity)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">SplashActivityPresenter <span class="title">presenter</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Scope-annotation"><a href="#Scope-annotation" class="headerlink" title="@Scope annotation"></a>@Scope annotation</h3><p>在Dagger2中，<code>@Scope</code>被用于标记自定义注解。简单说他们使得依赖有点跟单例相同。注解的依赖变成单例，但是生命周期会与Component关联（不是整个应用的生命周期）。</p>
<h3 id="Qulifiter-annotation"><a href="#Qulifiter-annotation" class="headerlink" title="@Qulifiter annotation"></a>@Qulifiter annotation</h3><p><code>@Qulifiter</code>注解帮助我们去为相同的接口依赖创建“Tags”。假如需要提供两个<code>RestAdapter</code>对象，一个用于GithubApi，一个用于FaceBookApi:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provides</span></div><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@GithubRestAdapter</span>  <span class="comment">//Qualifier</span></div><div class="line"><span class="function">RestAdapter <span class="title">provideRestAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestAdapter.Builder()</div><div class="line">        .setEndpoint(<span class="string">"https://api.github.com"</span>)</div><div class="line">        .build();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Provides</span></div><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@FacebookRestAdapter</span>  <span class="comment">//Qualifier</span></div><div class="line"><span class="function">RestAdapter <span class="title">provideRestAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestAdapter.Builder()</div><div class="line">        .setEndpoint(<span class="string">"https://api.facebook.com"</span>)</div><div class="line">        .build();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注入依赖：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Inject</span></div><div class="line"><span class="meta">@GithubRestAdapter</span></div><div class="line">RestAdapter githubRestAdapter;</div><div class="line"></div><div class="line"><span class="meta">@Inject</span></div><div class="line"><span class="meta">@FacebookRestAdapter</span></div><div class="line">RestAdapter facebookRestAdapter;</div></pre></td></tr></table></figure></p>
<h2 id="App-Example"><a href="#App-Example" class="headerlink" title="App Example"></a>App Example</h2><p>想法：<br>我们的Github客户端有三个Activity，使用案例非常简单。<br>1.输入Github的用户名。<br>2.如果用户存在，则展示所有的公开代码仓库<br>3.节当用户点击一个仓库展示代码仓库细</p>
<p>看起来是这个样子：<br><img src="http://frogermcs.github.io/images/14/app_flow.png" alt=""></p>
<p>在内部的实现，我们用DI角度构建的App结构看起来是：<br><img src="http://frogermcs.github.io/images/14/local_components.png" alt=""></p>
<p>概括来说，每一个Activity都有一个属于自己的依赖图。每个依赖图（<code>_Component</code>类）都拥有两个对象-<code>_Presenter</code>跟<code>_Activity</code>。并且，每个组件，都依赖了全局的Global 组件-<code>AppComponent</code>, <code>AppComponent</code>组件包括了<code>Application</code>,<code>UserManager</code>,<code>RepositoriesManager</code>等。<br><img src="http://frogermcs.github.io/images/14/app_component.png" alt=""></p>
<p>讲讲<code>AppComponent</code>,认真观察可以发现这个接口包含了两个Module:<code>AppModule</code>跟<code>GithubApiModule</code>。<br><code>GithubApiModule</code>提供了一些依赖：<code>OkhttpClient</code>或<code>RestAdapter</code>,他们只会在这个Module的其他依赖中注入。Dagger2可以控制哪些依赖对外部的组件可见。在我们的例子我们不希望暴露上面的依赖给外部。相对的，我们暴露了<code>UserManager</code>跟<code>RepositoriesManager</code>。因为只有这些类在Activitys中才被使用。所有的这些都通过public方法来定义，不用传入参数，并且会返回非空的类型。<br>文档中的例子：<br>提供依赖的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">SomeType <span class="title">getSomeType</span><span class="params">()</span></span>;</div><div class="line"><span class="function">Set&lt;SomeType&gt; <span class="title">getSomeTypes</span><span class="params">()</span></span>;</div><div class="line"><span class="meta">@PortNumber</span> <span class="function"><span class="keyword">int</span> <span class="title">getPortNumber</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
<p>此外，我们必须定义哪里我们希望去注入依赖（通过成员注入）。在我们的例子中<code>AppComponent</code>没有任何地方可以去注入。因为它是作为我们Scope组件的依赖。并且他们每个都要定义一个<code>inject(_Activity activity)</code>方法。在这里我们也有一些简单的规则-通过注入单个参数的方法被定义（定义一个实例，它代表我们需要往这个实例中注入依赖），他可以有任意的名字， 但是必须要返回空或者被传入的参数的类型。</p>
<p>文档中的例子：<br>成员注入的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">SomeType <span class="title">getSomeType</span><span class="params">()</span></span>;</div><div class="line"><span class="function">Provider&lt;SomeType&gt; <span class="title">getSomeTypeProvider</span><span class="params">()</span></span>;</div><div class="line"><span class="function">Lazy&lt;SomeType&gt; <span class="title">getLazySomeType</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍Dagger2的一些基础API&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android框架" scheme="https://github.com/iBotasky/tags/Android%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Dagger2" scheme="https://github.com/iBotasky/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2-Scope</title>
    <link href="https://github.com/iBotasky/2017/02/04/Dagger2-Scope/"/>
    <id>https://github.com/iBotasky/2017/02/04/Dagger2-Scope/</id>
    <published>2017-02-04T06:09:32.000Z</published>
    <updated>2017-02-04T06:57:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Dagger2的<code>@Scope</code>的用法介绍<br><a id="more"></a></p>
<h2 id="Scope–能为我们提供什么"><a href="#Scope–能为我们提供什么" class="headerlink" title="Scope–能为我们提供什么"></a>Scope–能为我们提供什么</h2><p>几乎所有的项目都会使用单例-比如API Client，DatabaseHelper，Analytic Manager等。因为依赖注入，所以我们不用关心实例化。我们不应该在代码里考虑如何获取这些对象。取而代之的是<code>@Inject</code>会给我们提供应该要提供的实例。<br>在Dagger2的Scope机制使得让一个类保持单例让他的存活周期跟Scope一样长。例如在实际中一个在<code>@ApplicationScope</code>的实例的存货周期跟Application的生命周期是一样的。<code>@ActivityScope</code>的存活周期跟Activity的生命周期相同（比如我们可以在同一个Activity下所有的Fragment共享单例）。</p>
<p>简单说：Scopes给我们创建了一种”局部单例“，生命周期取决于Scope自己。</p>
<p>但是，Dagger2并没有提供<code>@ActivityScope</code>和<code>@ApplicationScope</code>,这些都是要通过<code>@Scope</code>来自定义。Dagger2默认只提供<code>@Singleton</code>的Scope注解。</p>
<h2 id="Scope实践"><a href="#Scope实践" class="headerlink" title="Scope实践"></a>Scope实践</h2><p>我们要实现比Application/Activity Scope更加复杂的Scope。用GithubClient项目做为解释，项目中用到了三个Scope：</p>
<blockquote>
<ul>
<li>@Singleton - ApplicationScope</li>
<li>@UserScope - 用来联系用户的实例类的Scope（已经登录的用户）</li>
<li>@ActivityScope - 用来做与Activity生命周期相同的类的Scope（presenters 在我们的例子中）</li>
</ul>
</blockquote>
<p>引入的<code>@UserScope</code>跟前一篇文章的方案有不同之处。从用户体验的角度来说他没有提供任何帮助。但是从架构角度来说，他帮助我们在不需要传入任何intent参数的情况下为我们提供<code>User</code>实例。<br>并且那些需要user数据的类（<code>RepositoriesManager</code>类在这个例子中）能通过把<code>User</code>作为构造器函数拿到<code>User</code>。并且是在需要的时候去初始化，而不是在App启动的时候去初始化。这意味着：<code>RepositoriesManager</code>会在我们通过GithubApi拿到用户之后去做初始化（在<code>RepositoriesListActivity</code>呈现之前）。<br>这是简单的一个我们应用的Scopes和Component的示意图：<br><img src="http://frogermcs.github.io/images/15/dagger-scopes.png" alt=""><br>Singleton(ApplicationScope)是存活周期最长的Scope。<br>UserScope作为ApplicationScope的子Scope，他可以访问访问父Scope的对象。<br>ActivityScope也是如此，可以拿到UserScope跟ApplicationScope的对象。</p>
<h2 id="Scope-生命周期示例"><a href="#Scope-生命周期示例" class="headerlink" title="Scope 生命周期示例"></a>Scope 生命周期示例</h2><p><img src="http://frogermcs.github.io/images/15/scopes-lifecycle.png" alt=""><br>单例的生命周期是从app启动后的App的存活时间。<br>UserScope的创建是从我们通过GithubApi拿到<code>User</code>开始（真实情况下，实在用户登录后），并在我们回到SplashActivity后被销毁（真实情况下，是在用户登出后）。当新登录一个用户，会产生另外一个UserScope.<br>每个<code>ActivityScope</code>存活时间跟他所对应的Activity是一样的。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>在Dagger2中，Scope的实现归结于对Component的正确设置。一般情况下有两种设置：</p>
<blockquote>
<p><em>1.使用<code>Subcomponent</code>注解
</em>2.使用Component依赖</p>
</blockquote>
<p>两者最大的区别在于对象图的共享。Subcomponent可以访问他们Parenent Component的所有对象图，而Component依赖只能通过Component暴露对象接口来访问。<br>这里选择第一种实现<code>AppComponent</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(</div><div class="line">        modules = &#123;</div><div class="line">                AppModule.class,</div><div class="line">                GithubApiModule.class</div><div class="line">        &#125;</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">UserComponent <span class="title">plus</span><span class="params">(UserModule userModule)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">SplashActivityComponent <span class="title">plus</span><span class="params">(SplashActivityModule splashActivityModule)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>他会是其他SubComponent的根Component：UserComponent跟ActivitysComponents。我们去掉了上一章的依赖对象的接口暴露。Subcomponent可以直接访问全部的对象。<br>作为代替，我们新增了两个方法：</p>
<blockquote>
<p><em><code>UserComponent plus(UserModule userModule);</code>
</em><code>SplashActivityComponent plus(SplashActivityModule splashActivityModule);</code></p>
</blockquote>
<p>这表示我们可以从<code>AppComponent</code>创建两个子Components：<code>UserComponent</code>与<code>SplashActivityComponent</code>。两个子Components都可以访问<code>AppComponent</code>的Module的依赖。<br><em>这些方法的命名规则是：返回类型是subcomponent类，方法名字随意，参数是这个subcomponent的module</em><br>比如：<code>UserComponent</code>需要一个module(他通过plus传入)。这样，我们通过增加一个新生成的对象module，集成<code>AppComponent</code>图标：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@UserScope</span></div><div class="line"><span class="meta">@Subcomponent</span>(</div><div class="line">        modules = &#123;</div><div class="line">                UserModule.class</div><div class="line">        &#125;</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserComponent</span> </span>&#123;</div><div class="line">    <span class="function">RepositoriesListActivityComponent <span class="title">plus</span><span class="params">(RepositoriesListActivityModule repositoriesListActivityModule)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">RepositoryDetailsActivityComponent <span class="title">plus</span><span class="params">(RepositoryDetailsActivityModule repositoryDetailsActivityModule)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>UserComponent从AppComonent引用的对象都是单例，但是UserModule即UserComponent的那部分，创建的对象是”局部单例“。</p>
<p>在这里比较重要的是我们要负责<code>UserComponent</code>的生命周期。所以我们应该关心他的初始化和释放，在<code>GithubClient</code>的例子中，我们新增两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubClientApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> AppComponent appComponent;</div><div class="line">    <span class="keyword">private</span> UserComponent userComponent;</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> UserComponent <span class="title">createUserComponent</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        userComponent = appComponent.plus(<span class="keyword">new</span> UserModule(user));</div><div class="line">        <span class="keyword">return</span> userComponent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseUserComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">        userComponent = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>createUserComponent()</code>方法我们会从GithubApi（在<code>SpliashActivity</code>中）获取到<code>User</code>对象时调用；<code>releaseUserComponent()</code>方法会在我们从<code>RepositoriesListActivity</code>（这个时候我们不再需要user scope了）中退出时调用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dagger2的&lt;code&gt;@Scope&lt;/code&gt;的用法介绍&lt;br&gt;
    
    </summary>
    
    
      <category term="Android框架" scheme="https://github.com/iBotasky/tags/Android%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Dagger2" scheme="https://github.com/iBotasky/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://github.com/iBotasky/2017/02/04/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>https://github.com/iBotasky/2017/02/04/Markdown语法/</id>
    <published>2017-02-04T03:34:01.000Z</published>
    <updated>2017-02-04T06:22:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<a id="more"></a><strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"><br><img src="http://oktzkaa8p.bkt.clouddn.com/winteriscoming.jpeg" alt="winteriscoming"><br><img src="http://oktzkaa8p.bkt.clouddn.com/2017020476044google_developers_64dp.png" alt="2017020476044google_developers_64dp.png"><br>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>
<h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="external">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>
<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>
</blockquote>
<hr>
<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="external">Todo 列表</a></h3><ul>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[x] 新增 Todo 列表功能</li>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>
<h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># A comment</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></div></pre></td></tr></table></figure>
<h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="external">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: Start</div><div class="line">op=&gt;operation: Your Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line">e=&gt;end</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="external">序列图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>
<h3 id="6-绘制表格"><a href="#6-绘制表格" class="headerlink" title="6. 绘制表格"></a>6. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="7-更详细语法说明"><a href="#7-更详细语法说明" class="headerlink" title="7. 更详细语法说明"></a>7. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="external">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="external">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>
<h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右测的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>通过管理工具栏可以：</p>
<p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>
<h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>
<h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>标签： 未分类</p>
<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>
<p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="external">@ghosert</a><br>2015 年 06月 15日    </p>
<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax</a> 参考更多使用方法。</p>
<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，
    
    </summary>
    
    
      <category term="Markdown" scheme="https://github.com/iBotasky/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello world</title>
    <link href="https://github.com/iBotasky/2017/02/04/Hello-world/"/>
    <id>https://github.com/iBotasky/2017/02/04/Hello-world/</id>
    <published>2017-02-04T03:33:49.000Z</published>
    <updated>2017-02-04T03:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello world!</p>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello world!&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017新希望</title>
    <link href="https://github.com/iBotasky/2017/02/04/%E2%80%982017%E6%96%B0%E5%B8%8C%E6%9C%9B%E2%80%99/"/>
    <id>https://github.com/iBotasky/2017/02/04/‘2017新希望’/</id>
    <published>2017-02-04T03:33:34.000Z</published>
    <updated>2017-02-04T03:39:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>新的一年开始了，希望大家2017一切顺利！<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新的一年开始了，希望大家2017一切顺利！&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/iBotasky/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
