<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Botasky的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/iBotasky/"/>
  <updated>2017-02-04T06:19:57.000Z</updated>
  <id>https://github.com/iBotasky/</id>
  
  <author>
    <name>Botasky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dagger2</title>
    <link href="https://github.com/iBotasky/2017/02/04/Dagger2/"/>
    <id>https://github.com/iBotasky/2017/02/04/Dagger2/</id>
    <published>2017-02-04T06:19:09.000Z</published>
    <updated>2017-02-04T06:19:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍Dagger2</p>
<a id="more"></a>
<p>##1.基础知识点</p>
<blockquote>
<ul>
<li>依赖注入(Dependency Injection)</li>
<li>Java的注解 (Annotation)</li>
</ul>
</blockquote>
<p>###1.1 依赖注入 DI<br>目标类（需要进行依赖初始化的类）中所依赖的<strong><em>其他类</em></strong>的初始化过程，不是通过手动编码方式创建的类，通过技术手段，把<strong><em>其他类已经初始化好的实例</em></strong>自动注入到目标类中。<br><img src="http://upload-images.jianshu.io/upload_images/1504173-d5f60535cc77f17d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="依赖注入图解"></p>
<p>###1.2 注解 Annotation<br>它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。<br>Annotation其实是一种接口。通过Java的反射机制相关的API来访问annotation信息。相关类（框架或工具中的类）根据这些信息来决定如何使用该程序元素或改变它们的行为。<br>Annotation是不会影响程序代码的执行，无论annotation怎么变化，代码都始终如一地执行。</p>
<hr>
<p>##2.Dagger2注解</p>
<p>###2.1 @Inject<br>Inject主要有两个作用，一个是使用在构造函数上，通过标记构造函数让Dagger2来使用（Dagger2通过Inject标记可以在需要这个类实例的时候来找到这个构造函数并把相关实例new出来）从而提供依赖，另一个作用就是标记在需要依赖的变量让Dagger2为其提供依赖。</p>
<p>###2.2 @Provider<br>用Provide来标注一个方法，该方法可以在需要提供依赖时被调用，从而把预先提供好的对象当做依赖给标注了@Inject的变量赋值。provide主要用于标注Module里的方法</p>
<p>###2.3 @Module<br>用Module标注的类是专门用来提供依赖的。有的人可能有些疑惑，看了上面的@Inject，需要在构造函数上标记才能提供依赖，那么如果我们需要提供的类构造函数无法修改怎么办，比如一些jar包里的类，我们无法修改源码。这时候就需要使用Module了。Module可以给不能修改源码的类提供依赖，当然，能用Inject标注的通过Module也可以提供依赖。</p>
<p>###2.4 @Component<br>Component一般用来标注接口,Component也叫组件，方法中有dependenies，跟modules两个参数，被标注了Component的接口在编译时会产生相应的类的实例来作为提供依赖方和需要依赖方之间的桥梁，把相关依赖注入到其中。</p>
<p><img src="https://user-gold-cdn.xitu.io/2016/11/29/f0cfbf0aaa8a48fd5c889a7d0aee21e8.jpg" alt="示例图"></p>
<p>###2.5 提供依赖的流程<br>提供依赖有两种方式：</p>
<blockquote>
<ul>
<li>1.注解了@Inject的构造函数</li>
<li>2.注解了@Module 类中的@Provider 的方法</li>
</ul>
</blockquote>
<p>所以在依赖的选择上就有一个流程。</p>
<p>Dagger2选择依赖的流程：</p>
<blockquote>
<ul>
<li>步骤1：查找Module中是否存在创建该类的方法。</li>
<li>步骤2：若存在创建类方法，查看该方法是否存在参数</li>
<li>步骤2.1：若存在参数，则按从步骤1开始依次初始化每个参数</li>
<li>步骤2.2：若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</li>
<li>步骤3：若不存在创建类方法，则查找Inject注解的构造函数，看构造函数是否存在参数</li>
<li>步骤3.1：若存在参数，则从步骤1开始依次初始化每个参数</li>
<li>步骤3.2：若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</li>
</ul>
</blockquote>
<hr>
<p>##3. 两个比较难理解的注解：@Scope @Qulifiter</p>
<p>###3.1 @Qulifiter<br><strong><em>依赖迷失</em></strong>：如果有Module中有两个一样的返回类型，该用谁呢。我们把这种场景叫做依赖迷失。<br>@Qulifiter:通过自定义Qulifier，可以告诉Dagger2去需找具体的依赖提供者。</p>
<p>###3.2 @Qulifiter使用</p>
<p>####1.创建自定义注解:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Qulifiter</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> A &#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@Qualifier</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> B &#123;&#125;</div></pre></td></tr></table></figure></p>
<p>通过@Qulifiter创建了两个自定义注解，@A 与 @B</p>
<p>####2.在Module中使用@A 与 @B:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleModule</span> </span>&#123;</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@A</span></div><div class="line">    <span class="function">Cooker <span class="title">provideCookerA</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cooker(<span class="string">"James"</span>,<span class="string">"Espresso"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@B</span></div><div class="line">    <span class="function">Cooker <span class="title">provideCookerB</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cooker(<span class="string">"Karry"</span>,<span class="string">"Machiato"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>####3.具体使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComplexMaker</span> <span class="keyword">implements</span> <span class="title">CoffeeMaker</span> </span>&#123;</div><div class="line">    Cooker cookerA;</div><div class="line">    Cooker cookerB;</div><div class="line">    <span class="comment">//通过自定义的Qulifiter注解标记对应的Provider提供的依赖</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComplexMaker</span><span class="params">(@A Cooker cookerA,@B Cooker cookerB)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.cookerA = cookerA;</div><div class="line">        <span class="keyword">this</span>.cookerB = cookerB;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeCoffee</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cooker.make();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>####4.调用CookerA与CookerB<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookerA.make();<span class="comment">//James make Espresso</span></div><div class="line">cookerB.make();<span class="comment">//Karry make Machiato</span></div></pre></td></tr></table></figure></p>
<p>###3.3 @Scope<br>Scope难理解，通过例子来解释：</p>
<p>####1.定义一个Scope<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PerActivity &#123;&#125;</div></pre></td></tr></table></figure></p>
<p>####2.把定义的PerActivity放到Module<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">CoffeeShop <span class="title">provideCoffeeShop</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> CoffeeShop.getInstance();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@PerActivity</span></div><div class="line">    <span class="function">CookerFactory <span class="title">provideCookerFactory</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CookerFactory();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">CookerFactoryMulty <span class="title">provideCookerFactoryMulty</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CookerFactoryMulty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>####3.这个Module提供了CoffeeShop，CookerFactory和CookerFacotryMulty的依赖<br><code>CoffShop.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeShop</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CoffeeShop INSTANCE;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CoffeeShop</span><span class="params">()</span></span>&#123;</div><div class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"CoffeeShop New Instance"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CoffeeShop <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)&#123;</div><div class="line">            INSTANCE = <span class="keyword">new</span> CoffeeShop();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>CookerFactory.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookerFactory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CookerFactory</span><span class="params">()</span></span>&#123;</div><div class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"CookerFactory New Instance"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>CookerFactoryMulty.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookerFactoryMulty</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CookerFactoryMulty</span><span class="params">()</span></span>&#123;</div><div class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"CookerFactoryMulty New Instance"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们在这三个对象的构造方法里都加了Log，当他们的实例产生时能看到相关的Log，再看我们用到的地方，在MainActivity里给每个类都写两个变量.</p>
<p>####4.MainActivity中：<br><code>MainActivity.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    ActivityComponent activityComponent;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    CoffeeShop coffeeShop1;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    CoffeeShop coffeeShop2;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    CookerFactory cookerFactory1;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    CookerFactory cookerFactory2;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    CookerFactoryMulty cookerFactoryMulty1;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    CookerFactoryMulty cookerFactoryMulty2;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        activityComponent = DaggerActivityComponent.builder()</div><div class="line">                .activityModule(provideModule())</div><div class="line">                .applicationComponent(MyApplication.getComponent()).build();</div><div class="line">        activityComponent.inject(<span class="keyword">this</span>);</div><div class="line">        coffeeFactory.run();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> ActivityModule <span class="title">provideModule</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActivityModule();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>####5.运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">07-11 16:53:27.978    1927-1927/? D/TAG﹕ CoffeeShop New Instance</div><div class="line">07-11 16:53:27.978    1927-1927/? D/TAG﹕ CookerFactory New Instance</div><div class="line">07-11 16:53:27.978    1927-1927/? D/TAG﹕ CookerFactoryMulty New Instance</div><div class="line">07-11 16:53:27.978    1927-1927/? D/TAG﹕ CookerFactoryMulty New Instance</div></pre></td></tr></table></figure></p>
<p><strong><em>从Log中可以看到，CoffeeShop和CookerFactory的类都只new过一次，而CookerFactoryMulty被new了两次 再回头看我们的Module，其中CoffeeShop的依赖是通过单例模式提供的，只打一条Log很容易理解，而CookerFactory相对于CookerFactoryMulty来说内容几乎是一模一样，只多加一个@PerActivity的注解，但却比它少打了一次Log，这是为什么呢。哈哈，客官们，这就是@Scope神秘的地方，他通过自定义@Scope注解提供了单例，正如上面的CookerFactory，虽然并未用单例来提供依赖，但却和用单例提供依赖的CoffeeShop一样，两个对象的实例都是同一个，这就是Scope的作用，提供局部单例的功能，局部范围是啥，那就是它生命周期范围内。</em></strong></p>
<hr>
<p>##4.学习过程中遇到的一些坑</p>
<p>###4.1 代码：</p>
<p>####1.<code>AppModule.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span>  <span class="keyword">final</span> MyApplication application;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(MyApplication application)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.application = application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@ForApplication</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Application <span class="title">provideApplication</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@ForApplication</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyApplication <span class="title">provideApp</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@ForApplication</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">provideContext</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.application.getApplicationContext();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">provideUser</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"RootUser"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>####2.<code>UserModule.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> </span>&#123;</div><div class="line"><span class="comment">//    @Provides</span></div><div class="line"><span class="comment">//    public User provideUser()&#123;</span></div><div class="line"><span class="comment">//        return new User("RootUser");</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"></div><div class="line"><span class="comment">//    @Provides</span></div><div class="line"><span class="comment">//    public User providername(User user)&#123;</span></div><div class="line"><span class="comment">//        return user.getName();</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"></div><div class="line"><span class="comment">//    @Provides</span></div><div class="line"><span class="comment">//    public String provideString(User user)&#123;</span></div><div class="line"><span class="comment">//        return user.getName();</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//    @Provides</span></div><div class="line"><span class="comment">//    public String provideName(MyApplication application)&#123;</span></div><div class="line"><span class="comment">//        Log.e("Name" , " " + application.getPackageName());</span></div><div class="line"><span class="comment">//        return application.getPackageName();</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####3.<code>RepositoryComponent.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules = &#123;AppModule.class, UserModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RepositoryComponent</span> </span>&#123;</div><div class="line">    <span class="comment">//下层的依赖需要用到就要返回 dependenciuce</span></div><div class="line">    <span class="function">User <span class="title">getUser</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@ForApplication</span></div><div class="line">    <span class="function">MyApplication <span class="title">getApplication</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>####4.<code>ActivityComponent.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ActivityScope</span></div><div class="line"><span class="meta">@Component</span>(dependencies = RepositoryComponent.class, modules = ActivityModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActivityComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity mainActivity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###4.2 上面代码解释：</p>
<p>####1.<code>AppModule</code>与<code>UserModule</code>（UserModule.java是一个例子类，无实际作用）组成一个<code>RepositoryComponent</code>的组件，组件内的Provider可以互相提供依赖，注入实例到<em>同一个组件</em>需要的依赖里面。</p>
<p>####2.<code>ActivityComponent</code>是提供给Activity类的组件，这个组件dependencies 依赖了<code>RepositoryComponent</code>组件，然后加入了<code>ActivityModule</code>。</p>
<p>####3.<em>重点</em>：<code>RepositoryComponent</code>放出了两个方法<code>User getUser();</code>与<code>@ForApplication MyApplication getApplication()</code>，在我看来，这两个方法相当于开放出两个接口，给依赖这个<code>RepositoryComponent</code>组件的下层组件（这里是<code>ActivityComponent</code>）来提供依赖。 例如， <code>ActivityComponent</code>组件里面需要依赖一个<code>RepositoryComponent</code>中的User，那么<code>RepositoryComponent</code>中就需要定义这个<code>User getUser()</code>方法。<br>如果需要开放的依赖有自定义的<code>@Qulifiter</code>注解，那么在开放这个依赖的时候，也要对应加上这个注解，例如<code>@ForApplication MyApplication getAplication()</code>, 对应的在下层依赖需要注入的时候也要带上这个<code>@ForApplication</code>注解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍Dagger2&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android框架" scheme="https://github.com/iBotasky/tags/Android%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Dagger2" scheme="https://github.com/iBotasky/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2-依赖注入</title>
    <link href="https://github.com/iBotasky/2017/02/04/Dagger2-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>https://github.com/iBotasky/2017/02/04/Dagger2-依赖注入/</id>
    <published>2017-02-04T06:16:16.000Z</published>
    <updated>2017-02-04T06:17:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍依赖注入的相关知识<br><a id="more"></a></p>
<p>##依赖注入 Dependency injection<br>依赖注入，就是构建对象并在我们需要时把他们传入。<br>想象有一个简单的类，<code>UserManager</code>, 他依赖<code>UserStore</code>与<code>ApiService</code>。如果没有依赖注入，这个类看起来会是这个样子：<br><code>UserStore</code>和<code>ApiServie</code>两者都是在<code>UserManager</code>中创建和提供的：<br><img src="http://frogermcs.github.io/images/13/user_manager_no_di.png" alt="示意图"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ApiService apiService;</div><div class="line">    <span class="keyword">private</span> UserStore userStore;</div><div class="line"></div><div class="line">    <span class="comment">//No-args constructor. Dependencies are created inside.</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.apiService = <span class="keyword">new</span> ApiSerivce();</div><div class="line">        <span class="keyword">this</span>.userStore = <span class="keyword">new</span> UserStore();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerUser</span><span class="params">()</span> </span>&#123;<span class="comment">/*  */</span>&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> UserManager userManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle b)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(b);</div><div class="line">        <span class="keyword">this</span>.userManager = <span class="keyword">new</span> UserManager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRegisterClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        userManager.registerUser();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码会出现一些问题，想象一下，我们需要改变<code>UserStore</code>的实现，用<code>SharedPreferences</code>来作为他的存储机制，他需要至少一个<code>Context</code>对象来创建实例，所以我们需要通过<code>UserStore</code>的构造函数传入。他意味着，<code>UserManager</code>类中也需要被修改来使用新的<code>UserStore</code>构造器。如果有很多类使用了<code>UserStore</code>，他们需要全部被修改。</p>
<p>但是如果用了依赖注入：<br>他的依赖类是在外面创建和提供的：<br><img src="http://frogermcs.github.io/images/13/user_manager_di.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ApiService apiService;</div><div class="line">    <span class="keyword">private</span> UserStore userStore;</div><div class="line"></div><div class="line">    <span class="comment">//Dependencies are passed as arguments</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserManager</span><span class="params">(ApiService apiService, UserStore userStore)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.apiService = apiService;</div><div class="line">        <span class="keyword">this</span>.userStore = userStore;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerUser</span><span class="params">()</span> </span>&#123;<span class="comment">/*  */</span>&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> UserManager userManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle b)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(b);</div><div class="line">        ApiService api = ApiService.getInstance();</div><div class="line">        UserStore store = UserStore.getInstance();</div><div class="line">        </div><div class="line">        <span class="keyword">this</span>.userManager = <span class="keyword">new</span> UserManager(api, store);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRegisterClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        userManager.registerUser();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在相似的情况下，我们改变<code>UserStore</code>或者<code>ApiService</code>两个依赖的实现方式，我们不需要修改<code>UserManager</code>的代码。两个依赖的对象都是通过外面提供的。</p>
<p>所以使用依赖注入的优势是什么？？？</p>
<p>##优势</p>
<p>###<strong>构造/使用 的分离</strong><br>当我们构造类实例，通常这些对象会在其他地方使用到，多亏这个方法让我们的代码更加模块化，所有依赖都可以很简单的被替换掉，并且不会与我们应用的逻辑产生冲突，想要改变<code>DataBaseUserStore</code>为<code>SharedPrefesUserStore</code>？好的，我们只需要关心公开的API（与<code>DataBaseUserStore</code>相同的）或者实现相同的接口。</p>
<p>###单元测试<br>真正的单元测试假设一个类完全可以被隔离进行测试的，不需要了解他的相关依赖。在实践中，基于我们的<code>UserManager</code>类编写一个单元测试类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManagerTests</span> </span>&#123;</div><div class="line"></div><div class="line">    UserManager userManager;</div><div class="line"></div><div class="line">    <span class="meta">@Mock</span></div><div class="line">    ApiService apiServiceMock;</div><div class="line">    <span class="meta">@Mock</span></div><div class="line">    UserStore userStoreMock;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</div><div class="line">        userManager = <span class="keyword">new</span> UserManager(apiServiceMock, userStoreMock);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@After</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//Test our userManager here - all its dependencies are satisfied</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它只能使用DI，多亏<code>UserManger</code>是完全独立于<code>UserStore</code>与<code>ApiService</code>实现的。我们可以提供这些类的Mock，（简单的说Mock是一些拥有相同API的类，它在方法中不做任何事情，并且返回我们期望的值），然后在真实的依赖的实现对<code>UserManager</code>测试隔离。</p>
<p>###独立/并行开发<br>因为模块化的代码设计（<code>UserStore</code> 的实现可以完全独立与<code>UserManager</code>之外）。这样让程序间的代码更容易分离，（其实就是解耦）。只有<code>UserStore</code>的接口能被其他类调用，（尤其是被<code>UserManager</code>调用的<code>UserStore</code>的public方法）。其余的实现和逻辑可以用单元测试来做测试。</p>
<p>##依赖注入的框架<br>除了上面的优势之外，依赖注入模式也有一些弊端。一个就是会产生更多的模块代码。想象一个简单的<code>LoginActivity</code>类，他在MVP模式中被实现。这个类看起来就像这样。<br>唯一有问题的部分代码就是<code>LoginPresenter</code>的初始化：<br><img src="http://frogermcs.github.io/images/13/login_activity_diagram.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    LoginActivityPresenter presenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//这边需要把需要依赖的类全部手动先初始化一遍</span></div><div class="line">        OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line">        RestAdapter.Builder builder = <span class="keyword">new</span> RestAdapter.Builder();</div><div class="line">        builder.setClient(<span class="keyword">new</span> OkClient(okHttpClient));</div><div class="line">        RestAdapter restAdapter = builder.build();</div><div class="line">        ApiService apiService = restAdapter.create(ApiService.class);</div><div class="line">        UserManager userManager = UserManager.getInstance(apiService);</div><div class="line">        </div><div class="line">        UserDataStore userDataStore = UserDataStore.getInstance(</div><div class="line">                getSharedPreferences(<span class="string">"prefs"</span>, MODE_PRIVATE)</div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="comment">//Presenter is initialized here</span></div><div class="line">        presenter = <span class="keyword">new</span> LoginActivityPresenter(<span class="keyword">this</span>, userManager, userDataStore);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>他看起来不太友好不是吗？<br>这就是DI框架需要解决的问题，相同功能的代码看起来像这样:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="comment">//通过@Inject标注来获取初始化这个类需要注入的依赖</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    LoginActivityPresenter presenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        </div><div class="line">        <span class="comment">//Satisfy all dependencies requested by @Inject annotation</span></div><div class="line">        getDependenciesGraph().inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单多了对吧！当然，DI框架也不是说不用去创建依赖类的对象实例，这些实例需要我们在一些恰当的地方去初始化和配置。但是这些对象的构建会从使用中分离出来（这个就是DI的准则）。DI框架关心的是怎么把他们联系起来（如何传递对象，并把他们放入到需要的位置）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍依赖注入的相关知识&lt;br&gt;
    
    </summary>
    
    
      <category term="Android框架" scheme="https://github.com/iBotasky/tags/Android%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Dagger2" scheme="https://github.com/iBotasky/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2-Dagger API</title>
    <link href="https://github.com/iBotasky/2017/02/04/Dagger2-Dagger-API/"/>
    <id>https://github.com/iBotasky/2017/02/04/Dagger2-Dagger-API/</id>
    <published>2017-02-04T06:13:41.000Z</published>
    <updated>2017-02-04T06:15:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍Dagger2的一些基础API</p>
<a id="more"></a>
<p>##Dagger2基础<br>下面是Dagger2的API：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</div><div class="line">    Class&lt;?&gt;[] modules() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">    Class&lt;?&gt;[] dependencies() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Subcomponent &#123;</div><div class="line">    Class&lt;?&gt;[] modules() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Module &#123;</div><div class="line">    Class&lt;?&gt;[] includes() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Provides &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MapKey &#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">unwrapValue</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lazy</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Dagger2中还有一些其他元素通过Java注解规范来定义:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inject &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scope &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Qualifier &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###@Inject annotation<br>Dagger中最重要也是第一个注解<code>@Inject</code>，标记那些需要被DI框架所提供的依赖对象。在Dagger2中有3中不同的方式去提供依赖：</p>
<p>####构造器注入</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivityPresenter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> LoginActivity loginActivity;</div><div class="line">    <span class="keyword">private</span> UserDataStore userDataStore;</div><div class="line">    <span class="keyword">private</span> UserManager userManager;</div><div class="line">    </div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginActivityPresenter</span><span class="params">(LoginActivity loginActivity,</span></span></div><div class="line">                                  UserDataStore userDataStore,</div><div class="line">                                  UserManager userManager) &#123;</div><div class="line">        <span class="keyword">this</span>.loginActivity = loginActivity;</div><div class="line">        <span class="keyword">this</span>.userDataStore = userDataStore;</div><div class="line">        <span class="keyword">this</span>.userManager = userManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有的参数都是通过依赖图来获取。<code>@Inject</code>注解被使用在这个类的构造器使得这个构造器也被列入到依赖图的一部分。也就是当他需要的时候会被注入需要的依赖。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    LoginActivityPresenter presenter;</div><div class="line">    </div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种情况下的限制是，同一个类只能在一个构造函数中使用<code>@Inject</code></p>
<p>####属性注入<br>另外一个选项是通过注解<code>@Inject</code>在定义的属性中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    LoginActivityPresenter presenter;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    AnalyticsManager analyticsManager;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(bundle);</div><div class="line">        getAppComponent().inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这种情况下，注入过程需要我们在某个位置手动调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//...</span></div><div class="line">    </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(bundle);</div><div class="line">        getAppComponent().inject(<span class="keyword">this</span>);    <span class="comment">//Requested depenencies are injected in this moment</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在未被调用前，他们的依赖是null值。</p>
<p>属性注入的缺陷是，我们不能用<code>private</code>来标注他们。简单说，生成的代码会直接地调用它们来设置属性，就像这里：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//This class is generated automatically by Dagger 2</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity_MembersInjector</span> <span class="keyword">implements</span> <span class="title">MembersInjector</span>&lt;<span class="title">SplashActivity</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(SplashActivity splashActivity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (splashActivity == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot inject members into a null reference"</span>);</div><div class="line">        &#125;</div><div class="line">        supertypeInjector.injectMembers(splashActivity);</div><div class="line">        splashActivity.presenter = presenterProvider.get();</div><div class="line">        splashActivity.analyticsManager = analyticsManagerProvider.get();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>####方法注入<br>最后一种提供依赖的方法是注解<code>@Inject</code>在这个类的public方法上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivityPresenter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> LoginActivity loginActivity;</div><div class="line">    </div><div class="line">    <span class="meta">@Inject</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginActivityPresenter</span><span class="params">(LoginActivity loginActivity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loginActivity = loginActivity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enableWatches</span><span class="params">(Watches watches)</span> </span>&#123;</div><div class="line">        watches.register(<span class="keyword">this</span>);    <span class="comment">//Watches instance required fully constructed LoginActivityPresenter</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法中的参数都是通过依赖图提供。为什么我们需要方法注入？在某些情况下，我们希望传入类的当前实例（this引用）到注入的依赖中。方法注入会在构造器调用后马上被调用，所以我们传入的this是完全已经被构造完成的。</p>
<p>###@Module annotation<br>这个注解用来标识这个类是用来提供依赖的。Dagger通过它来知道那些地方需要被构建。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubApiModule</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">OkHttpClient <span class="title">provideOkHttpClient</span><span class="params">()</span> </span>&#123;</div><div class="line">        OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line">        okHttpClient.setConnectTimeout(<span class="number">60</span> * <span class="number">1000</span>, TimeUnit.MILLISECONDS);</div><div class="line">        okHttpClient.setReadTimeout(<span class="number">60</span> * <span class="number">1000</span>, TimeUnit.MILLISECONDS);</div><div class="line">        <span class="keyword">return</span> okHttpClient;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">RestAdapter <span class="title">provideRestAdapter</span><span class="params">(Application application, OkHttpClient okHttpClient)</span> </span>&#123;</div><div class="line">        RestAdapter.Builder builder = <span class="keyword">new</span> RestAdapter.Builder();</div><div class="line">        builder.setClient(<span class="keyword">new</span> OkClient(okHttpClient))</div><div class="line">               .setEndpoint(application.getString(R.string.endpoint));</div><div class="line">        <span class="keyword">return</span> builder.build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###@Provider annotation<br>这个注解用在<code>@Module</code>类中。标注那些在Module中返回的依赖。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubApiModule</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//...</span></div><div class="line">    </div><div class="line">    <span class="meta">@Provides</span>   <span class="comment">//This annotation means that method below provides dependency</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">RestAdapter <span class="title">provideRestAdapter</span><span class="params">(Application application, OkHttpClient okHttpClient)</span> </span>&#123;</div><div class="line">        RestAdapter.Builder builder = <span class="keyword">new</span> RestAdapter.Builder();</div><div class="line">        builder.setClient(<span class="keyword">new</span> OkClient(okHttpClient))</div><div class="line">               .setEndpoint(application.getString(R.string.endpoint));</div><div class="line">        <span class="keyword">return</span> builder.build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###@Component annotation<br>这个注解用来构建接口把所有联系在一起。在这个地方我们定义我们依赖了那些Module或者其他Component。我们也在这里定义了那些依赖图应该公开可见（可以被注入的），和哪里的Component可以注入对象。<code>@Component</code>是<code>@Module</code>和<code>@Inject</code>的桥梁。</p>
<p>例子中的<code>@Component</code>使用了两个Modules,可以注入依赖给<code>GithubClientApplication</code>并且对外暴露了3个可见的依赖：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(</div><div class="line">    modules = &#123;</div><div class="line">        AppModule.class,</div><div class="line">        GithubApiModule.class</div><div class="line">    &#125;</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line">    <span class="comment">//提供给GithubClientApplication</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(GithubClientApplication githubClientApplication)</span></span>;</div><div class="line">    <span class="comment">//暴露三个可见的依赖</span></div><div class="line">    <span class="function">Application <span class="title">getApplication</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">AnalyticsManager <span class="title">getAnalyticsManager</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">UserManager <span class="title">getUserManager</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>并且<code>@Component</code>可以依赖于其他的Component，而且定义了生命周期。（下面的文章会提到）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ActivityScope</span></div><div class="line"><span class="meta">@Component</span>(      </div><div class="line">    modules = SplashActivityModule.class,</div><div class="line">    dependencies = AppComponent.class</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SplashActivityComponent</span> </span>&#123;</div><div class="line">    <span class="function">SplashActivity <span class="title">inject</span><span class="params">(SplashActivity splashActivity)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">SplashActivityPresenter <span class="title">presenter</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###@Scope annotation<br>在Dagger2中，<code>@Scope</code>被用于标记自定义注解。简单说他们使得依赖有点跟单例相同。注解的依赖变成单例，但是生命周期会与Component关联（不是整个应用的生命周期）。</p>
<p>###@Qulifiter annotation<br><code>@Qulifiter</code>注解帮助我们去为相同的接口依赖创建“Tags”。假如需要提供两个<code>RestAdapter</code>对象，一个用于GithubApi，一个用于FaceBookApi:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provides</span></div><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@GithubRestAdapter</span>  <span class="comment">//Qualifier</span></div><div class="line"><span class="function">RestAdapter <span class="title">provideRestAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestAdapter.Builder()</div><div class="line">        .setEndpoint(<span class="string">"https://api.github.com"</span>)</div><div class="line">        .build();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Provides</span></div><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@FacebookRestAdapter</span>  <span class="comment">//Qualifier</span></div><div class="line"><span class="function">RestAdapter <span class="title">provideRestAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestAdapter.Builder()</div><div class="line">        .setEndpoint(<span class="string">"https://api.facebook.com"</span>)</div><div class="line">        .build();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注入依赖：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Inject</span></div><div class="line"><span class="meta">@GithubRestAdapter</span></div><div class="line">RestAdapter githubRestAdapter;</div><div class="line"></div><div class="line"><span class="meta">@Inject</span></div><div class="line"><span class="meta">@FacebookRestAdapter</span></div><div class="line">RestAdapter facebookRestAdapter;</div></pre></td></tr></table></figure></p>
<p>##App Example<br>想法：<br>我们的Github客户端有三个Activity，使用案例非常简单。<br>1.输入Github的用户名。<br>2.如果用户存在，则展示所有的公开代码仓库<br>3.节当用户点击一个仓库展示代码仓库细</p>
<p>看起来是这个样子：<br><img src="http://frogermcs.github.io/images/14/app_flow.png" alt=""></p>
<p>在内部的实现，我们用DI角度构建的App结构看起来是：<br><img src="http://frogermcs.github.io/images/14/local_components.png" alt=""></p>
<p>概括来说，每一个Activity都有一个属于自己的依赖图。每个依赖图（<code>_Component</code>类）都拥有两个对象-<code>_Presenter</code>跟<code>_Activity</code>。并且，每个组件，都依赖了全局的Global 组件-<code>AppComponent</code>, <code>AppComponent</code>组件包括了<code>Application</code>,<code>UserManager</code>,<code>RepositoriesManager</code>等。<br><img src="http://frogermcs.github.io/images/14/app_component.png" alt=""></p>
<p>讲讲<code>AppComponent</code>,认真观察可以发现这个接口包含了两个Module:<code>AppModule</code>跟<code>GithubApiModule</code>。<br><code>GithubApiModule</code>提供了一些依赖：<code>OkhttpClient</code>或<code>RestAdapter</code>,他们只会在这个Module的其他依赖中注入。Dagger2可以控制哪些依赖对外部的组件可见。在我们的例子我们不希望暴露上面的依赖给外部。相对的，我们暴露了<code>UserManager</code>跟<code>RepositoriesManager</code>。因为只有这些类在Activitys中才被使用。所有的这些都通过public方法来定义，不用传入参数，并且会返回非空的类型。<br>文档中的例子：<br>提供依赖的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">SomeType <span class="title">getSomeType</span><span class="params">()</span></span>;</div><div class="line"><span class="function">Set&lt;SomeType&gt; <span class="title">getSomeTypes</span><span class="params">()</span></span>;</div><div class="line"><span class="meta">@PortNumber</span> <span class="function"><span class="keyword">int</span> <span class="title">getPortNumber</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
<p>此外，我们必须定义哪里我们希望去注入依赖（通过成员注入）。在我们的例子中<code>AppComponent</code>没有任何地方可以去注入。因为它是作为我们Scope组件的依赖。并且他们每个都要定义一个<code>inject(_Activity activity)</code>方法。在这里我们也有一些简单的规则-通过注入单个参数的方法被定义（定义一个实例，它代表我们需要往这个实例中注入依赖），他可以有任意的名字， 但是必须要返回空或者被传入的参数的类型。</p>
<p>文档中的例子：<br>成员注入的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">SomeType <span class="title">getSomeType</span><span class="params">()</span></span>;</div><div class="line"><span class="function">Provider&lt;SomeType&gt; <span class="title">getSomeTypeProvider</span><span class="params">()</span></span>;</div><div class="line"><span class="function">Lazy&lt;SomeType&gt; <span class="title">getLazySomeType</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍Dagger2的一些基础API&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android框架" scheme="https://github.com/iBotasky/tags/Android%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Dagger2" scheme="https://github.com/iBotasky/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2-Scope</title>
    <link href="https://github.com/iBotasky/2017/02/04/Dagger2-Scope/"/>
    <id>https://github.com/iBotasky/2017/02/04/Dagger2-Scope/</id>
    <published>2017-02-04T06:09:32.000Z</published>
    <updated>2017-02-04T06:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Dagger2的<code>@Scope</code>的用法介绍<br><a id="more"></a></p>
<p>##Scope–能为我们提供什么<br>几乎所有的项目都会使用单例-比如API Client，DatabaseHelper，Analytic Manager等。因为依赖注入，所以我们不用关心实例化。我们不应该在代码里考虑如何获取这些对象。取而代之的是<code>@Inject</code>会给我们提供应该要提供的实例。<br>在Dagger2的Scope机制使得让一个类保持单例让他的存活周期跟Scope一样长。例如在实际中一个在<code>@ApplicationScope</code>的实例的存货周期跟Application的生命周期是一样的。<code>@ActivityScope</code>的存活周期跟Activity的生命周期相同（比如我们可以在同一个Activity下所有的Fragment共享单例）。</p>
<p>简单说：Scopes给我们创建了一种”局部单例“，生命周期取决于Scope自己。</p>
<p>但是，Dagger2并没有提供<code>@ActivityScope</code>和<code>@ApplicationScope</code>,这些都是要通过<code>@Scope</code>来自定义。Dagger2默认只提供<code>@Singleton</code>的Scope注解。</p>
<p>##Scope实践<br>我们要实现比Application/Activity Scope更加复杂的Scope。用GithubClient项目做为解释，项目中用到了三个Scope：</p>
<blockquote>
<ul>
<li>@Singleton - ApplicationScope</li>
<li>@UserScope - 用来联系用户的实例类的Scope（已经登录的用户）</li>
<li>@ActivityScope - 用来做与Activity生命周期相同的类的Scope（presenters 在我们的例子中）</li>
</ul>
</blockquote>
<p>引入的<code>@UserScope</code>跟前一篇文章的方案有不同之处。从用户体验的角度来说他没有提供任何帮助。但是从架构角度来说，他帮助我们在不需要传入任何intent参数的情况下为我们提供<code>User</code>实例。<br>并且那些需要user数据的类（<code>RepositoriesManager</code>类在这个例子中）能通过把<code>User</code>作为构造器函数拿到<code>User</code>。并且是在需要的时候去初始化，而不是在App启动的时候去初始化。这意味着：<code>RepositoriesManager</code>会在我们通过GithubApi拿到用户之后去做初始化（在<code>RepositoriesListActivity</code>呈现之前）。<br>这是简单的一个我们应用的Scopes和Component的示意图：<br><img src="http://frogermcs.github.io/images/15/dagger-scopes.png" alt=""><br>Singleton(ApplicationScope)是存活周期最长的Scope。<br>UserScope作为ApplicationScope的子Scope，他可以访问访问父Scope的对象。<br>ActivityScope也是如此，可以拿到UserScope跟ApplicationScope的对象。</p>
<p>##Scope 生命周期示例<br><img src="http://frogermcs.github.io/images/15/scopes-lifecycle.png" alt=""><br>单例的生命周期是从app启动后的App的存活时间。<br>UserScope的创建是从我们通过GithubApi拿到<code>User</code>开始（真实情况下，实在用户登录后），并在我们回到SplashActivity后被销毁（真实情况下，是在用户登出后）。当新登录一个用户，会产生另外一个UserScope.<br>每个<code>ActivityScope</code>存活时间跟他所对应的Activity是一样的。</p>
<p>##实现<br>在Dagger2中，Scope的实现归结于对Component的正确设置。一般情况下有两种设置：</p>
<blockquote>
<p><em>1.使用<code>Subcomponent</code>注解
</em>2.使用Component依赖</p>
</blockquote>
<p>两者最大的区别在于对象图的共享。Subcomponent可以访问他们Parenent Component的所有对象图，而Component依赖只能通过Component暴露对象接口来访问。<br>这里选择第一种实现<code>AppComponent</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(</div><div class="line">        modules = &#123;</div><div class="line">                AppModule.class,</div><div class="line">                GithubApiModule.class</div><div class="line">        &#125;</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">UserComponent <span class="title">plus</span><span class="params">(UserModule userModule)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">SplashActivityComponent <span class="title">plus</span><span class="params">(SplashActivityModule splashActivityModule)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>他会是其他SubComponent的根Component：UserComponent跟ActivitysComponents。我们去掉了上一章的依赖对象的接口暴露。Subcomponent可以直接访问全部的对象。<br>作为代替，我们新增了两个方法：</p>
<blockquote>
<p><em><code>UserComponent plus(UserModule userModule);</code>
</em><code>SplashActivityComponent plus(SplashActivityModule splashActivityModule);</code></p>
</blockquote>
<p>这表示我们可以从<code>AppComponent</code>创建两个子Components：<code>UserComponent</code>与<code>SplashActivityComponent</code>。两个子Components都可以访问<code>AppComponent</code>的Module的依赖。<br><em>这些方法的命名规则是：返回类型是subcomponent类，方法名字随意，参数是这个subcomponent的module</em><br>比如：<code>UserComponent</code>需要一个module(他通过plus传入)。这样，我们通过增加一个新生成的对象module，集成<code>AppComponent</code>图标：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@UserScope</span></div><div class="line"><span class="meta">@Subcomponent</span>(</div><div class="line">        modules = &#123;</div><div class="line">                UserModule.class</div><div class="line">        &#125;</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserComponent</span> </span>&#123;</div><div class="line">    <span class="function">RepositoriesListActivityComponent <span class="title">plus</span><span class="params">(RepositoriesListActivityModule repositoriesListActivityModule)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">RepositoryDetailsActivityComponent <span class="title">plus</span><span class="params">(RepositoryDetailsActivityModule repositoryDetailsActivityModule)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>UserComponent从AppComonent引用的对象都是单例，但是UserModule即UserComponent的那部分，创建的对象是”局部单例“。</p>
<p>在这里比较重要的是我们要负责<code>UserComponent</code>的生命周期。所以我们应该关心他的初始化和释放，在<code>GithubClient</code>的例子中，我们新增两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubClientApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> AppComponent appComponent;</div><div class="line">    <span class="keyword">private</span> UserComponent userComponent;</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> UserComponent <span class="title">createUserComponent</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        userComponent = appComponent.plus(<span class="keyword">new</span> UserModule(user));</div><div class="line">        <span class="keyword">return</span> userComponent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseUserComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">        userComponent = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>createUserComponent()</code>方法我们会从GithubApi（在<code>SpliashActivity</code>中）获取到<code>User</code>对象时调用；<code>releaseUserComponent()</code>方法会在我们从<code>RepositoriesListActivity</code>（这个时候我们不再需要user scope了）中退出时调用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dagger2的&lt;code&gt;@Scope&lt;/code&gt;的用法介绍&lt;br&gt;
    
    </summary>
    
    
      <category term="Android框架" scheme="https://github.com/iBotasky/tags/Android%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Dagger2" scheme="https://github.com/iBotasky/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://github.com/iBotasky/2017/02/04/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>https://github.com/iBotasky/2017/02/04/Markdown语法/</id>
    <published>2017-02-04T03:34:01.000Z</published>
    <updated>2017-02-04T04:12:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<a id="more"></a><strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"><br><img src="http://oktzkaa8p.bkt.clouddn.com/winteriscoming.jpeg" alt="winteriscoming"><br><img src="http://oktzkaa8p.bkt.clouddn.com/2017020476044google_developers_64dp.png" alt="2017020476044google_developers_64dp.png"><br>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>
<h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="external">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>
<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>
</blockquote>
<hr>
<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="external">Todo 列表</a></h3><ul>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[x] 新增 Todo 列表功能</li>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>
<h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># A comment</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></div></pre></td></tr></table></figure>
<h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="external">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: Start</div><div class="line">op=&gt;operation: Your Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line">e=&gt;end</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="external">序列图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>
<h3 id="6-绘制表格"><a href="#6-绘制表格" class="headerlink" title="6. 绘制表格"></a>6. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="7-更详细语法说明"><a href="#7-更详细语法说明" class="headerlink" title="7. 更详细语法说明"></a>7. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="external">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="external">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>
<h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右测的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>通过管理工具栏可以：</p>
<p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>
<h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>
<h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>标签： 未分类</p>
<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>
<p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="external">@ghosert</a><br>2015 年 06月 15日    </p>
<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax</a> 参考更多使用方法。</p>
<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello world</title>
    <link href="https://github.com/iBotasky/2017/02/04/Hello-world/"/>
    <id>https://github.com/iBotasky/2017/02/04/Hello-world/</id>
    <published>2017-02-04T03:33:49.000Z</published>
    <updated>2017-02-04T03:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello world!</p>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello world!&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017新希望</title>
    <link href="https://github.com/iBotasky/2017/02/04/%E2%80%982017%E6%96%B0%E5%B8%8C%E6%9C%9B%E2%80%99/"/>
    <id>https://github.com/iBotasky/2017/02/04/‘2017新希望’/</id>
    <published>2017-02-04T03:33:34.000Z</published>
    <updated>2017-02-04T03:39:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>新的一年开始了，希望大家2017一切顺利！<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新的一年开始了，希望大家2017一切顺利！&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/iBotasky/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
